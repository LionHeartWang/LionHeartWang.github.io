<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Workspace of LionHeart]]></title>
  <link href="http://lionheartwang.github.io/atom.xml" rel="self"/>
  <link href="http://lionheartwang.github.io/"/>
  <updated>2018-02-08T10:45:28+08:00</updated>
  <id>http://lionheartwang.github.io/</id>
  <author>
    <name><![CDATA[Wang Yiguang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[搭建Ray集群步骤]]></title>
    <link href="http://lionheartwang.github.io/blog/2018/02/08/da-jian-rayji-qun-bu-zou/"/>
    <updated>2018-02-08T10:29:16+08:00</updated>
    <id>http://lionheartwang.github.io/blog/2018/02/08/da-jian-rayji-qun-bu-zou</id>
    <content type="html"><![CDATA[<p>本文介绍如何搭建Ray 0.3集群环境。</p>

<p>可参考官方文档：</p>

<ul>
<li><a href="https://ray.readthedocs.io/en/latest/using-ray-on-a-cluster.html">https://ray.readthedocs.io/en/latest/using-ray-on-a-cluster.html</a></li>
</ul>


<!-- More -->


<h2>安装Ray</h2>

<p>首先在每台机器上安装如下组件。</p>

<h3>安装Anaconda</h3>

<p>首先安装Anaconda，下载：</p>

<ul>
<li>Anaconda2-4.3.0-Linux-x86_64.sh</li>
</ul>


<p>按提示执行安装即可。</p>

<h3>安装Ray依赖</h3>

<p>ray依赖如下库：</p>

<ul>
<li>six (>=1.0.0)</li>
<li>redis</li>
<li>pytest</li>
<li>psutil</li>
<li>numpy</li>
<li>funcsigs</li>
<li>flatbuffers</li>
<li>colorama</li>
<li>cloudpickle (==0.5.2)</li>
<li>click</li>
</ul>


<p>注意：</p>

<ul>
<li>如果机器环境通pip源则直接pip install即可。</li>
<li>如果不通可以在 <a href="https://pypi.python.org/pypi/ray/0.3.0">https://pypi.python.org/pypi/ray/0.3.0</a> 下载.whl包后上传到机器pip本地安装。</li>
</ul>


<h3>安装Ray 0.3</h3>

<p>如果环境通pip源</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>pip install ray
</span></code></pre></td></tr></table></div></figure>


<p>如果不通则在 <a href="https://pypi.python.org/pypi/ray/0.3.0">https://pypi.python.org/pypi/ray/0.3.0</a> 下载 ：</p>

<ul>
<li>ray-0.3.0-cp27-cp27mu-manylinux1_x86_64.whl</li>
</ul>


<p>然后执行：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>pip install ray-0.3.0-cp27-cp27mu-manylinux1_x86_64.whl
</span></code></pre></td></tr></table></div></figure>


<h2>搭建集群</h2>

<p>假设集群IP如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>192.168.0.1
</span><span class='line'>192.168.0.2
</span><span class='line'>192.168.0.3
</span><span class='line'>192.168.0.4
</span><span class='line'>192.168.0.5
</span><span class='line'>192.168.0.6
</span><span class='line'>192.168.0.7
</span><span class='line'>192.168.0.8
</span><span class='line'>192.168.0.9
</span><span class='line'>192.168.0.10
</span></code></pre></td></tr></table></div></figure>


<p>搭建集群环境如下：</p>

<h3>启动Head节点</h3>

<p>选一个节点作为Head节点，例如IP为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>192.168.0.1
</span></code></pre></td></tr></table></div></figure>


<p>在head节点执行：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ray start --head --node-ip-address 192.168.0.1 --redis-port<span class="o">=</span>6379
</span></code></pre></td></tr></table></div></figure>


<p>执行后会启动Head节点相关的服务。</p>

<h3>启动Worker节点</h3>

<p>Worker节点IP为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>192.168.0.2
</span><span class='line'>192.168.0.3
</span><span class='line'>192.168.0.4
</span><span class='line'>192.168.0.5
</span><span class='line'>192.168.0.6
</span><span class='line'>192.168.0.7
</span><span class='line'>192.168.0.8
</span><span class='line'>192.168.0.9
</span><span class='line'>192.168.0.10
</span></code></pre></td></tr></table></div></figure>


<p>在每台Worker节点上执行：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ray start --redis-address :6379 192.168.0.x --num-cpus 10
</span></code></pre></td></tr></table></div></figure>


<p>执行后会启动Worker节点相关服务，其中：</p>

<ul>
<li>192.168.0.x 为对应节点IP</li>
<li>num-cpu选项可以用于设置每台节点可用的cpu数，默认为机器总的cpu数。</li>
</ul>


<h3>停止集群</h3>

<p>Head节点与Worker节点服务的停止命令相同，执行：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ray stop
</span></code></pre></td></tr></table></div></figure>


<h2>连接集群</h2>

<p>使用如下方法建立连接：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">ray</span>
</span><span class='line'>
</span><span class='line'><span class="n">ray</span><span class="o">.</span><span class="n">init</span><span class="p">(</span><span class="n">redis_address</span><span class="o">=</span><span class="s">&quot;11.184.187.19:6379&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tensorflow模型保存与加载方法]]></title>
    <link href="http://lionheartwang.github.io/blog/2017/12/10/tensorflowmo-xing-bao-cun-yu-jia-zai-fang-fa/"/>
    <updated>2017-12-10T16:57:13+08:00</updated>
    <id>http://lionheartwang.github.io/blog/2017/12/10/tensorflowmo-xing-bao-cun-yu-jia-zai-fang-fa</id>
    <content type="html"><![CDATA[<p>本文档介绍如何保存和读取Tensorflow变量和模型。</p>

<p>官方文档可参考：</p>

<ul>
<li><a href="https://www.tensorflow.org/programmers_guide/saved_model">https://www.tensorflow.org/programmers_guide/saved_model</a></li>
</ul>


<!--More-->


<h2>保存/读取变量</h2>

<p>本节介绍如何存取Tensorflow变量。注意Estimators会自动在model_dir中存取变量。</p>

<p><code>tf.train.Saver</code> 提供了存取模型的接口，其构造函数会在图中增加存取模型的op。</p>

<p>示例化的Saver对象提供方法来运行这些op并，设置checkpoint文件用于保存和恢复模型信息。</p>

<p>Saver关于将模型中定义的所有变量保存，如果你不了解加载模型的graph结构，可以参考后面的保存恢复模型一节。</p>

<p>TensorFlow将变量以二进制形式存储在文件中，保存的信息主要是变量名以及对应的Tensor的值。</p>

<h3>保存变量</h3>

<p>调用tf.train.Saver()来管理模型变量，示例代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># Create some variables.</span>
</span><span class='line'><span class="n">v1</span> <span class="o">=</span> <span class="n">tf</span><span class="o">.</span><span class="n">get_variable</span><span class="p">(</span><span class="s">&quot;v1&quot;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span> <span class="n">initializer</span> <span class="o">=</span> <span class="n">tf</span><span class="o">.</span><span class="n">zeros_initializer</span><span class="p">)</span>
</span><span class='line'><span class="n">v2</span> <span class="o">=</span> <span class="n">tf</span><span class="o">.</span><span class="n">get_variable</span><span class="p">(</span><span class="s">&quot;v2&quot;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span> <span class="n">initializer</span> <span class="o">=</span> <span class="n">tf</span><span class="o">.</span><span class="n">zeros_initializer</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">inc_v1</span> <span class="o">=</span> <span class="n">v1</span><span class="o">.</span><span class="n">assign</span><span class="p">(</span><span class="n">v1</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="n">dec_v2</span> <span class="o">=</span> <span class="n">v2</span><span class="o">.</span><span class="n">assign</span><span class="p">(</span><span class="n">v2</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Add an op to initialize the variables.</span>
</span><span class='line'><span class="n">init_op</span> <span class="o">=</span> <span class="n">tf</span><span class="o">.</span><span class="n">global_variables_initializer</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Add ops to save and restore all the variables.</span>
</span><span class='line'><span class="n">saver</span> <span class="o">=</span> <span class="n">tf</span><span class="o">.</span><span class="n">train</span><span class="o">.</span><span class="n">Saver</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Later, launch the model, initialize the variables, do some work, and save the</span>
</span><span class='line'><span class="c"># variables to disk.</span>
</span><span class='line'><span class="k">with</span> <span class="n">tf</span><span class="o">.</span><span class="n">Session</span><span class="p">()</span> <span class="k">as</span> <span class="n">sess</span><span class="p">:</span>
</span><span class='line'>  <span class="n">sess</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">init_op</span><span class="p">)</span>
</span><span class='line'>  <span class="c"># Do some work with the model.</span>
</span><span class='line'>  <span class="n">inc_v1</span><span class="o">.</span><span class="n">op</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>
</span><span class='line'>  <span class="n">dec_v2</span><span class="o">.</span><span class="n">op</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>
</span><span class='line'>  <span class="c"># Save the variables to disk.</span>
</span><span class='line'>  <span class="n">save_path</span> <span class="o">=</span> <span class="n">saver</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="n">sess</span><span class="p">,</span> <span class="s">&quot;/tmp/model.ckpt&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">print</span><span class="p">(</span><span class="s">&quot;Model saved in file: </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="n">save_path</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>恢复变量</h3>

<p>同样使用tf.train.Saver来从checkpoint中恢复变量，示例代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">tf</span><span class="o">.</span><span class="n">reset_default_graph</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Create some variables.</span>
</span><span class='line'><span class="n">v1</span> <span class="o">=</span> <span class="n">tf</span><span class="o">.</span><span class="n">get_variable</span><span class="p">(</span><span class="s">&quot;v1&quot;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="p">[</span><span class="mi">3</span><span class="p">])</span>
</span><span class='line'><span class="n">v2</span> <span class="o">=</span> <span class="n">tf</span><span class="o">.</span><span class="n">get_variable</span><span class="p">(</span><span class="s">&quot;v2&quot;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="p">[</span><span class="mi">5</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Add ops to save and restore all the variables.</span>
</span><span class='line'><span class="n">saver</span> <span class="o">=</span> <span class="n">tf</span><span class="o">.</span><span class="n">train</span><span class="o">.</span><span class="n">Saver</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Later, launch the model, use the saver to restore variables from disk, and</span>
</span><span class='line'><span class="c"># do some work with the model.</span>
</span><span class='line'><span class="k">with</span> <span class="n">tf</span><span class="o">.</span><span class="n">Session</span><span class="p">()</span> <span class="k">as</span> <span class="n">sess</span><span class="p">:</span>
</span><span class='line'>  <span class="c"># Restore variables from disk.</span>
</span><span class='line'>  <span class="n">saver</span><span class="o">.</span><span class="n">restore</span><span class="p">(</span><span class="n">sess</span><span class="p">,</span> <span class="s">&quot;/tmp/model.ckpt&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">print</span><span class="p">(</span><span class="s">&quot;Model restored.&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="c"># Check the values of the variables</span>
</span><span class='line'>  <span class="k">print</span><span class="p">(</span><span class="s">&quot;v1 : </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="n">v1</span><span class="o">.</span><span class="n">eval</span><span class="p">())</span>
</span><span class='line'>  <span class="k">print</span><span class="p">(</span><span class="s">&quot;v2 : </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="n">v2</span><span class="o">.</span><span class="n">eval</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure>


<h3>存取指定的变量</h3>

<p>有时可能只需要存取模型graph中的部分变量，可以list或者dict两种形式传给tf.train.Saver()来指定需要存取的变量。</p>

<ul>
<li>list形式，模型的变量列表。</li>
<li>dict形式，name为新的保存后的变量名，value为模型中的变量名。</li>
</ul>


<p>示例代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">tf</span><span class="o">.</span><span class="n">reset_default_graph</span><span class="p">()</span>
</span><span class='line'><span class="c"># Create some variables.</span>
</span><span class='line'><span class="n">v1</span> <span class="o">=</span> <span class="n">tf</span><span class="o">.</span><span class="n">get_variable</span><span class="p">(</span><span class="s">&quot;v1&quot;</span><span class="p">,</span> <span class="p">[</span><span class="mi">3</span><span class="p">],</span> <span class="n">initializer</span> <span class="o">=</span> <span class="n">tf</span><span class="o">.</span><span class="n">zeros_initializer</span><span class="p">)</span>
</span><span class='line'><span class="n">v2</span> <span class="o">=</span> <span class="n">tf</span><span class="o">.</span><span class="n">get_variable</span><span class="p">(</span><span class="s">&quot;v2&quot;</span><span class="p">,</span> <span class="p">[</span><span class="mi">5</span><span class="p">],</span> <span class="n">initializer</span> <span class="o">=</span> <span class="n">tf</span><span class="o">.</span><span class="n">zeros_initializer</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Add ops to save and restore only `v2` using the name &quot;v2&quot;</span>
</span><span class='line'><span class="n">saver</span> <span class="o">=</span> <span class="n">tf</span><span class="o">.</span><span class="n">train</span><span class="o">.</span><span class="n">Saver</span><span class="p">({</span><span class="s">&quot;v2&quot;</span><span class="p">:</span> <span class="n">v2</span><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Use the saver object normally after that.</span>
</span><span class='line'><span class="k">with</span> <span class="n">tf</span><span class="o">.</span><span class="n">Session</span><span class="p">()</span> <span class="k">as</span> <span class="n">sess</span><span class="p">:</span>
</span><span class='line'>  <span class="c"># Initialize v1 since the saver will not.</span>
</span><span class='line'>  <span class="n">v1</span><span class="o">.</span><span class="n">initializer</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>
</span><span class='line'>  <span class="n">saver</span><span class="o">.</span><span class="n">restore</span><span class="p">(</span><span class="n">sess</span><span class="p">,</span> <span class="s">&quot;/tmp/model.ckpt&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">print</span><span class="p">(</span><span class="s">&quot;v1 : </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="n">v1</span><span class="o">.</span><span class="n">eval</span><span class="p">())</span>
</span><span class='line'>  <span class="k">print</span><span class="p">(</span><span class="s">&quot;v2 : </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="n">v2</span><span class="o">.</span><span class="n">eval</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意：</p>

<ul>
<li>可以创建多个模型Saver对象来保存模型变量，同样的变量可被不同的Saver保存多次，restore操作用于从checkpoint中恢复变量的值。</li>
<li>如果checkpoint中只保存了部分变量，那么恢复后，graph中其他的变量仍需要被初始化。</li>
<li>查看checkpoint中的变量可以使用inspect_checkpoint库，特别是print_tensors_in_checkpoint_file函数。</li>
<li>Saver默认使用tf.Variable.name属性作为每个变量的变量名，然而你可以在Saver对象中未变量指定存储在checkpoint中的新名字。</li>
</ul>


<h2>保存/读取模型概述</h2>

<p>当你想要保存整个模型(变量、模型graph以及graph的meta信息)时，我们推荐使用<code>SavedModel</code>。</p>

<p>SavedModel是一种面向多语言的，可恢复的高度序列化封装的格式。</p>

<p>SavedModel运行上层系统或工具来生产、消费或者转换Tensorflow模型。</p>

<p>Tensorflow提供了多种机制来同SavedModel进行交互，包括tf.saved_model API, Estimator API 以及 CLI方式。</p>

<h2>操作SavedModel API</h2>

<p>本节聚焦在使用底层Tensorflow API时需要用到的保存或加载SavedModel的API。</p>

<h3>构建SavedModel</h3>

<p>我们提供了SavedModel builder的python实现。SavedModelBuilder提供保存MetaGraphDef结构的功能。</p>

<ul>
<li>MetaGraphDef是MetaGraph的proto buffer表达形式。</li>
<li>MetaGraph是一个数据流图，以及相关的变量、资源和signatures。</li>
<li>signature是一个graph的输入与输出的集合。</li>
</ul>


<p>每个加入到 SavedModel中的MetaGraphDef需要以用户指定的tag标注。tag提供了区分特定MetaGraphDef的方法。通常这些tag会标注MetaGraphDef的功能以及一些可选的硬件相关的信息。</p>

<p>SavedModelBuilder的使用示例代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">export_dir</span> <span class="o">=</span> <span class="o">...</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="n">builder</span> <span class="o">=</span> <span class="n">tf</span><span class="o">.</span><span class="n">saved_model_builder</span><span class="o">.</span><span class="n">SavedModelBuilder</span><span class="p">(</span><span class="n">export_dir</span><span class="p">)</span>
</span><span class='line'><span class="k">with</span> <span class="n">tf</span><span class="o">.</span><span class="n">Session</span><span class="p">(</span><span class="n">graph</span><span class="o">=</span><span class="n">tf</span><span class="o">.</span><span class="n">Graph</span><span class="p">())</span> <span class="k">as</span> <span class="n">sess</span><span class="p">:</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'>  <span class="n">builder</span><span class="o">.</span><span class="n">add_meta_graph_and_variables</span><span class="p">(</span><span class="n">sess</span><span class="p">,</span>
</span><span class='line'>                                       <span class="p">[</span><span class="n">tag_constants</span><span class="o">.</span><span class="n">TRAINING</span><span class="p">],</span>
</span><span class='line'>                                       <span class="n">signature_def_map</span><span class="o">=</span><span class="n">foo_signatures</span><span class="p">,</span>
</span><span class='line'>                                       <span class="n">assets_collection</span><span class="o">=</span><span class="n">foo_assets</span><span class="p">)</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="c"># Add a second MetaGraphDef for inference.</span>
</span><span class='line'><span class="k">with</span> <span class="n">tf</span><span class="o">.</span><span class="n">Session</span><span class="p">(</span><span class="n">graph</span><span class="o">=</span><span class="n">tf</span><span class="o">.</span><span class="n">Graph</span><span class="p">())</span> <span class="k">as</span> <span class="n">sess</span><span class="p">:</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'>  <span class="n">builder</span><span class="o">.</span><span class="n">add_meta_graph</span><span class="p">([</span><span class="n">tag_constants</span><span class="o">.</span><span class="n">SERVING</span><span class="p">])</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="n">builder</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<h3>加载SaveModel</h3>

<p>调用python版本的SaveModel loader需要提供一下信息：</p>

<ul>
<li>保存graph定义和变量的session。</li>
<li>用来标识MetaGraphDef的tag。</li>
<li>SavedModel对应的目录位置。</li>
</ul>


<p>示例代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">export_dir</span> <span class="o">=</span> <span class="o">...</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="k">with</span> <span class="n">tf</span><span class="o">.</span><span class="n">Session</span><span class="p">(</span><span class="n">graph</span><span class="o">=</span><span class="n">tf</span><span class="o">.</span><span class="n">Graph</span><span class="p">())</span> <span class="k">as</span> <span class="n">sess</span><span class="p">:</span>
</span><span class='line'>  <span class="n">tf</span><span class="o">.</span><span class="n">saved_model</span><span class="o">.</span><span class="n">loader</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">sess</span><span class="p">,</span> <span class="p">[</span><span class="n">tag_constants</span><span class="o">.</span><span class="n">TRAINING</span><span class="p">],</span> <span class="n">export_dir</span><span class="p">)</span>
</span><span class='line'>  <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>C++版本的SavedModel loader也提供从指定目录恢复模型的API，并支持指定SessionOptions和RunOptions参数。</p>

<p>同样需要指定taq参数，被加载的SavedModel被SavedModelBundle引用，包含了MetaGraphDef以及加载它的session信息。</p>

<p>示例代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">const</span> <span class="n">string</span> <span class="n">export_dir</span> <span class="o">=</span> <span class="p">...</span>
</span><span class='line'><span class="n">SavedModelBundle</span> <span class="n">bundle</span><span class="p">;</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="n">LoadSavedModel</span><span class="p">(</span><span class="n">session_options</span><span class="p">,</span> <span class="n">run_options</span><span class="p">,</span> <span class="n">export_dir</span><span class="p">,</span> <span class="p">{</span><span class="n">kSavedModelTagTrain</span><span class="p">},</span>
</span><span class='line'>               <span class="o">&amp;</span><span class="n">bundle</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>另外Tensorflow提供了一组MetaGraphDef和SignatureDef相关的常量供用户使用。</p>

<p>MetaGraphDef常量：</p>

<ul>
<li>python：<a href="https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/saved_model/tag_constants.py">https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/saved_model/tag_constants.py</a></li>
<li>c++：<a href="https://github.com/tensorflow/tensorflow/blob/master/tensorflow/cc/saved_model/tag_constants.h">https://github.com/tensorflow/tensorflow/blob/master/tensorflow/cc/saved_model/tag_constants.h</a></li>
</ul>


<p>SignatureDef常量</p>

<ul>
<li>python：<a href="https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/saved_model/signature_constants.py">https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/saved_model/signature_constants.py</a></li>
<li>c++：<a href="https://github.com/tensorflow/tensorflow/blob/master/tensorflow/cc/saved_model/signature_constants.h">https://github.com/tensorflow/tensorflow/blob/master/tensorflow/cc/saved_model/signature_constants.h</a></li>
</ul>


<h2>在Estimators中使用SaveModel</h2>

<p>当训练好Estimator模型后，你可能需要部署预测服务。你可以选择在本机启动一个本地服务，或在云端进行扩展。</p>

<p>部署Estimator训练出的模型需要先把模型导出为SaveModel格式，本节介绍：</p>

<ul>
<li>如何制定输出节点以及相关的API</li>
<li>使用SavedModel导出模型</li>
<li>发请求给本地模型预测服务</li>
</ul>


<h3>准备Serving输入</h3>

<p>训练过程中 <code>input_fn()</code>用于提供数据输入，类似地，预测阶段输入数据由 <code>serving_input_receiver_fn</code>提供。</p>

<p>serving_input_receiver_fn有如下两个功能：</p>

<ul>
<li>将预测需要输入数据的placeholder添加到graph中。</li>
<li>添加额外的用于将输入数据格式转换为feature Tensors格式的op。</li>
</ul>


<p>函数返回 <code>tf.estimator.export.ServingInputReceiver</code>对象，封装了placeholders以及feature Tensor。</p>

<p>当编写 <code>serving_input_receiver_fn</code>时，需要提供一个 tf.parse_example的特定parser描述来说明数据解析的方式。</p>

<p>Parser说明是一个dict的形式，包含：</p>

<ul>
<li>tf.FixedLenFeature</li>
<li>tf.VarLenFeature</li>
<li>tf.SparseFeature</li>
</ul>


<p>示例代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">feature_spec</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;foo&#39;</span><span class="p">:</span> <span class="n">tf</span><span class="o">.</span><span class="n">FixedLenFeature</span><span class="p">(</span><span class="o">...</span><span class="p">),</span>
</span><span class='line'>                <span class="s">&#39;bar&#39;</span><span class="p">:</span> <span class="n">tf</span><span class="o">.</span><span class="n">VarLenFeature</span><span class="p">(</span><span class="o">...</span><span class="p">)}</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">serving_input_receiver_fn</span><span class="p">():</span>
</span><span class='line'>  <span class="sd">&quot;&quot;&quot;An input receiver that expects a serialized tf.Example.&quot;&quot;&quot;</span>
</span><span class='line'>  <span class="n">serialized_tf_example</span> <span class="o">=</span> <span class="n">tf</span><span class="o">.</span><span class="n">placeholder</span><span class="p">(</span><span class="n">dtype</span><span class="o">=</span><span class="n">tf</span><span class="o">.</span><span class="n">string</span><span class="p">,</span>
</span><span class='line'>                                         <span class="n">shape</span><span class="o">=</span><span class="p">[</span><span class="n">default_batch_size</span><span class="p">],</span>
</span><span class='line'>                                         <span class="n">name</span><span class="o">=</span><span class="s">&#39;input_example_tensor&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">receiver_tensors</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;examples&#39;</span><span class="p">:</span> <span class="n">serialized_tf_example</span><span class="p">}</span>
</span><span class='line'>  <span class="n">features</span> <span class="o">=</span> <span class="n">tf</span><span class="o">.</span><span class="n">parse_example</span><span class="p">(</span><span class="n">serialized_tf_example</span><span class="p">,</span> <span class="n">feature_spec</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">tf</span><span class="o">.</span><span class="n">estimator</span><span class="o">.</span><span class="n">export</span><span class="o">.</span><span class="n">ServingInputReceiver</span><span class="p">(</span><span class="n">features</span><span class="p">,</span> <span class="n">receiver_tensors</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>tf.estimator.export.build_parsing_serving_input_receiver_fn 工具函数给出了一个通用实现。</p>

<h3>导出模型</h3>

<p>调用 <code>tf.estimator.Estimator.export_savedmodel</code> ，提供导出路径以及serving_input_receiver_fn进行模型导出：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">estimator</span><span class="o">.</span><span class="n">export_savedmodel</span><span class="p">(</span><span class="n">export_dir_base</span><span class="p">,</span> <span class="n">serving_input_receiver_fn</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>该方法创建一个新的graph并调用serving_input_receiver_fn来获取输入tensor，随后调用Estimator的<code>model_fn()</code> 来产生模型的graph。</p>

<p>最终会创建一个带时间戳的目录(export_dir_base/<timestamp>)并将模型导出为SavedModel。</p>

<h3>指定模型输出</h3>

<p>通过export_outputs指定，其类型为 <code>tf.estimator.EstimatorSpec</code>，是一个形如 {name: output} 的dict，用于描述预测阶段的输出。</p>

<p>预测输出的值类型必须为 <code>ExportOutput</code> 的某个实现，例如：</p>

<ul>
<li>tf.estimator.export.ClassificationOutput,</li>
<li>tf.estimator.export.RegressionOutput</li>
<li>tf.estimator.export.PredictOutput.</li>
</ul>


<h3>部署本地预测服务</h3>

<p>本地部署预测服务需要使用TensorFlow Serving。</p>

<p>TensorFlow Serving是一个独立的开源项目，功能是加载SavedModel模型并对外提供gRPC服务。</p>

<p>首先安装Tensorflow Serving。</p>

<p>部署服务命令如下，将 <code>$export_dir_base</code> 替换为SavedModel导出的目录。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bazel build //tensorflow_serving/model_servers:tensorflow_model_server
</span><span class='line'>bazel-bin/tensorflow_serving/model_servers/tensorflow_model_server --port<span class="o">=</span><span class="m">9000</span> --model_base_path<span class="o">=</span><span class="nv">$export_dir_base</span>
</span></code></pre></td></tr></table></div></figure>


<p>执行后在9000端口会启动一个gRPC预测服务。</p>

<h3>向本地Server发送请求</h3>

<p>发送预测请求需要通过PredictionService gRPC API。相关API依赖：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>  <span class="nv">deps</span> <span class="o">=</span> <span class="o">[</span>
</span><span class='line'>    <span class="s2">&quot;//tensorflow_serving/apis:classification_proto_py_pb2&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;//tensorflow_serving/apis:regression_proto_py_pb2&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;//tensorflow_serving/apis:predict_proto_py_pb2&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;//tensorflow_serving/apis:prediction_service_proto_py_pb2&quot;</span>
</span><span class='line'>  <span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>python代码中可以像如下示例使用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">tensorflow_serving.apis</span> <span class="kn">import</span> <span class="n">classification_pb2</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">tensorflow_serving.apis</span> <span class="kn">import</span> <span class="n">regression_pb2</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">tensorflow_serving.apis</span> <span class="kn">import</span> <span class="n">predict_pb2</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">tensorflow_serving.apis</span> <span class="kn">import</span> <span class="n">prediction_service_pb2</span>
</span></code></pre></td></tr></table></div></figure>


<p>请求的数据会以proto buffer的形式发送，发送请求的示例代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">grpc.beta</span> <span class="kn">import</span> <span class="n">implementations</span>
</span><span class='line'>
</span><span class='line'><span class="n">channel</span> <span class="o">=</span> <span class="n">implementations</span><span class="o">.</span><span class="n">insecure_channel</span><span class="p">(</span><span class="n">host</span><span class="p">,</span> <span class="nb">int</span><span class="p">(</span><span class="n">port</span><span class="p">))</span>
</span><span class='line'><span class="n">stub</span> <span class="o">=</span> <span class="n">prediction_service_pb2</span><span class="o">.</span><span class="n">beta_create_PredictionService_stub</span><span class="p">(</span><span class="n">channel</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">request</span> <span class="o">=</span> <span class="n">classification_pb2</span><span class="o">.</span><span class="n">ClassificationRequest</span><span class="p">()</span>
</span><span class='line'><span class="n">example</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">input</span><span class="o">.</span><span class="n">example_list</span><span class="o">.</span><span class="n">examples</span><span class="o">.</span><span class="n">add</span><span class="p">()</span>
</span><span class='line'><span class="n">example</span><span class="o">.</span><span class="n">features</span><span class="o">.</span><span class="n">feature</span><span class="p">[</span><span class="s">&#39;x&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">float_list</span><span class="o">.</span><span class="n">value</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">image</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="nb">float</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">result</span> <span class="o">=</span> <span class="n">stub</span><span class="o">.</span><span class="n">Classify</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="mf">10.0</span><span class="p">)</span>  <span class="c"># 10 secs timeout</span>
</span></code></pre></td></tr></table></div></figure>


<p>本例中的返回值是一个 <code>ClassificationResponse</code>格式的PB数据。</p>

<h2>SavedModel目录结构</h2>

<p>Tensorflow为每个SavedModel组织目录结构形式如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>assets/
</span><span class='line'>assets.extra/
</span><span class='line'>variables/
</span><span class='line'>    variables.data-?????-of-?????
</span><span class='line'>    variables.index
</span><span class='line'>saved_model.pb<span class="p">|</span>saved_model.pbtxt
</span></code></pre></td></tr></table></div></figure>


<p>说明如下：</p>

<ul>
<li>assets：是一个子目录，包含了一些外部文件，例如词表等，这些资源文件会被特定的MetaGraphDef读取使用。</li>
<li>assets.extra：是一个子目录，用于上层应用或者用户添加一些自己的资源文件，但不会被模型的graph加载。该目录不由SavedModel管理。</li>
<li>variables：是一个子目录，用于存储tf.train.Saver的输出。</li>
<li>saved_model.pb/saved_model.pbtxt SavedModel的Proto Buffer描述。包含了MetaGraphDef的proto buffer形式的定义。</li>
</ul>


<p>一个单独的SavedModel可以表达多个graph，SavedModel的多个graph共享一组checkpoint(变量和资源文件)。</p>

<p>组织形式如下图所示：</p>

<p><img src="http://lionheartwang.github.io/images/blog/10-savemodel.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[论文阅读: On-line Random Forest]]></title>
    <link href="http://lionheartwang.github.io/blog/2017/11/30/on-line-random-forest-paper/"/>
    <updated>2017-11-30T21:25:38+08:00</updated>
    <id>http://lionheartwang.github.io/blog/2017/11/30/on-line-random-forest-paper</id>
    <content type="html"><![CDATA[<p>2009年的一篇论文, 提出了一种在线随机森林算法（ORF）。</p>

<p>原文链接：<a href="http://ieeexplore.ieee.org/abstract/document/5457447/?reload=true">http://ieeexplore.ieee.org/abstract/document/5457447/?reload=true</a></p>

<!-- More -->


<h2>本文解决的问题</h2>

<p>经典的随机森林算法是离线训练，每次要基于全局数据生成一系列决策树，但在线环境下难以获得全局数据，因而无法直接使用。</p>

<p>本文提出的算法设计参考了online-bagging的思路，效果接近离线版本的算法。</p>

<h2>核心内容</h2>

<p>本文提出的在线online random forest算法中，每棵树可以在线分裂。样本采样时每棵树采样次数基于泊松分布，每个叶子分裂的条件是预测的数量要达到一定的值和每个叶子节点信息。</p>

<p>每个树的生长主要通过在线接收的实时样本数据，每棵树的叶子节点分裂主要根据该节点的熵或Gini系数。</p>

<p>算法流程如下图所示：</p>

<p><img src="http://lionheartwang.github.io/images/blog/07-online_random_forest.png"></p>

<p>说明如下：</p>

<ul>
<li>步骤3. 用个possion分布确定从采样的次数，其原理见online boosting： <a href="http://www.cnblogs.com/liqizhou/archive/2012/05/10/2494145.html">http://www.cnblogs.com/liqizhou/archive/2012/05/10/2494145.html</a></li>
<li>步骤6. u代表分类的类别。</li>
<li>步骤7. j代表第t棵树上叶子节点。</li>
<li>步骤8. 统计第j个叶子节点的数目和计算Gini。</li>
<li>步骤9. 判断条件是否分裂的二个条件。</li>
<li>步骤10. 在符合条件的叶子节点中，选择一个Gini最大的叶子节点作为分类节点。</li>
</ul>


<p>有时在线训练过程中希望丢弃较旧的信息，需要适当丢弃随机森林中的某些树。针对这种需求，原文给出了随机森林中树的选择性丢弃方案。</p>

<p>算法流程如下图所示：</p>

<p><img src="http://lionheartwang.github.io/images/blog/08-orf_temporal_knowledge_weighting.png"></p>

<p>附C++源码实现：</p>

<ul>
<li><a href="https://github.com/amirsaffari/online-random-forests">https://github.com/amirsaffari/online-random-forests</a></li>
</ul>


<h2>本文解决方案效果</h2>

<p>随着样本数量增加，算法效果逼近离线随机森林算法。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Landslide基于MarkDown制作在线Slide]]></title>
    <link href="http://lionheartwang.github.io/blog/2017/11/26/shi-yong-landslideji-yu-markdownzhi-zuo-zai-xian-slide/"/>
    <updated>2017-11-26T19:05:19+08:00</updated>
    <id>http://lionheartwang.github.io/blog/2017/11/26/shi-yong-landslideji-yu-markdownzhi-zuo-zai-xian-slide</id>
    <content type="html"><![CDATA[<p>本文介绍使用Landslide工具基于Markdown语法制作在线Slide的方法。</p>

<!-- More -->


<h2>Landsilde工具使用</h2>

<p>Landslide是基于Google的<code>html5slides</code>的一个Slide生成工具，可将markdown、ReST 或者 textile文件转化成HTML5的slide。</p>

<p>该转化支持内联模式，即生成一个具有完整功能的HTML文件，将依赖的css等东西放入其中，很容易用来分享。</p>

<p>类似的还有工具还有 remark，相关gitlab项目主页：</p>

<ul>
<li><a href="https://github.com/adamzap/landslide">https://github.com/adamzap/landslide</a></li>
<li><a href="https://github.com/gnab/remark/">https://github.com/gnab/remark/</a></li>
</ul>


<h3>安装landslide</h3>

<p>  方案一 pip安装：</p>

<pre><code class="``bash"> $ pip install landslide
</code></pre>

<p> 方案二 源码安装：</p>

<pre><code class="`bash">$ git clone https://github.com/adamzap/landslide.git
$ cd landslide
$ python setup.py build
$ sudo python setup.py install
</code></pre>

<h3>Markdown书写Slide内容</h3>

<p>以markdown语法书写，可以参考landslide提供的示例：</p>

<ul>
<li><a href="https://github.com/adamzap/landslide/blob/master/examples/markdown/slides.md">https://github.com/adamzap/landslide/blob/master/examples/markdown/slides.md</a></li>
</ul>


<h3>生成PPT页面</h3>

<p>以官方提供的markdown文本为例，文件命名为test.md，完成后执行如下命令生成HTML内容：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>landslide file.md -i -o &gt; test.html
</span></code></pre></td></tr></table></div></figure>


<p>命令行参数说明详见下文介绍。</p>

<p>可以直接在浏览器中打开观察效果：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>open test.html
</span></code></pre></td></tr></table></div></figure>


<p>支持快捷键，可左右切换slide，详见下文快捷键介绍。</p>

<p><img src="http://lionheartwang.github.io/images/blog/06-landslide_demo.png"></p>

<h2>使用PrinceXML生成PDF</h2>

<p>PrinceXML是一款将html转换为pdf的工具，提供免费带水印版试用。</p>

<p>下载地址：</p>

<ul>
<li><a href="http://www.princexml.com/download/">http://www.princexml.com/download/</a></li>
</ul>


<p>选择对应版本解压后执行脚本安装：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sh insatll.sh
</span></code></pre></td></tr></table></div></figure>


<p>指定路径安装完毕后即可使用prince命令。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>prince test.html -o test.pdf
</span></code></pre></td></tr></table></div></figure>


<p>即可生成需要的PDF PPT文件。</p>

<h2>Landslide快捷键及命令参数介绍</h2>

<h3>PPT页面快捷键</h3>

<p>快捷键如下：</p>

<blockquote><p>Press h to toggle display of help</p>

<p>Press left arrow and right arrow to navigate</p>

<p>Press t to toggle a table of contents for your presentation. Slide titles are links</p>

<p>Press ESC to display the presentation overview (Exposé)</p>

<p>Press n to toggle slide number visibility</p>

<p>Press b to toggle screen blanking</p>

<p>Press c to toggle current slide context (previous and next slides)</p>

<p>Press e to make slides filling the whole available space within the document body</p>

<p>Press S to toggle display of link to the source file for each slide</p>

<p>Press &lsquo;2&rsquo; to toggle notes in your slides (specify with the .notes macro)</p>

<p>Press &lsquo;3&rsquo; to toggle pseudo-3D display (experimental)</p>

<p>Browser zooming is supported</p></blockquote>

<h3>命令行参数介绍</h3>

<p>landslide命令行参数介绍如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>-h, --help            show this <span class="nb">help </span>message and <span class="nb">exit</span>
</span><span class='line'>-c, --copy-theme      Copy theme directory into current presentation <span class="nb">source </span>directory
</span><span class='line'>-b, --debug           Will display any exception trace to stdin
</span><span class='line'>-d FILE, --destination<span class="o">=</span>FILE
</span><span class='line'>                      The path to the to the destination file: .html or .pdf
</span><span class='line'>                      extensions allowed <span class="o">(</span>default: presentation.html<span class="o">)</span>
</span><span class='line'>-e ENCODING, --encoding<span class="o">=</span>ENCODING
</span><span class='line'>                      The encoding of your files <span class="o">(</span>defaults to utf8<span class="o">)</span>
</span><span class='line'>-i, --embed     Embed stylesheet and javascript contents,
</span><span class='line'>                      base64-encoded images in presentation to make a
</span><span class='line'>                      standalone document
</span><span class='line'>-l LINENOS, --linenos<span class="o">=</span>LINENOS
</span><span class='line'>                      How to output linenos in <span class="nb">source </span>code. Three options
</span><span class='line'>                      availables: no <span class="o">(</span>no line numbers<span class="o">)</span><span class="p">;</span> inline inside pre tag
</span><span class='line'>                      table <span class="o">(</span>lines numbers in another cell, copy-paste friendly<span class="o">)</span>
</span><span class='line'>-o, --direct-output   Prints the generated HTML code to stdin<span class="p">;</span> won<span class="s1">&#39;t work with PDF export</span>
</span><span class='line'><span class="s1">-q, --quiet           Won&#39;</span>t write anything to stdin <span class="o">(</span>silent mode<span class="o">)</span>
</span><span class='line'>-r, --relative   Make your presentation asset links relative to current
</span><span class='line'>                      <span class="nb">pwd</span><span class="p">;</span> This may be useful <span class="k">if</span> you intend to publish your
</span><span class='line'>                      html presentation online.
</span><span class='line'>-t THEME, --theme<span class="o">=</span>THEME
</span><span class='line'>                      A theme name, or path to a landlside theme directory
</span><span class='line'>-v, --verbose  Write informational messages to stdin <span class="o">(</span>enabled by default<span class="o">)</span>
</span><span class='line'>-w, --watch    Watch the <span class="nb">source </span>directory <span class="k">for</span> changes and auto-regenerate the presentation
</span><span class='line'>-x EXTENSIONS, --extensions<span class="o">=</span>EXTENSIONS
</span><span class='line'>                      Comma-separated list of extensions <span class="k">for</span> Markdown
</span><span class='line'>-m, --math-output     Enable mathematical output using mathjax
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Fuse挂载HDFS到本地目录方法]]></title>
    <link href="http://lionheartwang.github.io/blog/2017/11/14/gua-zai-hdfsdao-ben-di-mu-lu-fang-fa/"/>
    <updated>2017-11-14T00:10:27+08:00</updated>
    <id>http://lionheartwang.github.io/blog/2017/11/14/gua-zai-hdfsdao-ben-di-mu-lu-fang-fa</id>
    <content type="html"><![CDATA[<p>网上关于挂载HDFS到本地的介绍大多基于较早版本的Hadoop。
本文以Hadoop-2.8.0为例，介绍通过Fuse挂载HDFS到本地的方法。</p>

<!--more-->


<h2>安装Fuse</h2>

<p>对每台节点，执行如下命令一键安装</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo yum -y install fuse fuse-libs
</span></code></pre></td></tr></table></div></figure>


<h2>编译fuse-dfs工具</h2>

<p>下载hadoop-2.8.0源码，解压编译</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>tar zxvf hadoop-2.8.0.tar.gz
</span><span class='line'><span class="nb">cd </span>hadoop-2.8.0
</span><span class='line'>mvn package -Drequire.fuse<span class="o">=</span><span class="nb">true</span> -DskipTests -Dmaven.javadoc.skip<span class="o">=</span><span class="nb">true</span> -Dtar
</span></code></pre></td></tr></table></div></figure>


<p>编译后会生成fuse_dfs的可执行文件，位于</p>

<blockquote><p>./hadoop-hdfs-project/hadoop-hdfs-native-client/target/main/native/fuse-dfs/fuse_dfs</p></blockquote>

<p>另外会生成一个对该可执行程序的封装脚本，位于</p>

<blockquote><p>./hadoop-hdfs-project/hadoop-hdfs-native-client/src/main/native/fuse-dfs/fuse_dfs_wrapper.sh</p></blockquote>

<h2>配置环境变量</h2>

<p>可以为fuse_dfs_wrapper.sh建立软链接到当前目录方便后续使用。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ln -s /&lt;Hadoop源码路径&gt;/hadoop-hdfs-project/hadoop-hdfs-native-client/src/main/native/fuse-dfs/fuse_dfs_wrapper.sh .
</span></code></pre></td></tr></table></div></figure>


<p>编辑fuse_dfs_wrapper.sh内容，有一些需要根据具体情况修改：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">HADOOP_HOME</span><span class="o">=</span>/path/to/your/hadoop
</span><span class='line'><span class="nv">HADOOP_PREFIX</span><span class="o">=</span>/path/to/your/hadoop/src/
</span><span class='line'>
</span><span class='line'><span class="nb">export </span><span class="nv">FUSEDFS_PATH</span><span class="o">=</span><span class="s2">&quot;$HADOOP_PREFIX/hadoop-hdfs-project/hadoop-hdfs-native-client/target/main/native/fuse-dfs&quot;</span>
</span><span class='line'><span class="nb">export </span><span class="nv">LIBHDFS_PATH</span><span class="o">=</span><span class="s2">&quot;$HADOOP_PREFIX/hadoop-hdfs-project/hadoop-hdfs-native-client/target/native/target/usr/local/lib&quot;</span>
</span><span class='line'><span class="nv">HADOOP_CONF_DIR</span><span class="o">=</span><span class="nv">$HADOOP_HOME</span>/etc/hadoop
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;$OS_ARCH&quot;</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  <span class="nb">export </span><span class="nv">OS_ARCH</span><span class="o">=</span>amd64
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 这里需要替换为JDK的安装路径</span>
</span><span class='line'><span class="nv">JAVA_HOME</span><span class="o">=</span>/home/yiguang.wyg/tools/jdk1.8.0_121
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;$LD_LIBRARY_PATH&quot;</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  <span class="nb">export </span><span class="nv">LD_LIBRARY_PATH</span><span class="o">=</span><span class="nv">$JAVA_HOME</span>/jre/lib/<span class="nv">$OS_ARCH</span>/server:/usr/local/lib
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="nv">JARS</span><span class="o">=</span><span class="sb">`</span>find <span class="s2">&quot;$HADOOP_PREFIX/hadoop-hdfs-project&quot;</span> -name <span class="s2">&quot;*.jar&quot;</span> <span class="p">|</span> xargs<span class="sb">`</span>
</span><span class='line'><span class="k">for</span> jar in <span class="nv">$JARS</span><span class="p">;</span> <span class="k">do</span>
</span><span class='line'>  <span class="nv">CLASSPATH</span><span class="o">=</span><span class="nv">$jar</span>:<span class="nv">$CLASSPATH</span>
</span><span class='line'><span class="k">done</span>
</span><span class='line'>
</span><span class='line'><span class="nv">JARS</span><span class="o">=</span><span class="sb">`</span>find <span class="s2">&quot;$HADOOP_PREFIX/hadoop-client&quot;</span> -name <span class="s2">&quot;*.jar&quot;</span> <span class="p">|</span> xargs<span class="sb">`</span>
</span><span class='line'><span class="k">for</span> jar in <span class="nv">$JARS</span><span class="p">;</span> <span class="k">do</span>
</span><span class='line'>  <span class="nv">CLASSPATH</span><span class="o">=</span><span class="nv">$jar</span>:<span class="nv">$CLASSPATH</span>
</span><span class='line'><span class="k">done</span>
</span><span class='line'>
</span><span class='line'><span class="nb">export </span><span class="nv">CLASSPATH</span><span class="o">=</span><span class="nv">$HADOOP_CONF_DIR</span>:<span class="nv">$CLASSPATH</span>
</span><span class='line'><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="nv">$FUSEDFS_PATH</span>:<span class="nv">$PATH</span>
</span><span class='line'><span class="nb">export </span><span class="nv">LD_LIBRARY_PATH</span><span class="o">=</span><span class="nv">$LIBHDFS_PATH</span>:<span class="nv">$JAVA_HOME</span>/jre/lib/<span class="nv">$OS_ARCH</span>/server:<span class="nv">$LD_LIBRARY_PATH</span>
</span><span class='line'>
</span><span class='line'>fuse_dfs <span class="s2">&quot;$@&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>重点需要配置好HADOOP_HOME和HADOOP_PREFIX，分别为hadoop安装路径和hadoop源码路径。</p>

<h2>挂载HDFS</h2>

<p>挂载HDFS之前需要确保HDFS已经启动。</p>

<p>创建挂载目录</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo mkdir /mnt/hdfs
</span></code></pre></td></tr></table></div></figure>


<p>执行：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo sh fuse_dfs_wrapper.sh hdfs://&lt;hdfs路径&gt; /mnt/hdfs
</span></code></pre></td></tr></table></div></figure>


<p>输出：</p>

<blockquote><p>INFO /&hellip;/hadoop-2.8.0-src/hadoop-hdfs-project/hadoop-hdfs-native-client/src/main/native/fuse-dfs/fuse_options.c:164 Adding FUSE arg /mnt/hdfs</p></blockquote>

<p>进入挂载目录，如果能访问到HDFS中的内容，说明挂载成功。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> /mnt/hdfs
</span><span class='line'>ls
</span></code></pre></td></tr></table></div></figure>


<p>挂载成功后，就可以将HDFS当做本地路径使用了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux NFS配置及使用方法]]></title>
    <link href="http://lionheartwang.github.io/blog/2017/10/24/linux-nfs-configuration/"/>
    <updated>2017-10-24T00:27:55+08:00</updated>
    <id>http://lionheartwang.github.io/blog/2017/10/24/linux-nfs-configuration</id>
    <content type="html"><![CDATA[<p>NFS是Network  File System（网络文件系统）。主要功能是通过网络让不同的服务器之间可以共享文件或者目录。</p>

<p>本文以CentOS系统为例介绍Linux下NFS的配置和使用方法。</p>

<p>NFS在文件传送过程中依赖与RPC（远程过程调用）协议，配置步骤介绍如下。</p>

<!-- more -->


<h2>安装软件包</h2>

<p>安装nfs软件包，server和client机器都需要安装</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo yum -y install nfs-utils nfs-utils-lib
</span></code></pre></td></tr></table></div></figure>


<h2>配置NFS Server</h2>

<p>假设用来共享目录的NFS Server机器是192.168.0.1，需要登录该机器配置挂载目录。</p>

<p>登录后编辑/etc/exports文件内容，输入需要挂载的机器IP，以及服务端共享的路径。</p>

<p>假设需要访问NFS共享目录的机器为192.168.0.2 ~ 192.168.0.6，配置/etc/exports如下所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/path/to/mount 192.168.0.2<span class="o">(</span>rw,sync,no_root_squash<span class="o">)</span>
</span><span class='line'>/path/to/mount 192.168.0.3<span class="o">(</span>rw,sync,no_root_squash<span class="o">)</span>
</span><span class='line'>/path/to/mount 192.168.0.4<span class="o">(</span>rw,sync,no_root_squash<span class="o">)</span>
</span><span class='line'>/path/to/mount 192.168.0.5<span class="o">(</span>rw,sync,no_root_squash<span class="o">)</span>
</span><span class='line'>/path/to/mount 192.168.0.6<span class="o">(</span>rw,sync,no_root_squash<span class="o">)</span>
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>其中/path/to/mount根据需要配置为欲挂载的路径即可。</p>

<h2>启动NFS Server</h2>

<p>在192.168.0.1上执行如下命令启动NFS Server</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo service rpcbind restart
</span><span class='line'>sudo service nfs restart
</span></code></pre></td></tr></table></div></figure>


<p>执行如下命令，则会显示挂载的机器IP列表：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>showmount -e 192.168.0.1
</span></code></pre></td></tr></table></div></figure>


<h2>配置NFS Client</h2>

<p>分别登陆每台需要挂载的client机器，运行如下命令进行共享文件夹挂载。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo mkdir /target/to/mount
</span><span class='line'>sudo mount -t nfs 192.168.0.1:/path/to/mount /target/to/mount
</span></code></pre></td></tr></table></div></figure>


<p>其中：</p>

<ul>
<li>/path/to/mount为之前配置的NFS Server上挂载的路径。</li>
<li>/target/to/mount为本地机器欲挂载到的目标路径。</li>
</ul>


<p>挂载完成后，在192.168.0.2 ~ 192.168.0.6上就可以向访问本地路径一样访问192.168.0.1的/path/to/mount目录了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker常用命令介绍]]></title>
    <link href="http://lionheartwang.github.io/blog/2017/06/18/dockerchang-yong-ming-ling-jie-shao/"/>
    <updated>2017-06-18T22:52:05+08:00</updated>
    <id>http://lionheartwang.github.io/blog/2017/06/18/dockerchang-yong-ming-ling-jie-shao</id>
    <content type="html"><![CDATA[<p>本文介绍常用的docker命令。</p>

<!--more-->


<h2>镜像相关</h2>

<p>查看本地具有的镜像</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo docker images</span></code></pre></td></tr></table></div></figure>


<p>登录远程镜像仓库</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>docker login &lt;镜像仓库地址&gt;</span></code></pre></td></tr></table></div></figure>


<p>例如：</p>

<blockquote><p>docker login test.lionheart.com</p></blockquote>

<p>命名镜像</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker tag &lt;镜像id&gt; &lt;镜像仓库地址&gt;/&lt;镜像空间名&gt;/&lt;镜像名&gt;:&lt;镜像tag&gt;
</span></code></pre></td></tr></table></div></figure>


<p>命名镜像后可推送镜像到远端仓库：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker push &lt;镜像仓库地址&gt;/&lt;镜像空间名&gt;/&lt;镜像名&gt;:&lt;镜像tag&gt;
</span></code></pre></td></tr></table></div></figure>


<p>例如：</p>

<blockquote><p>docker tag 12ab34cd56ef test.lionheart.com/wangyiguang/dockertest:1.0</p>

<p>docker push test.lionheart.com/wangyiguang/dockertest:1.0</p></blockquote>

<h2>容器相关</h2>

<p>启动container：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo docker run -tid --name &lt;镜像名&gt; --net<span class="o">=</span>host -l <span class="s2">&quot;&lt;资源配置&gt;&quot;</span> &lt;镜像id&gt; /bin/bash
</span></code></pre></td></tr></table></div></figure>


<p>示例：</p>

<blockquote><p>sudo docker run -tid &ndash;name lionhearttest &ndash;net=host  \</p>

<p>-l &ldquo;GpuCount=1&rdquo; -l &ldquo;PerGpuCache=100000&rdquo; 12ab34cd56ef /bin/bash</p></blockquote>

<p>查看所有container：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo docker ps -a
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker tag image_id <span class="nv">$image_center_addr</span>/<span class="nv">$image_namespace</span>/<span class="nv">$IMAGE_NAME</span>:<span class="nv">$TAG</span>
</span></code></pre></td></tr></table></div></figure>


<p>以当前容器创建镜像：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo docker commit &lt;容器id&gt; &lt;镜像名&gt;
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用InteliJ远程调试程序]]></title>
    <link href="http://lionheartwang.github.io/blog/2017/04/17/remote-debug-via-intelij/"/>
    <updated>2017-04-17T18:50:33+08:00</updated>
    <id>http://lionheartwang.github.io/blog/2017/04/17/remote-debug-via-intelij</id>
    <content type="html"><![CDATA[<p>本文介绍如何使用InteliJ远程调试Java/Scala程序。</p>

<!--more-->


<h2>以调试模式启动程序</h2>

<p>JVM添加如下启动参数：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">JAVA_DEBUG_OPTS</span><span class="o">=</span><span class="s2">&quot;-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=&lt;debugPort&gt;&quot;</span>
</span><span class='line'>java <span class="nv">$JAVA_DEBUG_OPTS</span> &lt;className&gt;
</span></code></pre></td></tr></table></div></figure>


<p>其中：</p>

<ul>
<li>debugPort为调试服务端口，供InteliJ调试器连接，后面会用到。</li>
<li>className为待执行的程序类。</li>
</ul>


<p>启动后会提示如下信息：</p>

<blockquote><p>Listening for transport dt_socket at address: xxxx</p></blockquote>

<h2>调试器远程连接</h2>

<p>在InteliJ菜单选择<code>Run</code> -> <code>Edit Configuration</code>，进入运行配置界面。</p>

<p>选择<code>+</code>添加一项新的配置，内容如下图所示：</p>

<p><img src="http://lionheartwang.github.io/images/blog/04-remoteDebug01.png"></p>

<p>填好配置名称，IP、端口即可。IP、端口要和之前远程启动的程序一致。</p>

<p>然后就可以在源码中设置断点，在InteliJ中进行调试了。</p>

<p><img src="http://lionheartwang.github.io/images/blog/05-remoteDebug02.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac安装Thrift方法]]></title>
    <link href="http://lionheartwang.github.io/blog/2017/03/14/intall-thrift-on-mac/"/>
    <updated>2017-03-14T17:25:31+08:00</updated>
    <id>http://lionheartwang.github.io/blog/2017/03/14/intall-thrift-on-mac</id>
    <content type="html"><![CDATA[<p>新版mac使用brew默认安装的是最新版本的thrift 0.10.1</p>

<p>但现有项目主要依赖0.9.x，因此需要在mac上手动安装thrift。</p>

<p>本文介绍如何在新版本Mac上安装thrift 0.9.3.</p>

<!--more-->


<h2>安装依赖</h2>

<p>确保安装了如下依赖：</p>

<ul>
<li>openssl</li>
<li>libevent</li>
<li>bison 版本> 2.5</li>
</ul>


<p>注意：</p>

<p>mac高版本安装openssl之后可能提示openssl为keg-only的版本</p>

<p>需要记下其安装目录，默认为/usr/local/opt/openssl.</p>

<h2>下载thrift</h2>

<p>以0.9.3为例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$wget</span> http://archive.apache.org/dist/thrift/0.9.3/thrift-0.9.3.tar.gz
</span></code></pre></td></tr></table></div></figure>


<p>下载后解压：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$tar</span> zxvf thrift-0.9.3.tar.gz
</span></code></pre></td></tr></table></div></figure>


<h2>编译安装thrift</h2>

<p>运行configure进行配置，注意这里指定了前面记下的openssl的路径：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$.</span>/configure --with-openssl<span class="o">=</span>/usr/local/opt/openssl --without-perl --without-php
</span></code></pre></td></tr></table></div></figure>


<p>编译：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$.</span>/make
</span></code></pre></td></tr></table></div></figure>


<p>安装：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$.</span>/make install
</span></code></pre></td></tr></table></div></figure>


<p>安装后运行：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$thrift</span> --version
</span></code></pre></td></tr></table></div></figure>


<p>输出：Thrift version 0.9.3</p>

<p>表明<font color=green><b>安装成功</b></font>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ZooKeeper安装使用指南]]></title>
    <link href="http://lionheartwang.github.io/blog/2017/01/20/zookeeperan-zhuang-shi-yong-zhi-nan/"/>
    <updated>2017-01-20T15:56:22+08:00</updated>
    <id>http://lionheartwang.github.io/blog/2017/01/20/zookeeperan-zhuang-shi-yong-zhi-nan</id>
    <content type="html"><![CDATA[<p>ZooKeeper是一个分布式的，开放源码的分布式应用程序协调服务。</p>

<p>作为分布式应用提供一致性服务的软件，ZooKeeper 封装了易错的关键服务，提供简单高效、功能稳定接口给用户</p>

<p>本文介绍 ZooKeeper 的配置方法和客户端使用方法。</p>

<!--more-->


<h2>ZooKeeper 安装</h2>

<p>以ZooKeeper 3.4.8为例，下载 <a href="http://mirrors.hust.edu.cn/apache/zookeeper/zookeeper-3.4.8/">ZooKeeper 3.4.8</a>
下载解压后配置conf/zoo.cfg，配置clientPort，dataDir等。
示例配置：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># The number of milliseconds of each tick</span>
</span><span class='line'><span class="nv">tickTime</span><span class="o">=</span>2000
</span><span class='line'><span class="c"># The number of ticks that the initial synchronization phase can take</span>
</span><span class='line'><span class="nv">initLimit</span><span class="o">=</span>10
</span><span class='line'><span class="c"># The number of ticks that can pass between sending a request and getting an acknowledgement</span>
</span><span class='line'><span class="nv">syncLimit</span><span class="o">=</span>5
</span><span class='line'><span class="c"># the directory where the snapshot is stored. do not use /tmp for storage, /tmp here is just example sakes.</span>
</span><span class='line'><span class="nv">dataDir</span><span class="o">=</span>/tmp/zookeeper
</span><span class='line'><span class="c"># the port at which the clients will connect</span>
</span><span class='line'><span class="nv">clientPort</span><span class="o">=</span>2181
</span></code></pre></td></tr></table></div></figure>


<h2>ZooKeeper 使用</h2>

<p>配置好Zk后需要先启动ZkServer，然后可以用Zk Client直接以命令行的方式操作Zk。</p>

<h3>Server端</h3>

<p>配置好后启动zk：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$sh</span> bin/zkServer.sh start &gt; zookeeper.out
</span></code></pre></td></tr></table></div></figure>


<h3>Client端</h3>

<p>ZooKeeper客户端的使用非常简单，启动：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># ip和端口根据启动情况修改</span>
</span><span class='line'><span class="nv">$sh</span> bin/zkCli.sh -server 127.0.0.1:2181
</span></code></pre></td></tr></table></div></figure>


<p>之后可以用ls、delete、get等命令查询或修改各ZK节点的值。命令帮助如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ZooKeeper -server host:port cmd args
</span><span class='line'>  connect host:port
</span><span class='line'>  get path <span class="o">[</span>watch<span class="o">]</span>
</span><span class='line'>  ls path <span class="o">[</span>watch<span class="o">]</span>
</span><span class='line'>  <span class="nb">set </span>path data <span class="o">[</span>version<span class="o">]</span>
</span><span class='line'>  rmr path
</span><span class='line'>  delquota <span class="o">[</span>-n<span class="p">|</span>-b<span class="o">]</span> path
</span><span class='line'>  quit
</span><span class='line'>  printwatches on<span class="p">|</span>off
</span><span class='line'>  create <span class="o">[</span>-s<span class="o">]</span> <span class="o">[</span>-e<span class="o">]</span> path data acl
</span><span class='line'>  stat path <span class="o">[</span>watch<span class="o">]</span>
</span><span class='line'>  close
</span><span class='line'>  ls2 path <span class="o">[</span>watch<span class="o">]</span>
</span><span class='line'>  <span class="nb">history</span>
</span><span class='line'><span class="nb"> </span>listquota path
</span><span class='line'>  setAcl path acl
</span><span class='line'>  getAcl path
</span><span class='line'>  sync path
</span><span class='line'>  redo cmdno
</span><span class='line'>  addauth scheme auth
</span><span class='line'>  delete path <span class="o">[</span>version<span class="o">]</span>
</span><span class='line'>  setquota -n<span class="p">|</span>-b val path
</span></code></pre></td></tr></table></div></figure>


<h2>ZooKeeper API</h2>

<p>除了通过客户端操作ZooKeeper，还可以调用ZooKeeper提供的API操作ZooKeeper的节点。</p>

<p>这里以ZooKeeper 3.4.5为例，介绍常用的几个Java API。</p>

<h3>建立连接</h3>

<p>在应用程序中使用Zk需要先创建ZooKeeper对象，后续的操作都是基于该对象进行的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="nf">ZooKeeper</span><span class="o">(</span><span class="n">String</span> <span class="n">connectString</span><span class="o">,</span> <span class="kt">int</span> <span class="n">sessionTimeout</span><span class="o">,</span> <span class="n">Watcher</span> <span class="n">watcher</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span>
</span></code></pre></td></tr></table></div></figure>


<p>参数说明：</p>

<ul>
<li>connectString： zookeeper server列表, 以逗号隔开。ZooKeeper对象初始化后, 将从列表中选择一个server, 并尝试建立连接。如果失败,则会从剩余项中选择并再次尝试建立连接。</li>
<li>sessionTimeout：指定连接的超时时间.</li>
<li>watcher： 事件回调接口。</li>
</ul>


<h3>创建/删除znode</h3>

<p>ZooKeeper对象的create/delete方法用于创建/删除 znode。如果该node存在, 则返回该node的状态信息, 否则返回null。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">String</span> <span class="nf">create</span><span class="o">(</span><span class="n">String</span> <span class="n">path</span><span class="o">,</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">data</span><span class="o">,</span> <span class="n">List</span> <span class="n">acl</span><span class="o">,</span> <span class="n">CreateMode</span> <span class="n">createMode</span><span class="o">);</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">delete</span><span class="o">(</span><span class="kd">final</span> <span class="n">String</span> <span class="n">path</span><span class="o">,</span> <span class="kt">int</span> <span class="n">version</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>参数说明：</p>

<ul>
<li>path： znode的路径。</li>
<li>data：与znode关联的数据。</li>
<li>acl：指定权限信息</li>
<li>createMode：指定znode类型，按持久化节点与临时节点，以及自动编号节点与非自动编号节点两个维度划分，共4类。</li>
<li>version：指定要更新的数据的版本, 如果version和真实的版本不同, 更新操作将失败.。指定version为-1则忽略版本检查。</li>
</ul>


<h3>获取子znode列表</h3>

<p>ZooKeeper对象的getChildren方法用于获取子node列表。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">List</span> <span class="nf">getChildren</span><span class="o">(</span><span class="n">String</span> <span class="n">path</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">watch</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>参数说明：</p>

<ul>
<li>path： znode的路径。</li>
<li>watch参数用于指定是否监听path node的创建, 删除事件, 以及数据更新事件。</li>
</ul>


<h3>判断znode是否存在</h3>

<p>ZooKeeper对象的exists方法用于判断指定znode是否存在。如果该node存在, 则返回该node的状态信息, 否则返回null。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">Stat</span> <span class="nf">exists</span><span class="o">(</span><span class="n">String</span> <span class="n">path</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">watch</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>参数说明：</p>

<ul>
<li>path： znode的路径。</li>
<li>watch：用于指定是否监听path node的创建, 删除事件, 以及数据更新事件。</li>
</ul>


<h3>获取/更新znode数据</h3>

<p>ZooKeeper对象的getData/setData方法用于获取/更新 znode关联的数据。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">byte</span><span class="o">[]</span> <span class="nf">getData</span><span class="o">(</span><span class="n">String</span> <span class="n">path</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">watch</span><span class="o">,</span> <span class="n">Stat</span> <span class="n">stat</span><span class="o">);</span>
</span><span class='line'><span class="kd">public</span> <span class="n">Stat</span> <span class="nf">setData</span><span class="o">(</span><span class="kd">final</span> <span class="n">String</span> <span class="n">path</span><span class="o">,</span> <span class="kt">byte</span> <span class="n">data</span><span class="o">[],</span> <span class="kt">int</span> <span class="n">version</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>参数说明：</p>

<ul>
<li>path： znode的路径。</li>
<li>stat：传出参数, getData方法会将path node的状态信息设置到该参数中。</li>
<li>data：与znode关联的数据。</li>
<li>watch：用于指定是否监听path node的创建, 删除事件, 以及数据更新事件。</li>
<li>version：指定要更新的数据的版本, 如果version和真实的版本不同, 更新操作将失败.。指定version为-1则忽略版本检查。</li>
</ul>


<p>更全的API介绍参考 ZooKeeper 3.4.5 API</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spark Core 消息队列机制]]></title>
    <link href="http://lionheartwang.github.io/blog/2016/11/28/spark-core-message-queue-mechanism/"/>
    <updated>2016-11-28T14:31:03+08:00</updated>
    <id>http://lionheartwang.github.io/blog/2016/11/28/spark-core-message-queue-mechanism</id>
    <content type="html"><![CDATA[<p>本文介绍Spark中的消息队列机制，首先SparkListenerEvent，SparkListener和SparkListenerBus等基本数据结构实现。</p>

<p>重点介绍了异步消息总线LiveListenerBus的实现。随后介绍了Spark消息队列的整体工作流程。</p>

<!--more-->


<h2>SparkListenerEvent</h2>

<p>Spark中的消息由SparkListenerEvent表示。其本身定义只是一个接口：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">trait</span> <span class="nc">SparkListenerEvent</span> <span class="o">{</span>
</span><span class='line'>  <span class="cm">/* Whether output this event to the event log */</span>
</span><span class='line'>  <span class="k">protected</span><span class="o">[</span><span class="kt">spark</span><span class="o">]</span> <span class="k">def</span> <span class="n">logEvent</span><span class="k">:</span> <span class="kt">Boolean</span> <span class="o">=</span> <span class="kc">true</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>SparkListenerEvent有多个具体的实现，每种实现代表了Spark运行过程中的一种事件。</p>

<ul>
<li>SparkListenerStageSubmitted</li>
<li>SparkListenerStageCompleted</li>
<li>SparkListenerTaskStart</li>
<li>SparkListenerTaskGettingResult</li>
<li>SparkListenerTaskEnd</li>
<li>SparkListenerJobStart</li>
<li>SparkListenerJobEnd</li>
<li>SparkListenerEnvironmentUpdate</li>
<li>SparkListenerBlockManagerAdded</li>
<li>SparkListenerBlockManagerRemoved</li>
<li>SparkListenerUnpersistRDD</li>
<li>SparkListenerExecutorAdded</li>
<li>SparkListenerExecutorRemoved</li>
<li>SparkListenerBlockUpdated</li>
<li>SparkListenerExecutorMetricsUpdate</li>
<li>SparkListenerApplicationStart</li>
<li>SparkListenerApplicationEnd</li>
<li>SparkListenerLogStart</li>
</ul>


<p>根据名称可以知道每一种事件代表的含义。</p>

<h2>SparkListener</h2>

<p>SparkListeners负责监听SparkListenerEvents。</p>

<p>所有Spark消息SparkListenerEvents 被异步的发送给已经注册过的SparkListeners。</p>

<p>SparkListenerInterface定义了SparkListener的接口：</p>

<ul>
<li>onStageCompleted</li>
<li>onStageSubmitted</li>
<li>onTaskStart</li>
<li>onTaskGettingResult</li>
<li>onTaskEnd</li>
<li>onJobStart</li>
<li>onJobEnd</li>
<li>onEnvironmentUpdate</li>
<li>onBlockManagerAdded</li>
<li>onBlockManagerRemoved</li>
<li>onUnpersistRDD</li>
<li>onApplicationStart</li>
<li>onApplicationEnd</li>
<li>onExecutorMetricsUpdate</li>
<li>onExecutorAdded</li>
<li>onExecutorRemoved</li>
<li>onBlockUpdated</li>
<li>onOtherEvent</li>
</ul>


<p>根据名称可以知道每一个方法是对应事件消息的响应函数。SparkListener的实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">abstract</span> <span class="k">class</span> <span class="nc">SparkListener</span> <span class="k">extends</span> <span class="nc">SparkListenerInterface</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">onStageCompleted</span><span class="o">(</span><span class="n">stageCompleted</span><span class="k">:</span> <span class="kt">SparkListenerStageCompleted</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span> <span class="o">}</span>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">onStageSubmitted</span><span class="o">(</span><span class="n">stageSubmitted</span><span class="k">:</span> <span class="kt">SparkListenerStageSubmitted</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span> <span class="o">}</span>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">onTaskStart</span><span class="o">(</span><span class="n">taskStart</span><span class="k">:</span> <span class="kt">SparkListenerTaskStart</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span> <span class="o">}</span>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">onTaskGettingResult</span><span class="o">(</span><span class="n">taskGettingResult</span><span class="k">:</span> <span class="kt">SparkListenerTaskGettingResult</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span> <span class="o">}</span>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">onTaskEnd</span><span class="o">(</span><span class="n">taskEnd</span><span class="k">:</span> <span class="kt">SparkListenerTaskEnd</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span> <span class="o">}</span>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">onJobStart</span><span class="o">(</span><span class="n">jobStart</span><span class="k">:</span> <span class="kt">SparkListenerJobStart</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span> <span class="o">}</span>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">onJobEnd</span><span class="o">(</span><span class="n">jobEnd</span><span class="k">:</span> <span class="kt">SparkListenerJobEnd</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span> <span class="o">}</span>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">onEnvironmentUpdate</span><span class="o">(</span><span class="n">environmentUpdate</span><span class="k">:</span> <span class="kt">SparkListenerEnvironmentUpdate</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span> <span class="o">}</span>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">onBlockManagerAdded</span><span class="o">(</span><span class="n">blockManagerAdded</span><span class="k">:</span> <span class="kt">SparkListenerBlockManagerAdded</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span> <span class="o">}</span>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">onBlockManagerRemoved</span><span class="o">(</span>
</span><span class='line'>      <span class="n">blockManagerRemoved</span><span class="k">:</span> <span class="kt">SparkListenerBlockManagerRemoved</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span> <span class="o">}</span>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">onUnpersistRDD</span><span class="o">(</span><span class="n">unpersistRDD</span><span class="k">:</span> <span class="kt">SparkListenerUnpersistRDD</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span> <span class="o">}</span>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">onApplicationStart</span><span class="o">(</span><span class="n">applicationStart</span><span class="k">:</span> <span class="kt">SparkListenerApplicationStart</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span> <span class="o">}</span>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">onApplicationEnd</span><span class="o">(</span><span class="n">applicationEnd</span><span class="k">:</span> <span class="kt">SparkListenerApplicationEnd</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span> <span class="o">}</span>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">onExecutorMetricsUpdate</span><span class="o">(</span>
</span><span class='line'>      <span class="n">executorMetricsUpdate</span><span class="k">:</span> <span class="kt">SparkListenerExecutorMetricsUpdate</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span> <span class="o">}</span>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">onExecutorAdded</span><span class="o">(</span><span class="n">executorAdded</span><span class="k">:</span> <span class="kt">SparkListenerExecutorAdded</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span> <span class="o">}</span>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">onExecutorRemoved</span><span class="o">(</span><span class="n">executorRemoved</span><span class="k">:</span> <span class="kt">SparkListenerExecutorRemoved</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span> <span class="o">}</span>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">onBlockUpdated</span><span class="o">(</span><span class="n">blockUpdated</span><span class="k">:</span> <span class="kt">SparkListenerBlockUpdated</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span> <span class="o">}</span>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">onOtherEvent</span><span class="o">(</span><span class="n">event</span><span class="k">:</span> <span class="kt">SparkListenerEvent</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span> <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Spark运行过程中会用到很多个SparkListener，每一种都有自己的用途。</p>

<p>例如EventLoggingListener用来将监听到的事件持久化到文件中，ExecutorAllocationListener用那个通知对应的ExecutorAllocationManager增加或移除executor等。</p>

<h2>SparkListenerBus</h2>

<p>SparkListener需要被注册到SparkListenerBus中才能起作用，SparkListenerBus负责分发监听到的Event给SparkListener。</p>

<p>SparkListenerBus继承自ListenerBus接口，并重载了doPostEvent方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">private</span><span class="o">[</span><span class="kt">spark</span><span class="o">]</span> <span class="k">trait</span> <span class="nc">SparkListenerBus</span>
</span><span class='line'>  <span class="k">extends</span> <span class="nc">ListenerBus</span><span class="o">[</span><span class="kt">SparkListenerInterface</span>, <span class="kt">SparkListenerEvent</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">protected</span> <span class="k">override</span> <span class="k">def</span> <span class="n">doPostEvent</span><span class="o">(</span>
</span><span class='line'>      <span class="n">listener</span><span class="k">:</span> <span class="kt">SparkListenerInterface</span><span class="o">,</span>
</span><span class='line'>      <span class="n">event</span><span class="k">:</span> <span class="kt">SparkListenerEvent</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">event</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">stageSubmitted</span><span class="k">:</span> <span class="kt">SparkListenerStageSubmitted</span> <span class="o">=&gt;</span>
</span><span class='line'>        <span class="n">listener</span><span class="o">.</span><span class="n">onStageSubmitted</span><span class="o">(</span><span class="n">stageSubmitted</span><span class="o">)</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">stageCompleted</span><span class="k">:</span> <span class="kt">SparkListenerStageCompleted</span> <span class="o">=&gt;</span>
</span><span class='line'>        <span class="n">listener</span><span class="o">.</span><span class="n">onStageCompleted</span><span class="o">(</span><span class="n">stageCompleted</span><span class="o">)</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">jobStart</span><span class="k">:</span> <span class="kt">SparkListenerJobStart</span> <span class="o">=&gt;</span>
</span><span class='line'>        <span class="n">listener</span><span class="o">.</span><span class="n">onJobStart</span><span class="o">(</span><span class="n">jobStart</span><span class="o">)</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">jobEnd</span><span class="k">:</span> <span class="kt">SparkListenerJobEnd</span> <span class="o">=&gt;</span>
</span><span class='line'>        <span class="n">listener</span><span class="o">.</span><span class="n">onJobEnd</span><span class="o">(</span><span class="n">jobEnd</span><span class="o">)</span>
</span><span class='line'>      <span class="o">...</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">blockUpdated</span><span class="k">:</span> <span class="kt">SparkListenerBlockUpdated</span> <span class="o">=&gt;</span>
</span><span class='line'>        <span class="n">listener</span><span class="o">.</span><span class="n">onBlockUpdated</span><span class="o">(</span><span class="n">blockUpdated</span><span class="o">)</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">logStart</span><span class="k">:</span> <span class="kt">SparkListenerLogStart</span> <span class="o">=&gt;</span> <span class="c1">// ignore event log metadata</span>
</span><span class='line'>      <span class="k">case</span> <span class="k">_</span> <span class="k">=&gt;</span> <span class="n">listener</span><span class="o">.</span><span class="n">onOtherEvent</span><span class="o">(</span><span class="n">event</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>该接口实现了消息的路由，根据事件类型调用相应的处理函数。</p>

<h3>ListenerBus</h3>

<p>ListenerBus接口的实现如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">private</span><span class="o">[</span><span class="kt">spark</span><span class="o">]</span> <span class="k">trait</span> <span class="nc">ListenerBus</span><span class="o">[</span><span class="kt">L</span> <span class="k">&lt;:</span> <span class="kt">AnyRef</span>, <span class="kt">E</span><span class="o">]</span> <span class="nc">extends</span> <span class="nc">Logging</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Marked `private[spark]` for access in tests.</span>
</span><span class='line'>  <span class="k">private</span><span class="o">[</span><span class="kt">spark</span><span class="o">]</span> <span class="k">val</span> <span class="n">listeners</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">CopyOnWriteArrayList</span><span class="o">[</span><span class="kt">L</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">final</span> <span class="k">def</span> <span class="n">addListener</span><span class="o">(</span><span class="n">listener</span><span class="k">:</span> <span class="kt">L</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">listeners</span><span class="o">.</span><span class="n">add</span><span class="o">(</span><span class="n">listener</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">final</span> <span class="k">def</span> <span class="n">removeListener</span><span class="o">(</span><span class="n">listener</span><span class="k">:</span> <span class="kt">L</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">listeners</span><span class="o">.</span><span class="n">remove</span><span class="o">(</span><span class="n">listener</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Post the event to all registered listeners. The `postToAll` caller should guarantee calling</span>
</span><span class='line'><span class="cm">   * `postToAll` in the same thread for all events.</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="k">final</span> <span class="k">def</span> <span class="n">postToAll</span><span class="o">(</span><span class="n">event</span><span class="k">:</span> <span class="kt">E</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// JavaConverters can create a JIterableWrapper if we use asScala.</span>
</span><span class='line'>    <span class="c1">// However, this method will be called frequently. To avoid the wrapper cost, here we use</span>
</span><span class='line'>    <span class="c1">// Java Iterator directly.</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">iter</span> <span class="k">=</span> <span class="n">listeners</span><span class="o">.</span><span class="n">iterator</span>
</span><span class='line'>    <span class="k">while</span> <span class="o">(</span><span class="n">iter</span><span class="o">.</span><span class="n">hasNext</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">listener</span> <span class="k">=</span> <span class="n">iter</span><span class="o">.</span><span class="n">next</span><span class="o">()</span>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">doPostEvent</span><span class="o">(</span><span class="n">listener</span><span class="o">,</span> <span class="n">event</span><span class="o">)</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="nc">NonFatal</span><span class="o">(</span><span class="n">e</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>          <span class="n">logError</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;Listener ${Utils.getFormattedClassName(listener)} threw an exception&quot;</span><span class="o">,</span> <span class="n">e</span><span class="o">)</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Post an event to the specified listener. `onPostEvent` is guaranteed to be called in the same</span>
</span><span class='line'><span class="cm">   * thread for all listeners.</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="k">protected</span> <span class="k">def</span> <span class="n">doPostEvent</span><span class="o">(</span><span class="n">listener</span><span class="k">:</span> <span class="kt">L</span><span class="o">,</span> <span class="n">event</span><span class="k">:</span> <span class="kt">E</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">private</span><span class="o">[</span><span class="kt">spark</span><span class="o">]</span> <span class="k">def</span> <span class="n">findListenersByClass</span><span class="o">[</span><span class="kt">T</span> <span class="k">&lt;:</span> <span class="kt">L</span> <span class="kt">:</span> <span class="kt">ClassTag</span><span class="o">]()</span><span class="k">:</span> <span class="kt">Seq</span><span class="o">[</span><span class="kt">T</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">c</span> <span class="k">=</span> <span class="n">implicitly</span><span class="o">[</span><span class="kt">ClassTag</span><span class="o">[</span><span class="kt">T</span><span class="o">]].</span><span class="n">runtimeClass</span>
</span><span class='line'>    <span class="n">listeners</span><span class="o">.</span><span class="n">asScala</span><span class="o">.</span><span class="n">filter</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">getClass</span> <span class="o">==</span> <span class="n">c</span><span class="o">).</span><span class="n">map</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">asInstanceOf</span><span class="o">[</span><span class="kt">T</span><span class="o">]).</span><span class="n">toSeq</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>本质上所有注册的Listener用一个数组记录下来，post操作就是根据事件找到对应的listener然后把event交给listener处理。</p>

<h3>LiveListenerBus</h3>

<p>SparkContext中会创建一个LiveListenerBus实例，LiveListenerBus是SparkListenerBus的一个具体实现，主要功能如下:</p>

<ul>
<li>保存有消息队列,负责消息的缓存</li>
<li>保存有注册过的listener,负责消息的分发</li>
</ul>


<p>消息队列用LinkBlockQueue实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// Cap the capacity of the event queue so we get an explicit error (rather than</span>
</span><span class='line'><span class="c1">// an OOM exception) if it&#39;s perpetually being added to more quickly than it&#39;s being drained.</span>
</span><span class='line'><span class="k">private</span> <span class="k">lazy</span> <span class="k">val</span> <span class="nc">EVENT_QUEUE_CAPACITY</span> <span class="k">=</span> <span class="n">validateAndGetQueueSize</span><span class="o">()</span>
</span><span class='line'><span class="k">private</span> <span class="k">lazy</span> <span class="k">val</span> <span class="n">eventQueue</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">LinkedBlockingQueue</span><span class="o">[</span><span class="kt">SparkListenerEvent</span><span class="o">](</span><span class="nc">EVENT_QUEUE_CAPACITY</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>事件队列的长度EVENT_QUEUE_CAPACITY由spark.scheduler.listenerbus.eventqueue.size参数配置，默认为10000。</p>

<p>当缓存事件数量达到上限后,新来的事件会被丢弃。</p>

<p>消息的产生和分发按照 <b><font color=red>生产者-消费者模型</font></b> 实现。</p>

<p><b><font color=red>消息的分发(消费者)</font></b> 是通过一个listener线程异步处理的，代码如下。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">private</span> <span class="k">val</span> <span class="n">listenerThread</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Thread</span><span class="o">(</span><span class="n">name</span><span class="o">)</span> <span class="o">{</span>  <span class="c1">// &lt;-- 线程名为SparkListenerBus</span>
</span><span class='line'>  <span class="n">setDaemon</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">run</span><span class="o">()</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="nc">Utils</span><span class="o">.</span><span class="n">tryOrStopSparkContext</span><span class="o">(</span><span class="n">sparkContext</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="nc">LiveListenerBus</span><span class="o">.</span><span class="n">withinListenerThread</span><span class="o">.</span><span class="n">withValue</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">eventLock</span><span class="o">.</span><span class="n">acquire</span><span class="o">()</span>
</span><span class='line'>        <span class="n">self</span><span class="o">.</span><span class="n">synchronized</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">processingEvent</span> <span class="k">=</span> <span class="kc">true</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">val</span> <span class="n">event</span> <span class="k">=</span> <span class="n">eventQueue</span><span class="o">.</span><span class="n">poll</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">event</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Get out of the while loop and shutdown the daemon thread</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(!</span><span class="n">stopped</span><span class="o">.</span><span class="n">get</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="k">throw</span> <span class="k">new</span> <span class="nc">IllegalStateException</span><span class="o">(</span><span class="s">&quot;Polling `null` from eventQueue means&quot;</span> <span class="o">+</span>
</span><span class='line'>                <span class="s">&quot; the listener bus has been stopped. So `stopped` must be true&quot;</span><span class="o">)</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="k">return</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          <span class="n">postToAll</span><span class="o">(</span><span class="n">event</span><span class="o">)</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">self</span><span class="o">.</span><span class="n">synchronized</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">processingEvent</span> <span class="k">=</span> <span class="kc">false</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>为了保证生产者和消费者对消息队列的并发访问，在每次需要获取消息的时候,调用eventLock.acquire()来获取信号量, 信号量的值就是当前队列中所含有的事件数量。</p>

<p>如果正常获取到事件,就调用postToAll将事件分发给所有listener, 继续下一次循环。</p>

<p>如果获取到null值, 则有下面两种情况:</p>

<ul>
<li>整个application正常结束, 此时stopped值已经被设置为true。</li>
<li>系统发生了错误, 立即终止运行。</li>
</ul>


<p><font color=red><b>消息的产生(生产者)</font></b> 通过在Spark运行时调用LiveListenerBus的post方法来添加。实现如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">post</span><span class="o">(</span><span class="n">event</span><span class="k">:</span> <span class="kt">SparkListenerEvent</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">stopped</span><span class="o">.</span><span class="n">get</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Drop further events to make `listenerThread` exit ASAP</span>
</span><span class='line'>    <span class="n">logError</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;$name has already stopped! Dropping event $event&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="k">return</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">eventAdded</span> <span class="k">=</span> <span class="n">eventQueue</span><span class="o">.</span><span class="n">offer</span><span class="o">(</span><span class="n">event</span><span class="o">)</span>  <span class="c1">// &lt;-- 这里将新来的事件添加到消息队列中</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">eventAdded</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">eventLock</span><span class="o">.</span><span class="n">release</span><span class="o">()</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">onDropEvent</span><span class="o">(</span><span class="n">event</span><span class="o">)</span>  <span class="c1">// &lt;-- 没有添加成功，则丢弃事件</span>
</span><span class='line'>    <span class="n">droppedEventsCounter</span><span class="o">.</span><span class="n">incrementAndGet</span><span class="o">()</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">val</span> <span class="n">droppedEvents</span> <span class="k">=</span> <span class="n">droppedEventsCounter</span><span class="o">.</span><span class="n">get</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">droppedEvents</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Don&#39;t log too frequently</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="n">currentTimeMillis</span><span class="o">()</span> <span class="o">-</span> <span class="n">lastReportTimestamp</span> <span class="o">&gt;=</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">1000</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// There may be multiple threads trying to decrease droppedEventsCounter.</span>
</span><span class='line'>      <span class="c1">// Use &quot;compareAndSet&quot; to make sure only one thread can win.</span>
</span><span class='line'>      <span class="c1">// And if another thread is increasing droppedEventsCounter, &quot;compareAndSet&quot; will fail and</span>
</span><span class='line'>      <span class="c1">// then that thread will update it.</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">droppedEventsCounter</span><span class="o">.</span><span class="n">compareAndSet</span><span class="o">(</span><span class="n">droppedEvents</span><span class="o">,</span> <span class="mi">0</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">val</span> <span class="n">prevLastReportTimestamp</span> <span class="k">=</span> <span class="n">lastReportTimestamp</span>
</span><span class='line'>        <span class="n">lastReportTimestamp</span> <span class="k">=</span> <span class="nc">System</span><span class="o">.</span><span class="n">currentTimeMillis</span><span class="o">()</span>
</span><span class='line'>        <span class="n">logWarning</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;Dropped $droppedEvents SparkListenerEvents since &quot;</span> <span class="o">+</span>
</span><span class='line'>          <span class="k">new</span> <span class="n">java</span><span class="o">.</span><span class="n">util</span><span class="o">.</span><span class="nc">Date</span><span class="o">(</span><span class="n">prevLastReportTimestamp</span><span class="o">))</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>每成功放入一个事件,就调用eventLock.release()来增加信号量额值，以供消费者线程来进行消费. 如果队列满了,就调用onDropEvent来处理。</p>

<h2>消息队列建立/发送流程</h2>

<p>在SparkContext中创建了LiveListenerBus类类型的成员变量listenerBus。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// An asynchronous listener bus for Spark events</span>
</span><span class='line'><span class="k">private</span><span class="o">[</span><span class="kt">spark</span><span class="o">]</span> <span class="k">val</span> <span class="n">listenerBus</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">LiveListenerBus</span><span class="o">(</span><span class="k">this</span><span class="o">)</span>
</span><span class='line'><span class="n">随后创建各种listener</span><span class="err">，</span><span class="n">并注册到listenerBus中</span><span class="err">，</span><span class="n">通过调用listenerBus的start</span><span class="o">()</span><span class="n">方法启动消息分发流程</span><span class="err">。</span>
</span><span class='line'><span class="k">private</span> <span class="k">def</span> <span class="n">setupAndStartListenerBus</span><span class="o">()</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// Use reflection to instantiate listeners specified via `spark.extraListeners`</span>
</span><span class='line'>  <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">listenerClassNames</span><span class="k">:</span> <span class="kt">Seq</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>      <span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="o">(</span><span class="s">&quot;spark.extraListeners&quot;</span><span class="o">,</span> <span class="s">&quot;&quot;</span><span class="o">).</span><span class="n">split</span><span class="o">(</span><span class="sc">&#39;,&#39;</span><span class="o">).</span><span class="n">map</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">trim</span><span class="o">).</span><span class="n">filter</span><span class="o">(</span><span class="k">_</span> <span class="o">!=</span> <span class="s">&quot;&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="n">className</span> <span class="k">&lt;-</span> <span class="n">listenerClassNames</span><span class="o">)</span> <span class="o">{</span>  <span class="c1">// &lt;-- 如果指定了额外的SparkListenr类，可通过反射机制实例化并注册到listenerBus</span>
</span><span class='line'>      <span class="c1">// Use reflection to find the right constructor</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">constructors</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">val</span> <span class="n">listenerClass</span> <span class="k">=</span> <span class="nc">Utils</span><span class="o">.</span><span class="n">classForName</span><span class="o">(</span><span class="n">className</span><span class="o">)</span>
</span><span class='line'>        <span class="n">listenerClass</span>
</span><span class='line'>            <span class="o">.</span><span class="n">getConstructors</span>
</span><span class='line'>            <span class="o">.</span><span class="n">asInstanceOf</span><span class="o">[</span><span class="kt">Array</span><span class="o">[</span><span class="kt">Constructor</span><span class="o">[</span><span class="k">_</span> <span class="k">&lt;:</span> <span class="kt">SparkListenerInterface</span><span class="o">]]]</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">constructorTakingSparkConf</span> <span class="k">=</span> <span class="n">constructors</span><span class="o">.</span><span class="n">find</span> <span class="o">{</span> <span class="n">c</span> <span class="k">=&gt;</span>
</span><span class='line'>        <span class="n">c</span><span class="o">.</span><span class="n">getParameterTypes</span><span class="o">.</span><span class="n">sameElements</span><span class="o">(</span><span class="nc">Array</span><span class="o">(</span><span class="n">classOf</span><span class="o">[</span><span class="kt">SparkConf</span><span class="o">]))</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">lazy</span> <span class="k">val</span> <span class="n">zeroArgumentConstructor</span> <span class="k">=</span> <span class="n">constructors</span><span class="o">.</span><span class="n">find</span> <span class="o">{</span> <span class="n">c</span> <span class="k">=&gt;</span>
</span><span class='line'>        <span class="n">c</span><span class="o">.</span><span class="n">getParameterTypes</span><span class="o">.</span><span class="n">isEmpty</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">listener</span><span class="k">:</span> <span class="kt">SparkListenerInterface</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">constructorTakingSparkConf</span><span class="o">.</span><span class="n">isDefined</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">constructorTakingSparkConf</span><span class="o">.</span><span class="n">get</span><span class="o">.</span><span class="n">newInstance</span><span class="o">(</span><span class="n">conf</span><span class="o">)</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">zeroArgumentConstructor</span><span class="o">.</span><span class="n">isDefined</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">zeroArgumentConstructor</span><span class="o">.</span><span class="n">get</span><span class="o">.</span><span class="n">newInstance</span><span class="o">()</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>          <span class="o">...</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="n">listenerBus</span><span class="o">.</span><span class="n">addListener</span><span class="o">(</span><span class="n">listener</span><span class="o">)</span>
</span><span class='line'>      <span class="n">logInfo</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;Registered listener $className&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">catch</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">listenerBus</span><span class="o">.</span><span class="n">start</span><span class="o">()</span>
</span><span class='line'>  <span class="nc">_listenerBusStarted</span> <span class="k">=</span> <span class="kc">true</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中，listenerBus.start() 实现如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">start</span><span class="o">()</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">started</span><span class="o">.</span><span class="n">compareAndSet</span><span class="o">(</span><span class="kc">false</span><span class="o">,</span> <span class="kc">true</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">listenerThread</span><span class="o">.</span><span class="n">start</span><span class="o">()</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">throw</span> <span class="k">new</span> <span class="nc">IllegalStateException</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;$name already started!&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行过程中产生的事件会post到listenerBus中。</p>

<p>当作业运行结束后会调用listenerBus.stop()来停止SparkListenerBus线程。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">stop</span><span class="o">()</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(!</span><span class="n">started</span><span class="o">.</span><span class="n">get</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">throw</span> <span class="k">new</span> <span class="nc">IllegalStateException</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;Attempted to stop $name that has not yet started!&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">stopped</span><span class="o">.</span><span class="n">compareAndSet</span><span class="o">(</span><span class="kc">false</span><span class="o">,</span> <span class="kc">true</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Call eventLock.release() so that listenerThread will poll `null` from `eventQueue` and know</span>
</span><span class='line'>    <span class="c1">// `stop` is called.</span>
</span><span class='line'>    <span class="n">eventLock</span><span class="o">.</span><span class="n">release</span><span class="o">()</span>
</span><span class='line'>    <span class="n">listenerThread</span><span class="o">.</span><span class="n">join</span><span class="o">()</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Keep quiet</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里可以看到：</p>

<p><b><font color=red>在stop函数中调用了eventLock.release()来增加信号量的值. 然而并未向消息队列中加入新的消息。</p>

<p>这就导致在消费者线程listenerThread读取队列时会返回null值,进而达到结束listenerThread线程的目的。</font></b></p>

<p>以上就是Spark Core中消息队列机制的整体工作流程。</p>

<p><b>参考资料</b></p>

<ol>
<li>Spark 2.0 源码：<a href="https://github.com/apache/spark/tree/branch-2.0">https://github.com/apache/spark/tree/branch-2.0</a></li>
<li>Spark消息队列机制源码学习Blog：<a href="http://blog.csdn.net/sivolin/article/details/47316099">http://blog.csdn.net/sivolin/article/details/47316099</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spark日志配置方法]]></title>
    <link href="http://lionheartwang.github.io/blog/2016/10/19/sparkri-zhi-pei-zhi-fang-fa/"/>
    <updated>2016-10-19T19:13:38+08:00</updated>
    <id>http://lionheartwang.github.io/blog/2016/10/19/sparkri-zhi-pei-zhi-fang-fa</id>
    <content type="html"><![CDATA[<p>本文介绍Spark日志级别控制方法。</p>

<p>Apache Spark 默认使用 log4j 作为日志工具。
Baidu Spark 根据不同的发布版本，使用 log4j 或者 logback 作为日志工具。</p>

<!--more-->


<h2>Driver日志级别设置</h2>

<p>日志配置默认在Spark客户端conf目录下，log4j配置log4j.properties文件，logback配置logback.xml文件。</p>

<h3>log4j配置示例</h3>

<p>示例配置文件log4j.properties如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Set everything to be logged to the console</span>
</span><span class='line'>log4j.rootCategory<span class="o">=</span>INFO, DRFA
</span><span class='line'>log4j.appender.console<span class="o">=</span>org.apache.log4j.ConsoleAppender
</span><span class='line'>log4j.appender.console.target<span class="o">=</span>System.err
</span><span class='line'>log4j.appender.console.layout<span class="o">=</span>org.apache.log4j.PatternLayout
</span><span class='line'>log4j.appender.console.layout.ConversionPattern<span class="o">=</span>%d<span class="o">{</span>yy/MM/dd HH:mm:ss<span class="o">}</span> %p %c<span class="o">{</span>1<span class="o">}</span>: %m%n
</span><span class='line'>log4j.appender.DRFA<span class="o">=</span>org.apache.log4j.DailyRollingFileAppender
</span><span class='line'>log4j.appender.DRFA.File<span class="o">=</span>log/spark.log
</span><span class='line'>log4j.appender.DRFA.layout<span class="o">=</span>org.apache.log4j.PatternLayout
</span><span class='line'>log4j.appender.DRFA.layout.ConversionPattern<span class="o">=</span>%d<span class="o">{</span>yy/MM/dd HH:mm:ss<span class="o">}</span> <span class="o">[</span>%t<span class="o">]</span> %p %c<span class="o">{</span>1<span class="o">}</span>: %m%n
</span><span class='line'><span class="c"># Settings to quiet third party logs that are too verbose</span>
</span><span class='line'>log4j.logger.org.eclipse.jetty<span class="o">=</span>WARN
</span><span class='line'>log4j.logger.org.eclipse.jetty.util.component.AbstractLifeCycle<span class="o">=</span>ERROR
</span><span class='line'>log4j.logger.org.apache.spark.repl.SparkIMain<span class="nv">$exprTyper</span><span class="o">=</span>INFO
</span><span class='line'>log4j.logger.org.apache.spark.repl.SparkILoop<span class="nv">$SparkILoopInterpreter</span><span class="o">=</span>INFO
</span><span class='line'>log4j.logger.org.apache.hadoop.fs.DfsInputStream<span class="o">=</span>INFO
</span><span class='line'>log4j.logger.org.apache.hadoop.hive.ql.io.orc.RecordReaderImpl<span class="o">=</span>INFO
</span><span class='line'>log4j.logger.org.apache.hadoop.hive.ql.io.*<span class="o">=</span>DEBUG
</span></code></pre></td></tr></table></div></figure>


<p>其中：</p>

<ul>
<li>log4j.rootCategory配置总体的默认日志级别。</li>
<li>log4j.appender.DRFA.File用来配置日志重定向的目标文件。</li>
<li>log4j.appender.DRFA.layout.ConversionPattern用来配置日志的输出格式。</li>
<li>log4j.logger.xxx.xxx.xxx用来配置指定类的日志级别，xxx.xxx.xxx代表类路径。</li>
</ul>


<h3>logback配置示例</h3>

<p>示例配置文件logback.xml如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot;?&gt;</span>
</span><span class='line'><span class="cp">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>  <span class="nt">&lt;appender</span> <span class="na">name=</span><span class="s">&quot;RFILE&quot;</span> <span class="na">class=</span><span class="s">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;file&gt;</span>log/spark.log<span class="nt">&lt;/file&gt;</span>
</span><span class='line'>    <span class="nt">&lt;rollingPolicy</span> <span class="na">class=</span><span class="s">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;fileNamePattern&gt;</span>log/spark.%d{yyyy-MM-dd}.log<span class="nt">&lt;/fileNamePattern&gt;</span>
</span><span class='line'>      <span class="nt">&lt;maxHistory&gt;</span>30<span class="nt">&lt;/maxHistory&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/rollingPolicy&gt;</span>
</span><span class='line'>    <span class="nt">&lt;encoder&gt;</span>
</span><span class='line'>      <span class="nt">&lt;pattern&gt;</span> %date %level [%logger] - %msg%n<span class="nt">&lt;/pattern&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/encoder&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/appender&gt;</span>
</span><span class='line'>  <span class="nt">&lt;logger</span> <span class="na">name=</span><span class="s">&quot;org.apache.hadoop.hive.ql.io.*&quot;</span>  <span class="na">level=</span><span class="s">&quot;INFO&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;root</span> <span class="na">level=</span><span class="s">&quot;info&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;appender-ref</span> <span class="na">ref=</span><span class="s">&quot;RFILE&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/root&gt;</span>
</span><span class='line'><span class="nt">&lt;/configuration&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中：</p>

<ul>
<li><root>用来配置总体的默认日志级别。</li>
<li><file>用来配置日志重定向的目标文件。</li>
<li><pattern>用来配置日志的输出格式。</li>
<li><logger>用来配置指定类的日志级别。</li>
</ul>


<h2>Executor日志级别设置</h2>

<p>executor日志级别配置同driver端类似，但需要将executor的日志配置文件上传，并通过executor的Java参数指定使用的配置文件名。</p>

<h3>log4j配置示例</h3>

<p>配置好executor的log4j配置文件，命名随意，假设为executor-log4j.properties，放在conf目录下。</p>

<p>配置spark-conf.defaults文件，在 spark.executor.extraJavaOptions 中增加:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>spark.executor.extraJavaOptions -Dlog4j.configuration<span class="o">=</span>executor-log4j.properties
</span></code></pre></td></tr></table></div></figure>


<p>启动Spark作业时增加–files参数。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$spark</span>-submit --files /path/to/conf/executor-log4j.properties xxx
</span><span class='line'>则作业运行时的日志级别将由executor-log4j.properties文件控制。
</span></code></pre></td></tr></table></div></figure>


<h3>logback配置示例</h3>

<p>配置好executor的logback配置文件，命名随意，假设为executor-logback.xml，放在conf目录下。</p>

<p>配置spark-conf.defaults文件，在 spark.executor.extraJavaOptions 中增加:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>spark.executor.extraJavaOptions -Dlogback.configurationFile<span class="o">=</span>executor-logback.xml
</span></code></pre></td></tr></table></div></figure>


<p>启动Spark作业时增加–files参数。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$spark</span>-submit --files /path/to/conf/executor-logback.xml xxx
</span></code></pre></td></tr></table></div></figure>


<p>则作业运行时的日志级别将由executor-logback.xml文件控制。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript实现博文目录自动生成]]></title>
    <link href="http://lionheartwang.github.io/blog/2016/09/13/javascriptshi-xian-bo-wen-mu-lu-zi-dong-sheng-cheng/"/>
    <updated>2016-09-13T17:16:48+08:00</updated>
    <id>http://lionheartwang.github.io/blog/2016/09/13/javascriptshi-xian-bo-wen-mu-lu-zi-dong-sheng-cheng</id>
    <content type="html"><![CDATA[<p>自建的博客站点，常常需要博文目录自动生成的功能，本文介绍一种JavaScript实现的解决方案。</p>

<p>实现参考了 <a href="http://www.iyanlei.com/markdown_catelog.html%E3%80%82">http://www.iyanlei.com/markdown_catelog.html%E3%80%82</a></p>

<!--more-->


<h2>目录自动生成</h2>

<p>以本站博客的生成代码为例。我们需要借助JQuery实现，因此首先加载JQuery库。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>相关HTML</h3>

<p>在博文顶部留出一块区域用作目录：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;blogAnchor&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;p</span> <span class="na">id=</span><span class="s">&quot;anchorContentToggle&quot;</span> <span class="na">title=</span><span class="s">&quot;收起&quot;</span><span class="nt">&gt;</span>导航[-]<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;anchorContent&quot;</span> <span class="na">id=</span><span class="s">&quot;anchorContent&quot;</span><span class="nt">&gt;</span> <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在博文末尾添加一段JavaScript代码，扫描当前页面的h2~h6元素。</p>

<h3>使用JQuery生成目录</h3>

<p>为每个标题生成一个超链接a元素，添加到anchorContent区域中。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;/javascripts/libs/blogDirectory.js&quot;</span> <span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>blogDirectory.js具体实现如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;.entry-content&quot;</span><span class="p">).</span><span class="nx">find</span><span class="p">(</span><span class="s2">&quot;h2,h3,h4,h5,h6&quot;</span><span class="p">).</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">tag</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nx">item</span><span class="p">).</span><span class="nx">get</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="nx">localName</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="nx">item</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;id&quot;</span><span class="p">,</span> <span class="s2">&quot;wow&quot;</span> <span class="o">+</span> <span class="nx">i</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#anchorContent&quot;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;&lt;p&gt;&lt;a class = &quot;title-&#39;</span> <span class="o">+</span> <span class="nx">tag</span> <span class="o">+</span>
</span><span class='line'>    <span class="s1">&#39; anchor-link&quot; onclick = &quot;return false;&quot; href = &quot;#&quot; link = &quot;#wow&#39;</span> <span class="o">+</span> <span class="nx">i</span> <span class="o">+</span>
</span><span class='line'>    <span class="s1">&#39;&quot;&gt;&#39;</span> <span class="o">+</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">text</span><span class="p">()</span> <span class="o">+</span> <span class="s1">&#39;&lt;/a&gt;&lt;/p&gt;&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;.title-h2&quot;</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="s2">&quot;margin-left&quot;</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;.title-h3&quot;</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="s2">&quot;margin-left&quot;</span><span class="p">,</span> <span class="mi">20</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;.title-h4&quot;</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="s2">&quot;margin-left&quot;</span><span class="p">,</span> <span class="mi">40</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;.title-h5&quot;</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="s2">&quot;margin-left&quot;</span><span class="p">,</span> <span class="mi">60</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;.title-h6&quot;</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="s2">&quot;margin-left&quot;</span><span class="p">,</span> <span class="mi">80</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>代码根据标题的级别控制CSS样式表单，对不同的级别的标题使用了不同的缩进。</p>

<h2>点击收放功能</h2>

<p>向blogDirectory.js中添加一段代码，即可实现点击收放功能。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#anchorContentToggle&quot;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">text</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">html</span><span class="p">();</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nx">text</span><span class="o">==</span><span class="s2">&quot;导航[-]&quot;</span><span class="p">){</span>
</span><span class='line'>        <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="s2">&quot;导航[+]&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">attr</span><span class="p">({</span><span class="s2">&quot;title&quot;</span><span class="o">:</span><span class="s2">&quot;展开&quot;</span><span class="p">});</span>
</span><span class='line'>    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>        <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="s2">&quot;导航[-]&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">attr</span><span class="p">({</span><span class="s2">&quot;title&quot;</span><span class="o">:</span><span class="s2">&quot;收起&quot;</span><span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#anchorContent&quot;</span><span class="p">).</span><span class="nx">toggle</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>实现的方法就是注册anchorContentToggle元素的点击响应函数。</p>

<p>通过调用anchorContent元素的toggle方法来调整anchorContent的可见性，达到收放的效果。</p>

<h2>锚点自动跳转</h2>

<p>我们希望点击目录中的某个条目，能够跳转到博文中相应的位置，这可以借助锚点实现。</p>

<p>向blogDirectory.js中继续添加代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;.anchor-link&quot;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;html,body&quot;</span><span class="p">).</span><span class="nx">animate</span><span class="p">({</span><span class="nx">scrollTop</span><span class="o">:</span> <span class="nx">$</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;link&quot;</span><span class="p">)).</span><span class="nx">offset</span><span class="p">().</span><span class="nx">top</span><span class="p">},</span> <span class="mi">400</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>实现了每个条目的点击响应函数，即跳转到相应的锚点位置，这里使用了JQuery animate方法来实现平滑过渡。</p>

<h2>样式调节美化</h2>

<p>到这里，目录的基本功能已经实现了。我们需要调整一下样式，美化一下目录。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.anchorContent</span> <span class="nt">a</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">color</span><span class="o">:</span> <span class="m">#999</span><span class="p">;</span>
</span><span class='line'>  <span class="k">font-size</span><span class="o">:</span> <span class="m">14px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">text-decoration</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.anchorContent</span> <span class="nt">a</span><span class="nd">:hover</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">color</span><span class="o">:</span> <span class="err">$</span><span class="n">theme</span><span class="o">-</span><span class="n">color1</span><span class="p">;</span>
</span><span class='line'>  <span class="k">font-size</span><span class="o">:</span> <span class="m">16px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">font-weight</span><span class="o">:</span> <span class="k">bold</span><span class="p">;</span>
</span><span class='line'>  <span class="k">padding-left</span><span class="o">:</span> <span class="m">5px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nf">#anchorContentToggle</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">color</span><span class="o">:</span> <span class="m">#a61c00</span><span class="p">;</span>
</span><span class='line'>  <span class="k">cursor</span><span class="o">:</span> <span class="k">pointer</span><span class="p">;</span>
</span><span class='line'>  <span class="k">font-size</span><span class="o">:</span> <span class="m">16px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">font-weight</span><span class="o">:</span> <span class="k">bold</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样鼠标扫过相关条目会有字号颜色的改变，起到突出显示的效果。</p>

<p>最终效果如下：</p>

<p><img src="http://lionheartwang.github.io/images/blog/03-blog_directory.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spark HistoryServer 配置和使用方法]]></title>
    <link href="http://lionheartwang.github.io/blog/2016/08/24/spark-historyserver-configuration/"/>
    <updated>2016-08-24T17:17:58+08:00</updated>
    <id>http://lionheartwang.github.io/blog/2016/08/24/spark-historyserver-configuration</id>
    <content type="html"><![CDATA[<p>本文介绍Spark History Server的配置和使用方法。</p>

<!--More-->


<h2>History Server 配置</h2>

<p>Spark提供了History Server服务可以保存历史Application的运行记录。</p>

<h3>客户端配置</h3>

<p>对于提交应用程序的客户端需要在conf/spark-defaults.conf中配置以下参数：</p>

<table>
<thead>
<tr>
<th> 参数        </th>
<th style="text-align:left;"> 功能           </th>
</tr>
</thead>
<tbody>
<tr>
<td> spark.eventLog.enabled      </td>
<td style="text-align:left;"> 是否记录Spark事件，用于应用程序在完成后重构webUI。 </td>
</tr>
<tr>
<td> spark.eventLog.dir      </td>
<td style="text-align:left;"> spark.eventLog.enabled为 true，该属性为记录spark事件的根目录。在此根目录中，Spark为每个应用程序创建分目录，并将应用程序的事件记录到此目录中。<br>可以将此属性设置为HDFS目录，以便history server读取历史记录文件。</br>      </td>
</tr>
<tr>
<td> spark.yarn.historyServer.address </td>
<td style="text-align:left;"> Spark history server的地址。 这个地址会在Spark应用程序完成后提交给YARN RM，然后RM将信息从RM UI写到history server UI上。<br><strong><font color=red>注意：hostname:port，前面不加http：//，末尾也不要加反斜杠。</font></strong> </br>     </td>
</tr>
</tbody>
</table>


<h3>服务端配置</h3>

<p>服务端主要需要在conf/spark-defaults.conf中配置如下属性：</p>

<table>
<thead>
<tr>
<th> 参数        </th>
<th style="text-align:left;"> 功能           </th>
<th style="text-align:left;"> 默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td> spark.history.ui.port     </td>
<td style="text-align:left;"> History Server的默认访问端口。<strong><font color=red>建议配置在8000~9000之间，以确保再内网浏览器能够正常显示。</strong><font color=red> </td>
<td style="text-align:left;"> 18080 </td>
</tr>
<tr>
<td> spark.history.fs.logDirectory    </td>
<td style="text-align:left;">   用于指定HistoryServer读取的eventlog存放的hdfs路径。  </td>
<td style="text-align:left;">无</td>
</tr>
<tr>
<td> spark.history.updateInterval </td>
<td style="text-align:left;">  History Server显示信息的刷新时间间隔，以秒为单位。每次更新都会检查持久层事件日志的任何变化。  </td>
<td style="text-align:left;"> 10 </td>
</tr>
<tr>
<td>spark.history.retainedApplications</td>
<td style="text-align:left;">在History Server上显示的最大应用程序数量，如果超过这个值，旧的应用程序信息将被删除。</td>
<td style="text-align:left;">250</td>
</tr>
</tbody>
</table>


<p>如果使用Kerberos认证可以配置如下参数：</p>

<table>
<thead>
<tr>
<th> 参数        </th>
<th style="text-align:left;"> 功能           </th>
<th style="text-align:left;"> 默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td> spark.history.kerberos.enabled    </td>
<td style="text-align:left;"> 是否使用kerberos方式登录访问history server。</td>
<td style="text-align:left;">false</td>
</tr>
<tr>
<td>spark.history.kerberos.principal</td>
<td style="text-align:left;">spark.history.kerberos.enabled为true时使用，用于指定History Server的kerberos主体名称</td>
<td style="text-align:left;">空</td>
</tr>
<tr>
<td>spark.history.kerberos.keytab</td>
<td style="text-align:left;">spark.history.kerberos.enabled为true时使用，用于指定History Server的kerberos keytab文件位置</td>
<td style="text-align:left;">空</td>
</tr>
<tr>
<td>spark.history.ui.acls.enable</td>
<td style="text-align:left;">授权用户查看应用程序信息的时候是否检查acl。如果启用，无论应用程序的spark.ui.acls.enable怎么设置，都要进行授权检查。<br>只有应用程序所有者和spark.ui.view.acls指定的用户可以查看应用程序信息; 如果禁用，不做任何检查。</br></td>
<td style="text-align:left;">false</td>
</tr>
</tbody>
</table>


<p>另外，服务端可以配置以下环境变量：</p>

<table>
<thead>
<tr>
<th> 参数        </th>
<th style="text-align:left;"> 功能           </th>
</tr>
</thead>
<tbody>
<tr>
<td>SPARK_DAEMON_JAVA_OPTS</td>
<td style="text-align:left;">History Server的JVM参数，默认为空</td>
</tr>
<tr>
<td>SPARK_DAEMON_MEMORY</td>
<td style="text-align:left;">分配给History Server的内存大小，默认512M</td>
</tr>
<tr>
<td>SPARK_HISTORY_OPTS</td>
<td style="text-align:left;">History Server的属性设置，默认为空。</td>
</tr>
<tr>
<td>SPARK_PUBLIC_DNS</td>
<td style="text-align:left;">History Server的公网地址，如果不设置，可以用内网地址来访问，默认为空。</td>
</tr>
</tbody>
</table>


<h2>History Server 使用</h2>

<h3>启动</h3>

<p>一般将客户端运行生成的eventlog统一存放在一个HDFS路径下便于查询历史记录，然后History Server端 spark.history.fs.logDirectory的值设为该路径即可。</p>

<p>启动History Server命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$sh sbin/start-history-server.sh</span></code></pre></td></tr></table></div></figure>


<h3>停止</h3>

<p>停止History Server命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$sh sbin/stop-history-server.sh</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[免密码远程登录/拷贝方法]]></title>
    <link href="http://lionheartwang.github.io/blog/2016/08/18/no-pass-world-ssh-method/"/>
    <updated>2016-08-18T15:41:28+08:00</updated>
    <id>http://lionheartwang.github.io/blog/2016/08/18/no-pass-world-ssh-method</id>
    <content type="html"><![CDATA[<p>生产环境中尝尝需要在机器间建立信任关系，远程登录或拷贝大量数据，本文介绍非如何快速免密码登录机器或拷贝数据。</p>

<!--more-->


<h2>生成密钥</h2>

<p>设有源机器 A，目标机器 B。现需要从A免密码登录B，或从B拷贝数据到A。</p>

<p>首先需要生成密钥。登录A机器，执行</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ssh-keygen -t rsa</span></code></pre></td></tr></table></div></figure>


<p>一路回车到底。这时在A主机~/.ssh目录下生成了私钥id_rsa以及陪对的id_rsa.pub公钥文件。</p>

<h2>复制公钥</h2>

<p>接下来把公钥复制到远程主机B。</p>

<p>即把公钥id_rsa.pub追加写入到机器B的 ~/.ssh/authorized_keys文件中即可。</p>

<p>执行如下命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$cat ~/.ssh/id_rsa.pub | ssh user@host "mkdir ~/.ssh; cat &gt;&gt; ~/.ssh/authorized_keys"</span></code></pre></td></tr></table></div></figure>


<p>如有多台远程主机多次复制即可。</p>

<p>此时已经可以免密码从B拷贝数据到A或从A ssh登录到B。</p>

<p>如果机器A和B用户一致的话，就可以直接从A ssh hostname 直接登陆B。</p>

<p>若不一致则可通过ssh username@hostname登录。</p>

<h2>配置ssh</h2>

<p>对于本地机器用户和远程登录用户名不同的情况可通过修改本地登陆用户的 ~/.ssh/config 文件解决。</p>

<p>向 ~/.ssh/config 中添加内容如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Host 机器B的hostname
</span><span class='line'>user 登录用户名
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>这样，本地机器A和远程机器B用户名不一致也可 ssh hostname 免密码直接登陆。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mysql常用操作方法]]></title>
    <link href="http://lionheartwang.github.io/blog/2016/07/06/mysqlchang-yong-cao-zuo-fang-fa/"/>
    <updated>2016-07-06T19:24:22+08:00</updated>
    <id>http://lionheartwang.github.io/blog/2016/07/06/mysqlchang-yong-cao-zuo-fang-fa</id>
    <content type="html"><![CDATA[<p>本文介绍一些mysql实用操作方法。</p>

<!--more-->


<h2>启动/登录</h2>

<p>安装完毕后，使用如下命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$bin/mysqld_safe --user=mysql &</span></code></pre></td></tr></table></div></figure>


<p>启动后即可登录</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$mysql</span></code></pre></td></tr></table></div></figure>


<p>出现如下登录界面表示启动成功：</p>

<p><img src="http://lionheartwang.github.io/images/blog/02-mysql_login.png"></p>

<p>更一般地，可以登录远程mysql数据库。命令如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$mysql -h&lt;目标ip/hostname&gt; -u&lt;用户名&gt; -p&lt;密码&gt;</span></code></pre></td></tr></table></div></figure>


<h2>用户权限管理</h2>

<p>一般mysql安装完在本地可以root账户免密码登录。可以为root账户设置密码。</p>

<h3>设置root账户密码</h3>

<p>使用mysqladmin命令设置，形式如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$mysqladmin -u root password "&lt;新的root密码&gt;"</span></code></pre></td></tr></table></div></figure>


<p>设置完毕后root帐号登录j就需要输入密码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$mysql -uroot -p&lt;新的root密码&gt;</span></code></pre></td></tr></table></div></figure>


<h3>添加用户</h3>

<p>添加新用户并授予权限使用如下语句：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mysql&gt; GRANT &lt;权限1, 权限2...&gt; PRIVILEGES ON &lt;授权数据库名&gt;.&lt;授权表名&gt; TO '&lt;用户名&gt;'@'&lt;授权访问的IP&gt;' IDENTIFIED BY '&lt;密码&gt;' WITH GRANT OPTION;</span></code></pre></td></tr></table></div></figure>


<p>其中WITH GRANT OPTION可选，表明该用户是否有权限授予权限。</p>

<p>另外可以使用通配符'*&lsquo;，&rsquo;%&lsquo;，例如如下语句：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mysql&gt; GRANT ALL PRIVILEGES ON *.* TO 'wyg'@'%' IDENTIFIED BY '123456' WITH GRANT OPTION;</span></code></pre></td></tr></table></div></figure>


<p>该语句为用户wyg授权，以123456为密码，具有从任意IP访问所有数据库中所有表的所有权限，并具有授权权限。</p>

<h2>备份/还原数据库</h2>

<p>生产环境中经常需要对数据库进行迁移，这就需要备份/还原数据库。</p>

<h3>备份数据</h3>

<p>使用mysqldump命令，语法如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$mysqldump -u&lt;用户名&gt; -p&lt;密码&gt; --databases &lt;数据库1，数据库2...&gt; &gt; &lt;输出文件&gt;</span></code></pre></td></tr></table></div></figure>


<p>该语句将指定的database的数据信息备份到输出文件中，输出文件是一个sql文件。</p>

<p>可以用&ndash;all-databases 将整个数据库的所有database的数据备份。</p>

<h3>还原数据</h3>

<p>在输出文件的当前目录登录mysql，然后执行：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mysql&gt; source &lt;输入文件&gt;</span></code></pre></td></tr></table></div></figure>


<p>执行完成后当前输入文件中的数据信息就录入当前mysql中。</p>

<p>例如，在一台老的数据库机器上执行：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$mysqldump -uwyg -p123456 --all-databases &gt; all.sql</span></code></pre></td></tr></table></div></figure>


<p>然后拷贝all.sql到新机器，登录mysql执行:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mysql&gt; source all.sql</span></code></pre></td></tr></table></div></figure>


<p>这样就完成了mysql数据从老机器到新机器的迁移。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux Shell配色指南]]></title>
    <link href="http://lionheartwang.github.io/blog/2016/05/27/linux-shellpei-se-zhi-nan/"/>
    <updated>2016-05-27T16:52:57+08:00</updated>
    <id>http://lionheartwang.github.io/blog/2016/05/27/linux-shellpei-se-zhi-nan</id>
    <content type="html"><![CDATA[<p>本文介绍如何配置Linux Shell终端配色。</p>

<!--more-->


<h2>PS1变量详解</h2>

<p>我们能够通过配置PS1变量使提示符成为彩色。
在PS1中配置字符序列颜色的格式为：</p>

<blockquote><p>   [\e[F;Bm]</p></blockquote>

<p>基本上是夹在 &ldquo;\e["（转义开方括号）和 "m&rdquo; 之间数字值。假如指定一个以上的数字代码，则用分号将他们分开。</p>

<p>其中：</p>

<ul>
<li>F 为字体颜色，编号30~37；</li>
<li>B 为背景色，编号40~47。</li>
</ul>


<p>可通过 \e[0m 关闭颜色输出；特别的，当B为1时，将显示加亮加粗的文字，请看下面的颜色表和代码表。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>前景 背景 颜色
</span><span class='line'>-------------------------
</span><span class='line'>30 40 黑色
</span><span class='line'>31 41 红色
</span><span class='line'>32 42 绿色
</span><span class='line'>33 43 黄色
</span><span class='line'>34 44 蓝色
</span><span class='line'>35 45 紫色
</span><span class='line'>36 46 青色
</span><span class='line'>37 47 白色
</span><span class='line'>代码 意义
</span><span class='line'>-------------------------
</span><span class='line'>0 OFF
</span><span class='line'>1 高亮显示
</span><span class='line'>4 underline
</span><span class='line'>5 闪烁
</span><span class='line'>7 反白显示
</span><span class='line'>8 不可见</span></code></pre></td></tr></table></div></figure>


<p>假如想要配置终端提示符的样式只要把$PS1在~/.bahrc指定即可。</p>

<p>&ldquo;\e[0m&rdquo;    假如将数字代码指定为零，则他就会通知终端将前景、背景和加粗配置重置为他们的默认值。</p>

<h2>示例配置</h2>

<p>修改~/.bashrc，增加如下内容</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># set color options for terminal
</span><span class='line'>export CLICOLOR=1
</span><span class='line'>PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u\[\033[00m\]:\[\033[01;35;35m\]\w\[\033[00m\]\$\033[1;32;32m\]'
</span><span class='line'>unset LS_COLORS</span></code></pre></td></tr></table></div></figure>


<p>重新登录，查看配色：</p>

<p><img src="http://lionheartwang.github.io/images/blog/01-color.png"></p>

<p>实际使用根据需要配置即可。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[非Root账户快速安装mySQL]]></title>
    <link href="http://lionheartwang.github.io/blog/2016/04/07/fei-rootzhang-hu-kuai-su-an-zhuang-mysql/"/>
    <updated>2016-04-07T21:37:37+08:00</updated>
    <id>http://lionheartwang.github.io/blog/2016/04/07/fei-rootzhang-hu-kuai-su-an-zhuang-mysql</id>
    <content type="html"><![CDATA[<p>生产环境中尝尝需要使用mySQL，但线上机器往往工作在非root账户下，没有root密码也不能使用sudo。</p>

<p>本文介绍非Root账户如何快速安装mySQL。</p>

<!--more-->


<h2>下载安装MYSQL</h2>

<p>从官网下载mySQL二进制包： mySQL 5.5.48
下载后解压进入目录</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$tar zxvf mysql-5.5.48-linux2.6-x86_64.tar.gz
</span><span class='line'>$cd mysql-5.5.48-linux2.6-x86_64</span></code></pre></td></tr></table></div></figure>


<p>执行</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$./scripts/mysql_install_db --defaults-file=/home/wyg/work/mysql/my.cnf \
</span><span class='line'>  --user=wyg --basedir=/home/wyg/work/mysql/mysql-5.5.48-linux2.6-x86_64 \
</span><span class='line'>  --datadir=/home/wyg/work/mysql/sql_data --socket=/tmp/mysql.sock</span></code></pre></td></tr></table></div></figure>


<h2>配置MYSQL</h2>

<p>创建配置文件my.cnf如下</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[client]
</span><span class='line'>password       = your_password
</span><span class='line'>port            = 3306
</span><span class='line'>socket = /tmp/mysql.sock
</span><span class='line'>[server]
</span><span class='line'>user = wyg
</span><span class='line'>basedir = /home/wyg/work/mysql/mysql-5.5.48-linux2.6-x86_64
</span><span class='line'>datadir = /home/wyg/work/mysql/sql_data
</span><span class='line'>socket = /tmp/mysql.sock
</span><span class='line'>port = 3306</span></code></pre></td></tr></table></div></figure>


<h2>启动MYSQL</h2>

<p>执行如下命令启动mysql服务</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$./mysqld --defaults-file=/home/wyg/work/mysql/my.cnf &</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>随后执行mysq命令</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$mysql</span></code></pre></td></tr></table></div></figure>


<p>如果进入mysql客户端，则安装成功。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Welcome to the MySQL monitor.  Commands end with ; or \g.
</span><span class='line'>Your MySQL connection id is 4
</span><span class='line'>Server version: 5.5.48 MySQL Community Server (GPL)
</span><span class='line'>Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved.
</span><span class='line'>Oracle is a registered trademark of Oracle Corporation and/or its
</span><span class='line'>affiliates. Other names may be trademarks of their respective
</span><span class='line'>owners.
</span><span class='line'>Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.
</span><span class='line'>mysql&gt;</span></code></pre></td></tr></table></div></figure>


<p>配置环境变量将mysql-5.5.48-linux2.6-x86_64/bin目录添加到path，即可正常使用mysql命令。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[检索模型与搜索排序]]></title>
    <link href="http://lionheartwang.github.io/blog/2016/03/12/jian-suo-mo-xing-yu-sou-suo-pai-xu/"/>
    <updated>2016-03-12T17:47:54+08:00</updated>
    <id>http://lionheartwang.github.io/blog/2016/03/12/jian-suo-mo-xing-yu-sou-suo-pai-xu</id>
    <content type="html"><![CDATA[<p>检索模型是搜索引擎排序的理论基础，用来计算网页和用户查询的相关性。</p>

<p>几种常用的检索模型包括：</p>

<ul>
<li>布尔模型</li>
<li>向量空间模型</li>
<li>概率模型</li>
<li>语言模型</li>
<li>机器学习排序算法</li>
</ul>


<!--more-->


<h2>向量空间模型</h2>

<p>该模型需要将文档表示转换为特征向量，根据特征向量计算相似性。</p>

<p>其中，特征向量的获取主要考虑如下计算因子：</p>

<ul>
<li>词频Tf</li>
<li>逆文档IDF</li>
</ul>


<p>特征权值一般是二者乘积 Weight = Tf * IDF</p>

<h2>概率检索模型</h2>

<p>目前大部分商业搜索引擎采用概率模型作为相关性排序模型。</p>

<p>基本思想：给定用户查询，按照文档和用户需求的相关性由高到低排序。</p>

<p>实现模型：</p>

<ul>
<li>BIM：二元独立模型</li>
<li>BM25模型：目前最成功的内容排序模型。</li>
<li>BM25F：基于BM25，对文档中不同的域赋予不同的权值。</li>
</ul>


<p>BM25模型计算公式融合了4个考虑因素：</p>

<ul>
<li>IDF因子</li>
<li>文档长度因子</li>
<li>文档词频</li>
<li>查询词频</li>
</ul>


<p>BM25模型利用3个自由调节因子(k1，k2，b)对各种因子的权值进行调整组合。</p>

<h2>机器学习排序</h2>

<p>机器学习排序系统由4个步骤组成：</p>

<ul>
<li>人工标注训练数据</li>
<li>文档特征抽取</li>
<li>学习分类函数</li>
<li>在实际搜索系统中采用机器学习模型</li>
</ul>


<p>文档进入机器学习系统前需要转化为特征向量，常用特征包括：</p>

<ul>
<li>查询词在文档中的词频信息</li>
<li>查询词的IDF信息</li>
<li>文档长度</li>
<li>网页的入链数量</li>
<li>网页的出链数量</li>
<li>网页的PageRank值</li>
<li>网页的URL长度</li>
</ul>


<p>确定特征向量X后，每个文档会人工标注出相关性得分Y，这样每个文档转化为一个&lt;X,Y>的形式。
就形成了一个具体的训练实例。</p>

<p>通过多个训练实例，就可采用机器学习技术对系统进行训练，结果往往是一个分类函数或回归函数。</p>

<p>后续用户搜索中就可以用这个分类函数对文档进行打分，形成搜索结果。</p>

<h2>检索质量评价标准</h2>

<p>精确率和召回率是评价检索系统的常用指标，而对于搜索引擎来说，精确率尤为重要。</p>

<ul>
<li>精确率：本次搜索结果中相关文档所占比例。</li>
<li>召回率：本次搜索结果中包含的相关文档占整个文档集合中所有相关文档中的比例。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[搜索引擎索引]]></title>
    <link href="http://lionheartwang.github.io/blog/2016/02/20/sou-suo-yin-qing-suo-yin/"/>
    <updated>2016-02-20T15:23:30+08:00</updated>
    <id>http://lionheartwang.github.io/blog/2016/02/20/sou-suo-yin-qing-suo-yin</id>
    <content type="html"><![CDATA[<p>本文介绍搜索引擎的索引建立，更新，查询和压缩技术。</p>

<!--more-->


<h2>索引基础</h2>

<p>倒排索引是搜索引擎用来快速查找包含某个单词的文档集合的数据结构
倒排索引由单词词典和所有单词对应的倒排列表组成</p>

<p>倒排列表由倒排列表项构成，一般包含：</p>

<ul>
<li>文档ID(一般采取文档编号差值方式编码)</li>
<li>单词出现次数</li>
<li>单词在文档出现位置的信息</li>
</ul>


<h2>索引建立与更新</h2>

<h3>倒排索引建立</h3>

<p>常见建立倒排索引方法：</p>

<ul>
<li>两遍文档遍历法</li>
<li>排序法</li>
<li>归并法</li>
</ul>


<h3>动态索引及更新</h3>

<p>动态索引的三个关键数据结构：</p>

<ul>
<li>倒排索引：对初始文档集合建立的索引结构</li>
<li>临时索引：新文档进入系统建立的索引结构</li>
<li>已删除文档列表：已删除的文档ID列表</li>
</ul>


<p>注意：对于动态索引文档更改可认为是文档先被删除然后向系统内增加一篇新的文档。</p>

<p>对于动态索引需要进行更新，常见索引更新策略：</p>

<ul>
<li>完全重建策略</li>
<li>再合并策略</li>
<li>原地更新策略</li>
<li>混合策略</li>
</ul>


<h2>查询处理</h2>

<h3>基本处理机制</h3>

<p>常见查询处理机制有如下两种：</p>

<ul>
<li>一次一文档方式(Doc At a Time)</li>
<li>一次一单词方式(Term At a Time)</li>
</ul>


<p>注意：</p>

<ul>
<li>一次一文档方式实际查询时不必保留所有文档得分，保留得分Top K的文档队列即可。</li>
<li>一次一单词方式适用于多词查询，找到包含所有查询词的文档等价于求查询词对应的倒排列表的交集。</li>
</ul>


<h3>多字段和短语查询</h3>

<p>实现多字段索引方式：</p>

<ul>
<li>多索引方式</li>
<li>倒排列表方式</li>
<li>扩展列表方式</li>
</ul>


<p>常见的支持短语查询技术的方法包括：</p>

<ul>
<li>位置信息索引</li>
<li>双词索引</li>
<li>短语索引</li>
</ul>


<p>可混合使用，查询索引优先级：短语索引 > 双词索引 > 常规索引</p>

<h3>分布式索引</h3>

<p>常见的分布式索引方案：</p>

<ul>
<li>按文档对索引划分</li>
<li>按单词对索引划分</li>
</ul>


<p>其中按文档对索引划分在以下方面有优势：</p>

<ul>
<li>可扩展性</li>
<li>负载均衡</li>
<li>容错性</li>
<li>对查询方式的支持</li>
</ul>


<h2>索引压缩</h2>

<p>索引压缩包括对词典的压缩和对倒排列表的压缩。</p>

<h3>倒排列表压缩</h3>

<p>倒排列表压缩：</p>

<ul>
<li>无损压缩：更常用</li>
<li>有损压缩：特殊场合使用</li>
</ul>


<p>倒排列表压缩算法的基本构件：</p>

<ul>
<li>一元编码</li>
<li>二元编码</li>
</ul>


<p>常用压缩算法：</p>

<ul>
<li>Elias Gamma算法</li>
<li>Elias Delta算法</li>
<li>Golomb算法</li>
<li>Rice算法</li>
<li>变长字节算法</li>
<li>SimpleX系列算法</li>
<li>PForDelta算法</li>
</ul>


<p>实际使用一般混合采用多种算法。</p>

<h3>重排序与裁剪</h3>

<p>文档ID重排序通过文档聚类并重排文档ID编号来获得较高的索引压缩率
静态索引裁剪是一种有损压缩算法，通过抛弃一部分不重要的索引项来获得较好的压缩效果。</p>
]]></content>
  </entry>
  
</feed>

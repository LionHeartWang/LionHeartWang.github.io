<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[技术资源 | Workspace of LionHeart]]></title>
  <link href="http://lionheartwang.github.io/blog/categories/ji-zhu-zi-yuan/atom.xml" rel="self"/>
  <link href="http://lionheartwang.github.io/"/>
  <updated>2016-07-06T19:29:05+08:00</updated>
  <id>http://lionheartwang.github.io/</id>
  <author>
    <name><![CDATA[Wang Yiguang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mysql常用操作方法]]></title>
    <link href="http://lionheartwang.github.io/blog/2016/07/06/mysqlchang-yong-cao-zuo-fang-fa/"/>
    <updated>2016-07-06T19:24:22+08:00</updated>
    <id>http://lionheartwang.github.io/blog/2016/07/06/mysqlchang-yong-cao-zuo-fang-fa</id>
    <content type="html"><![CDATA[<p>本文介绍一些mysql实用操作方法。</p>

<!--more-->


<h2>用户权限管理</h2>

<p>一般mysql安装完在本地可以root账户免密码登录。可以为root账户设置密码。</p>

<h3>设置root账户密码</h3>

<p>使用mysqladmin命令设置，形式如下：</p>

<pre><code>$mysqladmin -u root password "&lt;新的root密码&gt;"
</code></pre>

<p>设置完毕后root帐号登录j就需要输入密码：</p>

<pre><code>$mysql -uroot -p&lt;新的root密码&gt;
</code></pre>

<h3>添加用户</h3>

<p>添加新用户并授予权限使用如下语句：</p>

<pre><code>mysql&gt; GRANT &lt;权限1, 权限2...&gt; PRIVILEGES ON &lt;授权数据库名&gt;.&lt;授权表名&gt; TO '&lt;用户名&gt;'@'&lt;授权访问的IP&gt;' IDENTIFIED BY '&lt;密码&gt;' WITH GRANT OPTION;
</code></pre>

<p>其中WITH GRANT OPTION可选，表明该用户是否有权限授予权限。</p>

<p>另外可以使用通配符'*&lsquo;，&rsquo;%&lsquo;，例如如下语句：</p>

<pre><code>mysql&gt; GRANT ALL PRIVILEGES ON *.* TO 'wyg'@'%' IDENTIFIED BY '123456' WITH GRANT OPTION;
</code></pre>

<p>该语句为用户wyg授权，以123456为密码，具有从任意IP访问所有数据库中所有表的所有权限，并具有授权权限。</p>

<h2>备份/还原数据库</h2>

<p>生产环境中经常需要对数据库进行迁移，这就需要备份/还原数据库。</p>

<h3>备份数据</h3>

<p>使用mysqldump命令，语法如下：</p>

<pre><code>$mysqldump -u&lt;用户名&gt; -p&lt;密码&gt; --databases &lt;数据库1，数据库2...&gt; &gt; &lt;输出文件&gt;
</code></pre>

<p>该语句将指定的database的数据信息备份到输出文件中，输出文件是一个sql文件。</p>

<p>可以用&ndash;all-databases 将整个数据库的所有database的数据备份。</p>

<h3>还原数据</h3>

<p>在输出文件的当前目录登录mysql，然后执行：</p>

<pre><code>mysql&gt; source &lt;输入文件&gt;
</code></pre>

<p>执行完成后当前输入文件中的数据信息就录入当前mysql中。</p>

<p>例如，在一台老的数据库机器上执行：</p>

<pre><code>$mysqldump -uwyg -p123456 --all-databases &gt; all.sql
</code></pre>

<p>然后拷贝all.sql到新机器，登录mysql执行:</p>

<pre><code>mysql&gt; source all.sql
</code></pre>

<p>这样就完成了mysql数据从老机器到新机器的迁移。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux Shell配色指南]]></title>
    <link href="http://lionheartwang.github.io/blog/2016/05/27/linux-shellpei-se-zhi-nan/"/>
    <updated>2016-05-27T16:52:57+08:00</updated>
    <id>http://lionheartwang.github.io/blog/2016/05/27/linux-shellpei-se-zhi-nan</id>
    <content type="html"><![CDATA[<p>本文介绍如何配置Linux Shell终端配色。</p>

<!--more-->


<h2>PS1变量详解</h2>

<p>我们能够通过配置PS1变量使提示符成为彩色。
在PS1中配置字符序列颜色的格式为：</p>

<blockquote><p>   [\e[F;Bm]</p></blockquote>

<p>基本上是夹在 &ldquo;\e["（转义开方括号）和 "m&rdquo; 之间数字值。假如指定一个以上的数字代码，则用分号将他们分开。</p>

<p>其中：</p>

<ul>
<li>F 为字体颜色，编号30~37；</li>
<li>B 为背景色，编号40~47。</li>
</ul>


<p>可通过 \e[0m 关闭颜色输出；特别的，当B为1时，将显示加亮加粗的文字，请看下面的颜色表和代码表。</p>

<pre><code>    前景 背景 颜色
    -------------------------
    30 40 黑色
    31 41 红色
    32 42 绿色
    33 43 黄色
    34 44 蓝色
    35 45 紫色
    36 46 青色
    37 47 白色
    代码 意义
    -------------------------
    0 OFF
    1 高亮显示
    4 underline
    5 闪烁
    7 反白显示
    8 不可见
</code></pre>

<p>假如想要配置终端提示符的样式只要把$PS1在~/.bahrc指定即可。</p>

<p>&ldquo;\e[0m&rdquo;    假如将数字代码指定为零，则他就会通知终端将前景、背景和加粗配置重置为他们的默认值。</p>

<h2>示例配置</h2>

<p>修改~/.bashrc，增加如下内容</p>

<pre><code># set color options for terminal
export CLICOLOR=1
PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u\[\033[00m\]:\[\033[01;35;35m\]\w\[\033[00m\]\$\033[1;32;32m\]'
unset LS_COLORS
</code></pre>

<p>重新登录，查看配色：</p>

<p><img src="https://wt-prj.oss.aliyuncs.com/f552fc42b7f64b5a9a4f288c96eb594c/e792eb36-92f3-4bdb-a896-99b80df1d56c.png" alt="替代文字" /></p>

<p>实际使用根据需要配置即可。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[非Root账户快速安装mySQL]]></title>
    <link href="http://lionheartwang.github.io/blog/2016/04/07/fei-rootzhang-hu-kuai-su-an-zhuang-mysql/"/>
    <updated>2016-04-07T21:37:37+08:00</updated>
    <id>http://lionheartwang.github.io/blog/2016/04/07/fei-rootzhang-hu-kuai-su-an-zhuang-mysql</id>
    <content type="html"><![CDATA[<p>生产环境中尝尝需要使用mySQL，但线上机器往往工作在非root账户下，没有root密码也不能使用sudo。</p>

<p>本文介绍非Root账户如何快速安装mySQL。</p>

<!--more-->


<h2>下载安装MYSQL</h2>

<p>从官网下载mySQL二进制包： mySQL 5.5.48
下载后解压进入目录</p>

<pre><code>$tar zxvf mysql-5.5.48-linux2.6-x86_64.tar.gz
$cd mysql-5.5.48-linux2.6-x86_64
</code></pre>

<p>执行</p>

<pre><code>$./scripts/mysql_install_db --defaults-file=/home/wyg/work/mysql/my.cnf \
  --user=wyg --basedir=/home/wyg/work/mysql/mysql-5.5.48-linux2.6-x86_64 \
  --datadir=/home/wyg/work/mysql/sql_data --socket=/tmp/mysql.sock
</code></pre>

<h2>配置MYSQL</h2>

<p>创建配置文件my.cnf如下</p>

<pre><code>[client]
password       = your_password
port            = 3306
socket = /tmp/mysql.sock
[server]
user = wyg
basedir = /home/wyg/work/mysql/mysql-5.5.48-linux2.6-x86_64
datadir = /home/wyg/work/mysql/sql_data
socket = /tmp/mysql.sock
port = 3306
</code></pre>

<h2>启动MYSQL</h2>

<p>执行如下命令启动mysql服务</p>

<pre><code>$./mysqld --defaults-file=/home/wyg/work/mysql/my.cnf &amp;
</code></pre>

<p>随后执行mysq命令</p>

<pre><code>$mysql
</code></pre>

<p>如果进入mysql客户端，则安装成功。</p>

<pre><code>Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 4
Server version: 5.5.48 MySQL Community Server (GPL)
Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved.
Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.
Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.
mysql&gt;
</code></pre>

<p>配置环境变量将mysql-5.5.48-linux2.6-x86_64/bin目录添加到path，即可正常使用mysql命令。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Octopress搭建Github博客]]></title>
    <link href="http://lionheartwang.github.io/blog/2016/02/03/%E4%BD%BF%E7%94%A8Octopress%E6%90%AD%E5%BB%BAGitHub%E5%8D%9A%E5%AE%A2/"/>
    <updated>2016-02-03T11:42:56+08:00</updated>
    <id>http://lionheartwang.github.io/blog/2016/02/03/使用Octopress搭建GitHub博客</id>
    <content type="html"><![CDATA[<p>本文介绍如何使用Octopress搭建Github博客。</p>

<!--more-->


<h2>Octopress安装与配置</h2>

<h3>安装ruby</h3>

<p>查看ruby版本</p>

<pre><code>ruby --version  # 必须显示1.9.3
</code></pre>

<p>安装方法：</p>

<pre><code>$curl -L https://get.rvm.io | bash -s stable --ruby
$rvm install 1.9.3
$rvm use 1.9.3
$rvm rubygems latest
</code></pre>

<p>若有显示命名未找到，直接下载安装即可。</p>

<h3>安装octopress</h3>

<p>在安装octopress之前，确保已安装git。</p>

<pre><code> $git clone git://github.com/imathis/octopress.git octopress
 $cd octopress
 $gem install bundler
 $bundle install
 $rake install
</code></pre>

<h2>建立Github主页</h2>

<p>需要注册Github账户。登录后在GitHub上创建一个仓库。仓库名称：username.github.io</p>

<h3>博客生成</h3>

<p>博客的源码放到source分支下，并把生成的内容提交到master分支。
在octopress目录下使用如下命令生成博客内容。</p>

<pre><code>$rake generate //生成
</code></pre>

<h3>博客预览</h3>

<p>可使用如下命令在本地预览生成效果。</p>

<pre><code>$rake preview //预览
</code></pre>

<p>执行成功后可通过本地浏览器在 <a href="http://localhost:4000">http://localhost:4000</a> 查看到先前生成的博客内容。</p>

<h3>博客发布</h3>

<p>如果预览没有问题，想要发布博客到Github主页。
首先执行如下命令：</p>

<pre><code>$rake setup_github_pages
</code></pre>

<p>执行后要求输入仓库的url，可以在Github仓库内容页面找到项目的ssh或http URL链接。</p>

<p>如：git@github.com:username/username.github.io.git</p>

<p>直接复制粘贴该链接即可。</p>

<p>上述操作设置了发布的目标位置为用户Github主页。</p>

<pre><code>$rake deploy 
$git add .
$git commit -m "comment"
$git push origin source
</code></pre>

<p>生成后的博客文件存放在_deploy目录下, 通过上述操作提交到Github博客项目。</p>

<p>至此就能够在username.github.io上看到了博客内容了。</p>

<h2>发布新文章</h2>

<p>发布新文章时可使用如下命令：</p>

<pre><code>$rake new_post["title"]
</code></pre>

<p>生成的新文章在source/_post/目录下，文件名构成为时间和标题的拼接。</p>

<p>后续发布操作依然是执行</p>

<pre><code>$rake generate
$rake preview
</code></pre>

<p>此时可以预览文章，然后执行</p>

<pre><code>$rake deploy 
$git add .
$git commit -m "comment"
$git push origin source
</code></pre>

<p>此时在Github博客主页就能看到新发布的文章了。</p>
]]></content>
  </entry>
  
</feed>

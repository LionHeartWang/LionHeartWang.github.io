<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[大数据 | Workspace of LionHeart]]></title>
  <link href="http://lionheartwang.github.io/blog/categories/大数据/atom.xml" rel="self"/>
  <link href="http://lionheartwang.github.io/"/>
  <updated>2018-05-17T16:32:32+08:00</updated>
  <id>http://lionheartwang.github.io/</id>
  <author>
    <name><![CDATA[Wang Yiguang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Spark Shuffle工作原理详解]]></title>
    <link href="http://lionheartwang.github.io/blog/2018/03/11/spark-shuffle-implementation/"/>
    <updated>2018-03-11T00:34:09+08:00</updated>
    <id>http://lionheartwang.github.io/blog/2018/03/11/spark-shuffle-implementation</id>
    <content type="html"><![CDATA[<p>Spark中，数据通过从一个state流向下一个 stage 是通过shuffle过程完成的。</p>

<p>本文介绍Spark中的shuffle过程设计和工作原理。</p>

<!--More-->


<h2>MapReduce 和 Spark Shuffle 过程对比</h2>

<p>Hadoop MapReduce 中的 shuffle 过程，和Spark的shuffle过程有一些区别和联系。</p>

<p>从 high-level 的角度来看，两者都是将 mapper（Spark 里是 ShuffleMapTask）的输出进行 partition，不同的 partition 送到不同的 reducer。（Spark 里 reducer 可能是下一个 stage 里的 ShuffleMapTask，也可能是 ResultTask）。</p>

<p>Reducer 以内存作缓冲区，边 shuffle 边 aggregate 数据，等到数据 aggregate 好以后进行 reduce() （Spark 里可能是后续的一系列操作）。</p>

<p>从 low-level 的角度来看，两者差别不小。</p>

<p>Hadoop MapReduce 是 sort-based，进入 combine() 和 reduce() 的 records 必须先 sort。</p>

<p>这样的好处在于 combine/reduce() 可以处理大规模的数据，因为其输入数据可以通过外排得到（mapper 对每段数据先做排序，reducer 的 shuffle 对排好序的每段数据做归并）。</p>

<p>1.2之前的 Spark 默认选择的是 hash-based，通常使用 HashMap 来对 shuffle 来的数据进行 aggregate，不会对数据进行提前排序。</p>

<p>如果用户需要经过排序的数据，那么需要自己调用类似 sortByKey() 的操作；如果你是Spark 1.1的用户，可以将spark.shuffle.manager设置为sort，则会对数据进行排序。</p>

<p>从Spark 1.2起，sort作为默认的Shuffle实现。</p>

<p>从实现角度来看，两者也有不少差别。</p>

<p>Hadoop MapReduce 将处理流程划分出明显的几个阶段：map(), spill, merge, shuffle, sort, reduce() 等。</p>

<p>每个阶段各司其职，可以按照过程式的编程思想来逐一实现每个阶段的功能。</p>

<p>在 Spark 中，没有这样功能明确的阶段，只有不同的 stage 和一系列的 transformation()，所以 spill, merge, aggregate 等操作需要蕴含在 transformation() 中。</p>

<p>如果我们将 map 端划分数据、持久化数据的过程称为 shuffle write，而将 reducer 读入数据、aggregate 数据的过程称为 shuffle read。</p>

<p>那么在 Spark 中，问题就变为怎么在 job 的逻辑或者物理执行图中加入 shuffle write 和 shuffle read 的处理逻辑？以及两个处理逻辑应该怎么高效实现？</p>

<h2>Shuffle Write</h2>

<p>由于不要求数据有序，shuffle write 的任务很简单：</p>

<ul>
<li>将数据 partition 好，并持久化。</li>
<li>之所以要持久化，一方面是要减少内存存储空间压力，另一方面也是为了 fault-tolerance。</li>
</ul>


<p>shuffle write 的任务很简单，那么实现也很简单：</p>

<ul>
<li>将 shuffle write 的处理逻辑加入到 ShuffleMapStage（ShuffleMapTask 所在的 stage） 的最后，该 stage 的 final RDD 每输出一个 record 就将其 partition 并持久化。</li>
</ul>


<p>图示如下：</p>

<p><img src="/images/blog/29-shuffle-write-no-consolidation.png"></p>

<p>上图有 4 个 ShuffleMapTask 要在同一个 worker node 上运行，CPU core 数为 2，可以同时运行两个 task。</p>

<p>每个 task 的执行结果（该 stage 的 finalRDD 中某个 partition 包含的 records）被逐一写到本地磁盘上。</p>

<p>每个 task 包含 R 个缓冲区，R = reducer 个数（也就是下一个 stage 中 task 的个数）。</p>

<p>缓冲区被称为 bucket，其大小为spark.shuffle.file.buffer.kb ，默认是 32KB（Spark 1.1 版本以前是 100KB）。</p>

<p>其实 bucket 是一个广义的概念，代表 ShuffleMapTask 输出结果经过 partition 后要存放的地方，这里为了细化数据存放位置和数据名称，仅仅用 bucket 表示缓冲区。</p>

<p>ShuffleMapTask 的执行过程很简单：</p>

<ul>
<li>先利用 pipeline 计算得到 finalRDD 中对应 partition 的 records。每得到一个 record 就将其送到对应的 bucket 里，具体是哪个 bucket 由partitioner.partition(record.getKey()))决定。</li>
<li>每个 bucket 里面的数据会不断被写到本地磁盘上，形成一个 ShuffleBlockFile，或者简称 FileSegment。</li>
<li>之后的 reducer 会去 fetch 属于自己的 FileSegment，进入 shuffle read 阶段。</li>
</ul>


<p>这样的实现很简单，但有几个问题：</p>

<ul>
<li>产生的 FileSegment 过多。每个 ShuffleMapTask 产生 R（reducer 个数）个 FileSegment，M 个 ShuffleMapTask 就会产生 M * R 个文件。一般 Spark job 的 M 和 R 都很大，因此磁盘上会存在大量的数据文件。</li>
<li>缓冲区占用内存空间大。每个 ShuffleMapTask 需要开 R 个 bucket，M 个 ShuffleMapTask 就会产生 M R 个 bucket。虽然一个 ShuffleMapTask 结束后，对应的缓冲区可以被回收，但一个 worker node 上同时存在的 bucket 个数可以达到 cores R 个（一般 worker 同时可以运行 cores 个 ShuffleMapTask），占用的内存空间也就达到了cores * R * 32 KB。对于 8 核 1000 个 reducer 来说，占用内存就是 256MB。</li>
</ul>


<p>目前来看，第二个问题还没有好的方法解决，因为写磁盘终究是要开缓冲区的，缓冲区太小会影响 IO 速度。</p>

<p>但第一个问题有一些方法去解决，下面介绍已经在 Spark 里面实现的 FileConsolidation 方法。先上图：</p>

<p><img src="/images/blog/30-shuffle-write-consolidation.png"></p>

<p>可以明显看出，在一个 core 上连续执行的 ShuffleMapTasks 可以共用一个输出文件 ShuffleFile。</p>

<p>先执行完的 ShuffleMapTask 形成 ShuffleBlock i，后执行的 ShuffleMapTask 可以将输出数据直接追加到 ShuffleBlock i 后面，形成 ShuffleBlock i'，每个 ShuffleBlock 被称为 FileSegment。下一个 stage 的 reducer 只需要 fetch 整个 ShuffleFile 就行了。</p>

<p>这样，每个 worker 持有的文件数降为 cores * R。FileConsolidation 功能可以通过spark.shuffle.consolidateFiles=true来开启。</p>

<h2>Shuffle Read</h2>

<p>先看一张包含 ShuffleDependency 的物理执行图，来自 reduceByKey：</p>

<p><img src="/images/blog/31-reduceByKeyStage.png"></p>

<p>很自然地，要计算 ShuffleRDD 中的数据，必须先把 MapPartitionsRDD 中的数据 fetch 过来。那么问题就来了：</p>

<ul>
<li>在什么时候 fetch，parent stage 中的一个 ShuffleMapTask 执行完还是等全部 ShuffleMapTasks 执行完？</li>
<li>边 fetch 边处理还是一次性 fetch 完再处理？</li>
<li>fetch 来的数据存放到哪里？</li>
<li>怎么获得要 fetch 的数据的存放位置？</li>
</ul>


<p>依次解答如下。</p>

<h3>在什么时候 fetch？</h3>

<p>当 parent stage 的所有 ShuffleMapTasks 结束后再 fetch。</p>

<p>理论上讲一个 ShuffleMapTask 结束后就可以 fetch，但是为了迎合 stage 的概念（即一个 stage 如果其 parent stages 没有执行完，自己是不能被提交执行的），还是选择全部 ShuffleMapTasks 执行完再去 fetch。</p>

<p>因为 fetch 来的 FileSegments 要先在内存做缓冲，所以一次 fetch 的 FileSegments 总大小不能太大。Spark 规定这个缓冲界限不能超过 spark.reducer.maxMbInFlight，这里用 softBuffer 表示，默认大小为 48MB。</p>

<p>一个 softBuffer 里面一般包含多个 FileSegment，但如果某个 FileSegment 特别大的话，这一个就可以填满甚至超过 softBuffer 的界限。</p>

<h3>边 fetch 边处理还是一次性 fetch 完再处理？</h3>

<p>边 fetch 边处理。</p>

<p>本质上，MapReduce shuffle 阶段就是边 fetch 边使用 combine() 进行处理，只是 combine() 处理的是部分数据。</p>

<p>MapReduce 为了让进入 reduce() 的 records 有序，必须等到全部数据都 shuffle-sort 后再开始 reduce()。</p>

<p>因为 Spark 不要求 shuffle 后的数据全局有序，因此没必要等到全部数据 shuffle 完成后再处理。那么如何实现边 shuffle 边处理，而且流入的 records 是无序的？</p>

<p>答案是使用可以 aggregate 的数据结构，比如 HashMap。</p>

<p>每 shuffle 得到（从缓冲的 FileSegment 中 deserialize 出来）一个 record，直接将其放进 HashMap 里面。</p>

<p>如果该 HashMap 已经存在相应的 Key，那么直接进行 aggregate 也就是 func(hashMap.get(Key), Value)。</p>

<p>比如上面 WordCount 例子中的 func 就是 hashMap.get(Key) ＋ Value，并将 func 的结果重新 put(key) 到 HashMap 中去。</p>

<p>这个 func 功能上相当于 reduce()，但实际处理数据的方式与 MapReduce reduce() 有差别，差别相当于下面两段程序的差别。</p>

<pre><code class="java">  // MapReduce
  reduce(K key, Iterable&lt;V&gt; values) { 
      result = process(key, values)
      return result    
  }

  // Spark
  reduce(K key, Iterable&lt;V&gt; values) {
      result = null 
      for (V value : values) 
          result  = func(result, value)
      return result
  }
</code></pre>

<p>MapReduce 可以在 process 函数里面可以定义任何数据结构，也可以将部分或全部的 values 都 cache 后再进行处理，非常灵活。</p>

<p>而 Spark 中的 func 的输入参数是固定的，一个是上一个 record 的处理结果，另一个是当前读入的 record，它们经过 func 处理后的结果被下一个 record 处理时使用。</p>

<p>因此一些算法比如求平均数，在 process 里面很好实现，直接sum(values)/values.length，而在 Spark 中 func 可以实现sum(values)，但不好实现/values.length。更多的 func 将会在下面的章节细致分析。</p>

<h3>fetch 来的数据存放到哪里？</h3>

<p>刚 fetch 来的 FileSegment 存放在 softBuffer 缓冲区，经过处理后的数据放在内存 + 磁盘上。</p>

<p>这里我们主要讨论处理后的数据，可以灵活设置这些数据是“只用内存”还是“内存＋磁盘”。</p>

<p>如果spark.shuffle.spill = false就只用内存。</p>

<p>内存使用的是AppendOnlyMap ，类似 Java 的HashMap，内存＋磁盘使用的是ExternalAppendOnlyMap，如果内存空间不足时，ExternalAppendOnlyMap可以将 records 进行 sort 后 spill 到磁盘上，等到需要它们的时候再进行归并，后面会详解。</p>

<p>使用“内存＋磁盘”的一个主要问题就是如何在两者之间取得平衡？</p>

<p>在 Hadoop MapReduce 中，默认将 reducer 的 70% 的内存空间用于存放 shuffle 来的数据，等到这个空间利用率达到 66% 的时候就开始 merge-combine()-spill。</p>

<p>在 Spark 中，也适用同样的策略，一旦 ExternalAppendOnlyMap 达到一个阈值就开始 spill，具体细节下面会讨论。</p>

<h3>怎么获得要 fetch 的数据的存放位置？</h3>

<p>在上一章讨论物理执行图中的 stage 划分的时候，我们强调 “一个 ShuffleMapStage 形成后，会将该 stage 最后一个 final RDD 注册到 MapOutputTrackerMaster.registerShuffle(shuffleId, rdd.partitions.size)，这一步很重要，因为 shuffle 过程需要 MapOutputTrackerMaster 来指示 ShuffleMapTask 输出数据的位置”。</p>

<p>因此，reducer 在 shuffle 的时候是要去 driver 里面的 MapOutputTrackerMaster 询问 ShuffleMapTask 输出的数据位置的。</p>

<p>每个 ShuffleMapTask 完成时会将 FileSegment 的存储位置信息汇报给 MapOutputTrackerMaster。</p>

<p>至此，我们已经讨论了 shuffle write 和 shuffle read 设计的核心思想、算法及某些实现。接下来，我们深入一些细节来讨论。</p>

<h2>典型算子实现</h2>

<h3>reduceByKey(func)</h3>

<p>上面初步介绍了 reduceByKey() 是如何实现边 fetch 边 reduce() 的。需要注意的是虽然 Example(WordCount) 中给出了各个 RDD 的内容，但一个 partition 里面的 records 并不是同时存在的。比如在 ShuffledRDD 中，每 fetch 来一个 record 就立即进入了 func 进行处理。MapPartitionsRDD 中的数据是 func 在全部 records 上的处理结果。从 record 粒度上来看，reduce() 可以表示如下：</p>

<p><img src="/images/blog/32-reduceByKeyRecord.png"></p>

<p>可以看到，fetch 来的 records 被逐个 aggreagte 到 HashMap 中，等到所有 records 都进入 HashMap，就得到最后的处理结果。唯一要求是 func 必须是 commulative 的（参见上面的 Spark 的 reduce() 的代码）。</p>

<p>ShuffledRDD 到 MapPartitionsRDD 使用的是 mapPartitionsWithContext 操作。</p>

<p>为了减少数据传输量，MapReduce 可以在 map 端先进行 combine()，其实在 Spark 也可以实现，只需要将上图 ShuffledRDD => MapPartitionsRDD 的 mapPartitionsWithContext 在 ShuffleMapStage 中也进行一次即可，比如 reduceByKey 例子中 ParallelCollectionRDD => MapPartitionsRDD 完成的就是 map 端的 combine()。</p>

<p>对比 MapReduce 的 map()-reduce() 和 Spark 中的 reduceByKey()：</p>

<p>map 端的区别：map() 没有区别。对于 combine()，MapReduce 先 sort 再 combine()，Spark 直接在 HashMap 上进行 combine()。
reduce 端区别：MapReduce 的 shuffle 阶段先 fetch 数据，数据量到达一定规模后 combine()，再将剩余数据 merge-sort 后 reduce()，reduce() 非常灵活。Spark 边 fetch 边 reduce()（在 HashMap 上执行 func），因此要求 func 符合 commulative 的特性。
从内存利用上来对比：</p>

<p>map 端区别：MapReduce 需要开一个大型环形缓冲区来暂存和排序 map() 的部分输出结果，但 combine() 不需要额外空间（除非用户自己定义）。 Spark 需要 HashMap 内存数据结构来进行 combine()，同时输出 records 到磁盘上时也需要一个小的 buffer（bucket）。
reduce 端区别：MapReduce 需要一部分内存空间来存储 shuffle 过来的数据，combine() 和 reduce() 不需要额外空间，因为它们的输入数据分段有序，只需归并一下就可以得到。在 Spark 中，fetch 时需要 softBuffer，处理数据时如果只使用内存，那么需要 HashMap 来持有处理后的结果。如果使用内存＋磁盘，那么在 HashMap 存放一部分处理后的数据。</p>

<h3>groupByKey(numPartitions)</h3>

<p>ShuffleGroupByKey</p>

<p>与 reduceByKey() 流程一样，只是 func 变成 result = result ++ record.value，功能是将每个 key 对应的所有 values 链接在一起。result 来自 hashMap.get(record.key)，计算后的 result 会再次被 put 到 hashMap 中。与 reduceByKey() 的区别就是 groupByKey() 没有 map 端的 combine()。对于 groupByKey() 来说 map 端的 combine() 只是减少了重复 Key 占用的空间，如果 key 重复率不高，没必要 combine()，否则，最好能够 combine()。</p>

<p><img src="/images/blog/37-ShuffleGroupByKey.png"></p>

<h3>distinct(numPartitions)</h3>

<p>ShuffleDistinct</p>

<p>与 reduceByKey() 流程一样，只是 func 变成 result = result == null? record.value : result，如果 HashMap 中没有该 record 就将其放入，否则舍弃。与 reduceByKey() 相同，在map 端存在 combine()。</p>

<p><img src="/images/blog/33-ShuffleDistinct.png"></p>

<h3>cogroup(otherRDD, numPartitions)</h3>

<p>ShuffleCoGroup</p>

<p>CoGroupedRDD 可能有 0 个、1 个或者多个 ShuffleDependency。但并不是要为每一个 ShuffleDependency 建立一个 HashMap，而是所有的 Dependency 共用一个 HashMap。与 reduceByKey() 不同的是，HashMap 在 CoGroupedRDD 的 compute() 中建立，而不是在 mapPartitionsWithContext() 中建立。</p>

<p>粗线表示的 task 首先 new 出一个 Array[ArrayBuffer(), ArrayBuffer()]，ArrayBuffer() 的个数与参与 cogroup 的 RDD 个数相同。func 的逻辑是这样的：每当从 RDD a 中 shuffle 过来一个 \ record 就将其添加到 hashmap.get(Key) 对应的 Array 中的第一个 ArrayBuffer() 中，每当从 RDD b 中 shuffle 过来一个 record，就将其添加到对应的 Array 中的第二个 ArrayBuffer()。</p>

<p><img src="/images/blog/34-ShuffleCoGroup.png"></p>

<p>CoGroupedRDD => MappedValuesRDD 对应 mapValues() 操作，就是将 [ArrayBuffer(), ArrayBuffer()] 变成 [Iterable[V], Iterable[W]]。</p>

<h3>intersection(otherRDD) 和 join(otherRDD, numPartitions)</h3>

<p><img src="/images/blog/35-ShuffleIntersection.png"></p>

<p>join 这两个操作中均使用了 cogroup，所以 shuffle 的处理方式与 cogroup 一样。</p>

<p><img src="/images/blog/36-ShuffleJoin.png"></p>

<h3>sortByKey(ascending, numPartitions)</h3>

<p><img src="/images/blog/38-ShuffleSortByKey.png"></p>

<p>sortByKey() 中 ShuffledRDD => MapPartitionsRDD 的处理逻辑与 reduceByKey() 不太一样，没有使用 HashMap 和 func 来处理 fetch 过来的 records。</p>

<p>sortByKey() 中 ShuffledRDD => MapPartitionsRDD 的处理逻辑是：将 shuffle 过来的一个个 record 存放到一个 Array 里，然后按照 Key 来对 Array 中的 records 进行 sort。</p>

<h3>coalesce(numPartitions, shuffle = true)</h3>

<p><img src="/images/blog/41-ShuffleCoalesce.png"></p>

<p>coalesce() 虽然有 ShuffleDependency，但不需要对 shuffle 过来的 records 进行 aggregate，所以没有建立 HashMap。每 shuffle 一个 record，就直接流向 CoalescedRDD，进而流向 MappedRDD 中。</p>

<h2>基础数据结构</h2>

<p>HashMap 是 Spark shuffle read 过程中频繁使用的、用于 aggregate 的数据结构。Spark 设计了两种：
- 一种是全内存的 AppendOnlyMap
- 另一种是内存＋磁盘的 ExternalAppendOnlyMap。</p>

<p>下面我们来分析一下两者特性及内存使用情况。</p>

<h3>AppendOnlyMap</h3>

<p>AppendOnlyMap 的官方介绍是 A simple open hash table optimized for the append-only use case, where keys are never removed, but the value for each key may be changed。意思是类似 HashMap，但没有remove(key)方法。其实现原理很简单，开一个大 Object 数组，蓝色部分存储 Key，白色部分存储 Value。如下图：</p>

<p><img src="/images/blog/40-appendonlymap.png"></p>

<p>当要 put(K, V) 时，先 hash(K) 找存放位置，如果存放位置已经被占用，就使用 Quadratic probing 探测方法来找下一个空闲位置。对于图中的 K6 来说，第三次查找找到 K4 后面的空闲位置，放进去即可。get(K6) 的时候类似，找三次找到 K6，取出紧挨着的 V6，与先来的 value 做 func，结果重新放到 V6 的位置。</p>

<p>迭代 AppendOnlyMap 中的元素的时候，从前到后扫描输出。</p>

<p>如果 Array 的利用率达到 70%，那么就扩张一倍，并对所有 key 进行 rehash 后，重新排列每个 key 的位置。</p>

<p>AppendOnlyMap 还有一个 destructiveSortedIterator(): Iterator[(K, V)] 方法，可以返回 Array 中排序后的 (K, V) pairs。实现方法很简单：先将所有 (K, V) pairs compact 到 Array 的前端，并使得每个 (K, V) 占一个位置（原来占两个），之后直接调用 Array.sort() 排序，不过这样做会破坏数组（key 的位置变化了）。</p>

<h3>ExternalAppendOnlyMap</h3>

<p>相比 AppendOnlyMap，ExternalAppendOnlyMap 的实现略复杂，但逻辑其实很简单，类似 Hadoop MapReduce 中的 shuffle-merge-combine-sort 过程：</p>

<p>ExternalAppendOnlyMap 持有一个 AppendOnlyMap，shuffle 来的一个个 (K, V) record 先 insert 到 AppendOnlyMap 中，insert 过程与原始的 AppendOnlyMap 一模一样。</p>

<p>如果 AppendOnlyMap 快被装满时检查一下内存剩余空间是否可以够扩展，够就直接在内存中扩展，不够就 sort 一下 AppendOnlyMap，将其内部所有 records 都 spill 到磁盘上。</p>

<p><img src="/images/blog/39-ExternalAppendOnlyMap.png"></p>

<p>图中 spill 了 4 次，每次 spill 完在磁盘上生成一个 spilledMap 文件，然后重新 new 出来一个 AppendOnlyMap。</p>

<p>最后一个 (K, V) record insert 到 AppendOnlyMap 后，表示所有 shuffle 来的 records 都被放到了 ExternalAppendOnlyMap 中，但不表示 records 已经被处理完，因为每次 insert 的时候，新来的 record 只与 AppendOnlyMap 中的 records 进行 aggregate，并不是与所有的 records 进行 aggregate（一些 records 已经被 spill 到磁盘上了）。</p>

<p>因此当需要 aggregate 的最终结果时，需要对 AppendOnlyMap 和所有的 spilledMaps 进行全局 merge-aggregate。</p>

<p>全局 merge-aggregate 的流程也很简单：</p>

<p>先将 AppendOnlyMap 中的 records 进行 sort，形成 sortedMap。</p>

<p>然后利用 DestructiveSortedIterator 和 DiskMapIterator 分别从 sortedMap 和各个 spilledMap 读出一部分数据（StreamBuffer）放到 mergeHeap 里面。StreamBuffer 里面包含的 records 需要具有相同的 hash(key)，所以图中第一个 spilledMap 只读出前三个 records 进入 StreamBuffer。</p>

<p>mergeHeap 顾名思义就是使用堆排序不断提取出 hash(firstRecord.Key) 相同的 StreamBuffer，并将其一个个放入 mergeBuffers 中，放入的时候与已经存在于 mergeBuffers 中的 StreamBuffer 进行 merge-combine，第一个被放入 mergeBuffers 的 StreamBuffer 被称为 minBuffer，那么 minKey 就是 minBuffer 中第一个 record 的 key。</p>

<p>当 merge-combine 的时候，与 minKey 相同的 records 被 aggregate 一起，然后输出。整个 merge-combine 在 mergeBuffers 中结束后，StreamBuffer 剩余的 records 随着 StreamBuffer 重新进入 mergeHeap。</p>

<p>一旦某个 StreamBuffer 在 merge-combine 后变为空（里面的 records 都被输出了），那么会使用 DestructiveSortedIterator 或 DiskMapIterator 重新装填 hash(key) 相同的 records，然后再重新进入 mergeHeap。</p>

<p>整个 insert-merge-aggregate 的过程有三点需要进一步探讨一下：</p>

<p>内存剩余空间检测</p>

<p>与 Hadoop MapReduce 规定 reducer 中 70% 的空间可用于 shuffle-sort 类似，Spark 也规定 executor 中 spark.shuffle.memoryFraction * spark.shuffle.safetyFraction 的空间（默认是0.3 * 0.8）可用于 ExternalOnlyAppendMap。</p>

<p>Spark 略保守是不是？更保守的是这 24％ 的空间不是完全用于一个 ExternalOnlyAppendMap 的，而是由在 executor 上同时运行的所有 reducer 共享的。</p>

<p>为此，exectuor 专门持有一个 ShuffleMemroyMap: HashMap[threadId, occupiedMemory] 来监控每个 reducer 中 ExternalOnlyAppendMap 占用的内存量。</p>

<p>每当 AppendOnlyMap 要扩展时，都会计算 ShuffleMemroyMap 持有的所有 reducer 中的 AppendOnlyMap 已占用的内存 ＋ 扩展后的内存 是会否会大于内存限制，大于就会将 AppendOnlyMap spill 到磁盘。</p>

<p>有一点需要注意的是前 1000 个 records 进入 AppendOnlyMap 的时候不会启动是否要 spill 的检查，需要扩展时就直接在内存中扩展。</p>

<p>AppendOnlyMap 大小估计</p>

<p>为了获知 AppendOnlyMap 占用的内存空间，可以在每次扩展时都将 AppendOnlyMap reference 的所有 objects 大小都算一遍，然后加和，但这样做非常耗时。</p>

<p>所以 Spark 设计了粗略的估算算法，算法时间复杂度是 O(1)，核心思想是利用 AppendOnlyMap 中每次 insert-aggregate record 后 result 的大小变化及一共 insert 的 records 的个数来估算大小，具体见 SizeTrackingAppendOnlyMap 和 SizeEstimator。</p>

<p>Spill 过程</p>

<p>与 shuffle write 一样，在 spill records 到磁盘上的时候，会建立一个 buffer 缓冲区，大小仍为 spark.shuffle.file.buffer.kb ，默认是 32KB。</p>

<p>另外，由于 serializer 也会分配缓冲区用于序列化和反序列化，所以如果一次 serialize 的 records 过多的话缓冲区会变得很大。Spark 限制每次 serialize 的 records 个数为 spark.shuffle.spill.batchSize，默认是 10000。</p>

<h2>参考资料</h2>

<p>通过本文的介绍可以发现，相比 MapReduce 固定的 shuffle-combine-merge-reduce 策略，Spark 更加灵活，会根据不同的 transformation() 的语义去设计不同的 shuffle-aggregate 策略，再加上不同的内存数据结构来混搭出合理的执行流程。</p>

<p>参考资料：</p>

<ul>
<li>Spark Shuffle过程：<a href="https://spark-internals.books.yourtion.com/markdown/4-shuffleDetails.html">https://spark-internals.books.yourtion.com/markdown/4-shuffleDetails.html</a></li>
<li>Spark Shuffle进化史：<a href="http://jerryshao.me/2014/01/04/spark-shuffle-detail-investigation/">http://jerryshao.me/2014/01/04/spark-shuffle-detail-investigation/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flink架构及工作原理介绍]]></title>
    <link href="http://lionheartwang.github.io/blog/2018/03/05/flink-framwork-introduction/"/>
    <updated>2018-03-05T00:54:42+08:00</updated>
    <id>http://lionheartwang.github.io/blog/2018/03/05/flink-framwork-introduction</id>
    <content type="html"><![CDATA[<p>本文整体介绍Apache Flink流计算框架的特性、概念、组件栈、架构及原理分析。</p>

<p>主要内容参考如下博客整理：</p>

<ul>
<li><a href="http://shiyanjun.cn/archives/1508.html">http://shiyanjun.cn/archives/1508.html</a></li>
</ul>


<!--More-->


<h2>Flink框架整体介绍</h2>

<p>Apache Flink是一个面向分布式数据流处理和批量数据处理的开源计算平台。</p>

<p>它能够基于同一个Flink运行时（Flink Runtime），提供支持流处理和批处理两种类型应用的功能。</p>

<p>现有的开源计算方案，会把流处理和批处理作为两种不同的应用类型，因为他们它们所提供的SLA是完全不相同的：</p>

<ul>
<li>流处理一般需要支持低延迟、Exactly-once保证</li>
<li>批处理需要支持高吞吐、高效处理</li>
</ul>


<p>所以在实现的时候通常是分别给出两套实现方法，或者通过一个独立的开源框架来实现其中每一种处理方案。</p>

<p>例如，实现批处理的开源方案有MapReduce、Tez、Crunch、Spark，实现流处理的开源方案有Samza、Storm。</p>

<p>Flink在实现流处理和批处理时，与传统的一些方案完全不同，它从另一个视角看待流处理和批处理，将二者统一起来：</p>

<ul>
<li>Flink是完全支持流处理，也就是说作为流处理看待时输入数据流是无界的；</li>
<li>批处理被作为一种特殊的流处理，只是它的输入数据流被定义为有界的。</li>
<li>基于同一个Flink运行时（Flink Runtime），分别提供了流处理和批处理API，而这两种API也是实现上层面向流处理、批处理类型应用框架的基础。</li>
</ul>


<h3>基本特性</h3>

<p>关于Flink所支持的特性，我这里只是通过分类的方式简单做一下梳理，涉及到具体的一些概念及其原理会在后面的部分做详细说明。</p>

<p>流处理特性</p>

<ul>
<li>支持高吞吐、低延迟、高性能的流处理</li>
<li>支持带有事件时间的窗口（Window）操作</li>
<li>支持有状态计算的Exactly-once语义</li>
<li>支持高度灵活的窗口（Window）操作，支持基于time、count、session，以及data-driven的窗口操作</li>
<li>支持具有Backpressure功能的持续流模型</li>
<li>支持基于轻量级分布式快照（Snapshot）实现的容错</li>
<li>一个运行时同时支持Batch on Streaming处理和Streaming处理</li>
<li>Flink在JVM内部实现了自己的内存管理</li>
<li>支持迭代计算</li>
<li>支持程序自动优化：避免特定情况下Shuffle、排序等昂贵操作，中间结果有必要进行缓存</li>
</ul>


<h3>API支持</h3>

<p>对Streaming数据类应用，提供DataStream API</p>

<p>对批处理类应用，提供DataSet API（支持Java/Scala）</p>

<h3>Libraries支持</h3>

<p>相关上层Library支持情况如下：</p>

<ul>
<li>支持机器学习（FlinkML）</li>
<li>支持图分析（Gelly）</li>
<li>支持关系数据处理（Table）</li>
<li>支持复杂事件处理（CEP）</li>
</ul>


<p>与其他外部系统对接支持如下：</p>

<ul>
<li>支持Flink on YARN</li>
<li>支持HDFS</li>
<li>支持来自Kafka的输入数据</li>
<li>支持Apache HBase</li>
<li>支持Hadoop程序</li>
<li>支持Tachyon</li>
<li>支持ElasticSearch</li>
<li>支持RabbitMQ</li>
<li>支持Apache Storm</li>
<li>支持S3</li>
<li>支持XtreemFS</li>
</ul>


<h2>基本概念</h2>

<h3>Stream &amp; Transformation &amp; Operator</h3>

<p>用户实现的Flink程序是由Stream和Transformation这两个基本构建块组成，其中Stream是一个中间结果数据，而Transformation是一个操作，它对一个或多个输入Stream进行计算处理，输出一个或多个结果Stream。</p>

<p>当一个Flink程序被执行的时候，它会被映射为Streaming Dataflow。</p>

<p>一个Streaming Dataflow是由一组Stream和Transformation Operator组成，它类似于一个DAG图，在启动的时候从一个或多个Source Operator开始，结束于一个或多个Sink Operator。</p>

<p>下面是一个由Flink程序映射为Streaming Dataflow的示意图，如下所示：</p>

<p><img src="/images/blog/11-flink-streaming-dataflow-example.png"></p>

<p>上图中，FlinkKafkaConsumer是一个Source Operator，map、keyBy、timeWindow、apply是Transformation Operator，RollingSink是一个Sink Operator。</p>

<h3>Parallel Dataflow</h3>

<p>在Flink中，程序天生是并行和分布式的：</p>

<ul>
<li>一个Stream可以被分成多个Stream分区（Stream Partitions），一个Operator可以被分成多个Operator Subtask，每一个Operator Subtask是在不同的线程中独立执行的。</li>
<li>一个Operator的并行度，等于Operator Subtask的个数，一个Stream的并行度总是等于生成它的Operator的并行度。</li>
</ul>


<p>有关Parallel Dataflow的实例，如下图所示：</p>

<p><img src="/images/blog/13-flink-parallel-dataflow.png"></p>

<p>上图Streaming Dataflow的并行视图中，展现了在两个Operator之间的Stream的两种模式：</p>

<h4>One-to-one模式</h4>

<p>比如从Source[1]到map()[1]，它保持了Source的分区特性（Partitioning）和分区内元素处理的有序性。</p>

<p>也就是说map()[1]的Subtask看到数据流中记录的顺序，与Source[1]中看到的记录顺序是一致的。</p>

<h4>Redistribution模式</h4>

<p>这种模式改变了输入数据流的分区。</p>

<p>比如从map()[1]、map()[2]到keyBy()/window()/apply()[1]、keyBy()/window()/apply()[2]，上游的Subtask向下游的多个不同的Subtask发送数据，改变了数据流的分区，这与实际应用所选择的Operator有关系。</p>

<p>另外，Source Operator对应2个Subtask，所以并行度为2，而Sink Operator的Subtask只有1个，故而并行度为1。</p>

<h3>Task &amp; Operator Chain</h3>

<p>在Flink分布式执行环境中，会将多个Operator Subtask串起来组成一个Operator Chain，实际上就是一个执行链。</p>

<p>每个执行链会在TaskManager上一个独立的线程中执行，如下图所示：</p>

<p><img src="/images/blog/14-flink-tasks-chains.png"></p>

<p>上图中上半部分表示的是一个Operator Chain，多个Operator通过Stream连接，而每个Operator在运行时对应一个Task。</p>

<p>图中下半部分是上半部分的一个并行版本，也就是对每一个Task都并行化为多个Subtask。</p>

<h3>Time &amp; Window</h3>

<p>Flink支持基于时间窗口操作，也支持基于数据的窗口操作，如下图所示：</p>

<p><img src="/images/blog/15-flink-window.png"></p>

<p>上图中，基于时间的窗口操作，在每个相同的时间间隔对Stream中的记录进行处理，通常各个时间间隔内的窗口操作处理的记录数不固定。</p>

<p>而基于数据驱动的窗口操作，可以在Stream中选择固定数量的记录作为一个窗口，对该窗口中的记录进行处理。</p>

<p>有关窗口操作的不同类型，可以分为如下几种：</p>

<ul>
<li>倾斜窗口（Tumbling Windows，记录没有重叠）</li>
<li>滑动窗口（Slide Windows，记录有重叠）</li>
<li>会话窗口（Session Windows）</li>
</ul>


<p>具体可以查阅相关资料。</p>

<p>在处理Stream中的记录时，记录中通常会包含各种典型的时间字段，Flink支持多种时间的处理，如下图所示：</p>

<p><img src="/images/blog/16-flink-event-ingestion-processing-time.png"></p>

<p>上图描述了在基于Flink的流处理系统中，各种不同的时间所处的位置和含义。</p>

<p>其中：</p>

<ul>
<li>Event Time表示事件创建时间</li>
<li>Ingestion Time表示事件进入到Flink Dataflow的时间</li>
<li>Processing Time表示某个Operator对事件进行处理事的本地系统时间（是在TaskManager节点上）。</li>
</ul>


<p>这里，谈一下基于Event Time进行处理的问题。</p>

<p>通常根据Event Time会给整个Streaming应用带来一定的延迟性，因为在一个基于事件的处理系统中，进入系统的事件可能会基于Event Time而发生乱序现象。</p>

<p>比如事件来源于外部的多个系统，为了增强事件处理吞吐量会将输入的多个Stream进行自然分区，每个Stream分区内部有序，但是要保证全局有序必须同时兼顾多个Stream分区的处理，设置一定的时间窗口进行暂存数据，当多个Stream分区基于Event Time排列对齐后才能进行延迟处理。</p>

<p>所以，设置的暂存数据记录的时间窗口越长，处理性能越差，甚至严重影响Stream处理的实时性。</p>

<p>有关基于时间的Streaming处理，可以参考官方文档，在Flink中借鉴了Google使用的WaterMark实现方式，可以查阅相关资料。</p>

<h2>基本架构</h2>

<p>Flink系统的架构与Spark类似，是一个基于Master-Slave风格的架构，如下图所示：</p>

<p><img src="/images/blog/17-flink-system-architecture.png"></p>

<p>Flink集群启动时，会启动一个JobManager进程、至少一个TaskManager进程。</p>

<p>在Local模式下，会在同一个JVM内部启动一个JobManager进程和TaskManager进程。</p>

<p>当Flink程序提交后，会创建一个Client来进行预处理，并转换为一个并行数据流，这是对应着一个Flink Job，从而可以被JobManager和TaskManager执行。</p>

<p>在实现上，Flink基于Actor实现了JobManager和TaskManager，所以JobManager与TaskManager之间的信息交换，都是通过事件的方式来进行处理。</p>

<p>如上图所示，Flink系统主要包含如下3个主要的进程：</p>

<h3>JobManager</h3>

<p>JobManager是Flink系统的协调者，它负责接收Flink Job，调度组成Job的多个Task的执行。</p>

<p>同时，JobManager还负责收集Job的状态信息，并管理Flink集群中从节点TaskManager。</p>

<p>JobManager所负责的各项管理功能，它接收到并处理的事件主要包括：</p>

<ul>
<li>RegisterTaskManager：在Flink集群启动的时候，TaskManager会向JobManager注册，如果注册成功，则JobManager会向TaskManager回复消息AcknowledgeRegistration。</li>
<li>SubmitJob：Flink程序内部通过Client向JobManager提交Flink Job，其中在消息SubmitJob中以JobGraph形式描述了Job的基本信息。</li>
<li>CancelJob：请求取消一个Flink Job的执行，CancelJob消息中包含了Job的ID，如果成功则返回消息CancellationSuccess，失败则返回消息CancellationFailure。</li>
<li>UpdateTaskExecutionState：TaskManager会向JobManager请求更新ExecutionGraph中的ExecutionVertex的状态信息，更新成功则返回true。</li>
<li>RequestNextInputSplit：运行在TaskManager上面的Task，请求获取下一个要处理的输入Split，成功则返回NextInputSplit。</li>
<li>JobStatusChanged：ExecutionGraph向JobManager发送该消息，用来表示Flink Job的状态发生的变化，例如：RUNNING、CANCELING、FINISHED等。</li>
</ul>


<h3>TaskManager</h3>

<p>TaskManager也是一个Actor，它是实际负责执行计算的Worker，在其上执行Flink Job的一组Task。</p>

<p>每个TaskManager负责管理其所在节点上的资源信息，如内存、磁盘、网络，在启动的时候将资源的状态向JobManager汇报。</p>

<p>TaskManager端可以分成两个阶段：</p>

<ul>
<li>注册阶段：TaskManager会向JobManager注册，发送RegisterTaskManager消息，等待JobManager返回AcknowledgeRegistration，然后TaskManager就可以进行初始化过程。</li>
<li>可操作阶段：该阶段TaskManager可以接收并处理与Task有关的消息，如SubmitTask、CancelTask、FailTask。</li>
</ul>


<p>如果TaskManager无法连接到JobManager，这是TaskManager就失去了与JobManager的联系，会自动进入“注册阶段”，只有完成注册才能继续处理Task相关的消息。</p>

<h3>Client</h3>

<p>当用户提交一个Flink程序时，会首先创建一个Client。</p>

<p>该Client首先会对用户提交的Flink程序进行预处理，并提交到Flink集群中处理，所以Client需要从用户提交的Flink程序配置中获取JobManager的地址，并建立到JobManager的连接，将Flink Job提交给JobManager。</p>

<p>Client会将用户提交的Flink程序组装一个JobGraph， 并且是以JobGraph的形式提交的。</p>

<p>一个JobGraph是一个Flink Dataflow，它由多个JobVertex组成的DAG。</p>

<p>其中，一个JobGraph包含了一个Flink程序的如下信息：JobID、Job名称、配置信息、一组JobVertex等。</p>

<h2>组件栈</h2>

<p>Flink是一个分层架构的系统，每一层所包含的组件都提供了特定的抽象，用来服务于上层组件。Flink分层的组件栈如下图所示：</p>

<p><img src="/images/blog/18-flink-component-stack.png"></p>

<p>下面，我们自下而上，分别针对每一层进行解释说明。</p>

<h3>Deployment层</h3>

<p>该层主要涉及了Flink的部署模式，Flink支持多种部署模式：</p>

<ul>
<li>本地、集群（Standalone/YARN）</li>
<li>云（GCE/EC2）</li>
<li>Standalone部署模式与Spark类似。</li>
</ul>


<p>这里，我们看一下Flink on YARN的部署模式，如下图所示：</p>

<p><img src="/images/blog/19-flink-on-yarn.png"></p>

<p>了解YARN的话，对上图的原理非常熟悉，实际Flink也实现了满足在YARN集群上运行的各个组件：</p>

<ul>
<li>Flink YARN Client负责与YARN RM通信协商资源请求</li>
<li>Flink JobManager和Flink TaskManager分别申请到Container去运行各自的进程。</li>
</ul>


<p>通过上图可以看到，YARN AM与Flink JobManager在同一个Container中，这样AM可以知道Flink JobManager的地址，从而AM可以申请Container去启动Flink TaskManager。</p>

<p>待Flink成功运行在YARN集群上，Flink YARN Client就可以提交Flink Job到Flink JobManager，并进行后续的映射、调度和计算处理。</p>

<h3>Runtime层</h3>

<p>Runtime层提供了支持Flink计算的全部核心实现，比如：</p>

<ul>
<li>支持分布式Stream处理</li>
<li>JobGraph到ExecutionGraph的映射、调度等等，为上层API层提供基础服务。</li>
</ul>


<h3>API层</h3>

<p>API层主要实现了面向无界Stream的流处理和面向Batch的批处理API。</p>

<p>其中面向流处理对应DataStream API，面向批处理对应DataSet API。</p>

<h3>Libraries层</h3>

<p>该层也可以称为Flink应用框架层，根据API层的划分，在API层之上构建的满足特定应用的实现计算框架，也分别对应于面向流处理和面向批处理两类。</p>

<ul>
<li>面向流处理支持：CEP（复杂事件处理）、基于SQL-like的操作（基于Table的关系操作）；</li>
<li>面向批处理支持：FlinkML（机器学习库）、Gelly（图处理）。</li>
</ul>


<h2>内部原理</h2>

<h3>容错机制</h3>

<p>Flink基于Checkpoint机制实现容错，它的原理是不断地生成分布式Streaming数据流Snapshot。</p>

<p>在流处理失败时，通过这些Snapshot可以恢复数据流处理。</p>

<h4>Barrier</h4>

<p>理解Flink的容错机制，首先需要了解一下Barrier这个概念：</p>

<ul>
<li>Stream Barrier是Flink分布式Snapshotting中的核心元素，它会作为数据流的记录被同等看待，被插入到数据流中，将数据流中记录的进行分组，并沿着数据流的方向向前推进。</li>
<li>每个Barrier会携带一个Snapshot ID，属于该Snapshot的记录会被推向该Barrier的前方。因为Barrier非常轻量，所以并不会中断数据流。带有Barrier的数据流。</li>
</ul>


<p>如下图所示：</p>

<p><img src="/images/blog/20-flink-stream-barriers.png"></p>

<p>基于上图，我们通过如下要点来说明：</p>

<ul>
<li>出现一个Barrier，在该Barrier之前出现的记录都属于该Barrier对应的Snapshot，在该Barrier之后出现的记录属于下一个Snapshot。</li>
<li>来自不同Snapshot多个Barrier可能同时出现在数据流中，也就是说同一个时刻可能并发生成多个Snapshot。</li>
<li>当一个中间（Intermediate）Operator接收到一个Barrier后，它会发送Barrier到属于该Barrier的Snapshot的数据流中，等到Sink Operator接收到该Barrier后会向Checkpoint Coordinator确认该Snapshot。</li>
<li>直到所有的Sink Operator都确认了该Snapshot，才被认为完成了该Snapshot。</li>
</ul>


<p>这里还需要强调的是，Snapshot并不仅仅是对数据流做了一个状态的Checkpoint，它也包含了一个Operator内部所持有的状态，这样才能够在保证在流处理系统失败时能够正确地恢复数据流处理。</p>

<p>也就是说，如果一个Operator包含任何形式的状态，这种状态必须是Snapshot的一部分。</p>

<h4>Operator State</h4>

<p>Operator的状态包含两种：</p>

<ul>
<li>一种是系统状态，一个Operator进行计算处理的时候需要对数据进行缓冲，所以数据缓冲区的状态是与Operator相关联的，以窗口操作的缓冲区为例，Flink系统会收集或聚合记录数据并放到缓冲区中，直到该缓冲区中的数据被处理完成；</li>
<li>另一种是用户自定义状态（状态可以通过转换函数进行创建和修改），它可以是函数中的Java对象这样的简单变量，也可以是与函数相关的Key/Value状态。</li>
</ul>


<p>对于具有轻微状态的Streaming应用，会生成非常轻量的Snapshot而且非常频繁，但并不会影响数据流处理性能。</p>

<p>Streaming应用的状态会被存储到一个可配置的存储系统中，例如HDFS。</p>

<p>在一个Checkpoint执行过程中，存储的状态信息及其交互过程，如下图所示：</p>

<p><img src="/images/blog/21-flink-checkpointing.png"></p>

<h4>Stream Aligning</h4>

<p>在Checkpoint过程中，还有一个比较重要的操作——Stream Aligning。</p>

<p>当Operator接收到多个输入的数据流时，需要在Snapshot Barrier中对数据流进行排列对齐，如下图所示：</p>

<p><img src="/images/blog/22-flink-stream-aligning.png"></p>

<p>具体排列过程如下：</p>

<ul>
<li>Operator从一个incoming Stream接收到Snapshot Barrier n，然后暂停处理，直到其它的incoming Stream的Barrier n（否则属于2个Snapshot的记录就混在一起了）到达该Operator。</li>
<li>接收到Barrier n的Stream被临时搁置，来自这些Stream的记录不会被处理，而是被放在一个Buffer中</li>
<li>一旦最后一个Stream接收到Barrier n，Operator会emit所有暂存在Buffer中的记录，然后向Checkpoint Coordinator发送Snapshot n</li>
<li>继续处理来自多个Stream的记录</li>
</ul>


<p>基于Stream Aligning操作能够实现Exactly Once语义，但是也会给流处理应用带来延迟，因为为了排列对齐Barrier，会暂时缓存一部分Stream的记录到Buffer中。</p>

<p>尤其是在数据流并行度很高的场景下可能更加明显，通常以最迟对齐Barrier的一个Stream为处理Buffer中缓存记录的时刻点。</p>

<p>在Flink中，提供了一个开关，选择是否使用Stream Aligning，如果关掉则Exactly Once会变成At least once。</p>

<h3>调度机制</h3>

<p>在JobManager端，会接收到Client提交的JobGraph形式的Flink Job。</p>

<p>JobManager会将一个JobGraph转换映射为一个ExecutionGraph，如下图所示：</p>

<p><img src="/images/blog/23-flink-job-and-execution-graph.png"></p>

<p>通过上图可以看出：</p>

<ul>
<li>JobGraph是一个Job的用户逻辑视图表示，将一个用户要对数据流进行的处理表示为单个DAG图（对应于JobGraph）</li>
<li>DAG图由顶点（JobVertex）和中间结果集（IntermediateDataSet）组成，</li>
<li>其中JobVertex表示了对数据流进行的转换操作，比如map、flatMap、filter、keyBy等操作，而IntermediateDataSet是由上游的JobVertex所生成，同时作为下游的JobVertex的输入。</li>
</ul>


<p>而ExecutionGraph是JobGraph的并行表示，也就是实际JobManager调度一个Job在TaskManager上运行的逻辑视图。</p>

<p>它也是一个DAG图，是由ExecutionJobVertex、IntermediateResult（或IntermediateResultPartition）组成</p>

<p>ExecutionJobVertex实际对应于JobGraph图中的JobVertex，只不过在ExecutionJobVertex内部是一种并行表示，由多个并行的ExecutionVertex所组成。</p>

<p>另外，这里还有一个重要的概念，就是Execution，它是一个ExecutionVertex的一次运行Attempt。</p>

<p>也就是说，一个ExecutionVertex可能对应多个运行状态的Execution。</p>

<p>比如，一个ExecutionVertex运行产生了一个失败的Execution，然后还会创建一个新的Execution来运行，这时就对应这个2次运行Attempt。</p>

<p>每个Execution通过ExecutionAttemptID来唯一标识，在TaskManager和JobManager之间进行Task状态的交换都是通过ExecutionAttemptID来实现的。</p>

<p>下面看一下，在物理上进行调度，基于资源的分配与使用的一个例子，来自官网，如下图所示：</p>

<p><img src="/images/blog/24-flink-scheduled-task-slots.png"></p>

<p>说明如下：</p>

<ul>
<li>左上子图：有2个TaskManager，每个TaskManager有3个Task Slot</li>
<li>左下子图：一个Flink Job，逻辑上包含了1个data source、1个MapFunction、1个ReduceFunction，对应一个JobGraph</li>
<li>左下子图：用户提交的Flink Job对各个Operator进行的配置——data source的并行度设置为4，MapFunction的并行度也为4，ReduceFunction的并行度为3，在JobManager端对应于ExecutionGraph</li>
<li>右上子图：TaskManager 1上，有2个并行的ExecutionVertex组成的DAG图，它们各占用一个Task Slot</li>
<li>右下子图：TaskManager 2上，也有2个并行的ExecutionVertex组成的DAG图，它们也各占用一个Task Slot</li>
</ul>


<p>在2个TaskManager上运行的4个Execution是并行执行的</p>

<h3>迭代机制</h3>

<p>机器学习和图计算应用，都会使用到迭代计算。</p>

<p>Flink通过在迭代Operator中定义Step函数来实现迭代算法，这种迭代算法包括Iterate和Delta Iterate两种类型，在实现上它们反复地在当前迭代状态上调用Step函数，直到满足给定的条件才会停止迭代。</p>

<p>下面，对Iterate和Delta Iterate两种类型的迭代算法原理进行说明：</p>

<h4>Iterate</h4>

<p>Iterate Operator是一种简单的迭代形式：</p>

<ul>
<li>每一轮迭代，Step函数的输入或者是输入的整个数据集，或者是上一轮迭代的结果，通过该轮迭代计算出下一轮计算所需要的输入（也称为Next Partial Solution）</li>
<li>满足迭代的终止条件后，会输出最终迭代结果，具体执行流程如下图所示：</li>
</ul>


<p><img src="/images/blog/25-flink-iterations-iterate-operator.png"></p>

<p>Step函数在每一轮迭代中都会被执行，它可以是由map、reduce、join等Operator组成的数据流。</p>

<p>下面通过官网给出的一个例子来说明Iterate Operator，非常简单直观，如下图所示：</p>

<p><img src="/images/blog/26-flink-iterations-iterate-operator-example.png"></p>

<p>上面迭代过程中，输入数据为1到5的数字，Step函数就是一个简单的map函数，会对每个输入的数字进行加1处理，而Next Partial Solution对应于经过map函数处理后的结果。</p>

<p>比如第一轮迭代，对输入的数字1加1后结果为2，对输入的数字2加1后结果为3，直到对输入数字5加1后结果为变为6，这些新生成结果数字2~6会作为第二轮迭代的输入。</p>

<p>迭代终止条件为进行10轮迭代，则最终的结果为11~15。</p>

<h4>Delta Iterate</h4>

<p>Delta Iterate Operator实现了增量迭代，它的实现原理如下图所示：</p>

<p><img src="/images/blog/27-flink-iterations-delta-iterate-operator.png"></p>

<p>基于Delta Iterate Operator实现增量迭代，它有2个输入：</p>

<ul>
<li>其中一个是初始Workset，表示输入待处理的增量Stream数据</li>
<li>另一个是初始Solution Set，它是经过Stream方向上Operator处理过的结果。</li>
</ul>


<p>第一轮迭代会将Step函数作用在初始Workset上，得到的计算结果Workset作为下一轮迭代的输入，同时还要增量更新初始Solution Set。</p>

<p>如果反复迭代知道满足迭代终止条件，最后会根据Solution Set的结果，输出最终迭代结果。</p>

<p>比如，我们现在已知一个Solution集合中保存的是，已有的商品分类大类中购买量最多的商品。</p>

<p>而Workset输入的是来自线上实时交易中最新达成购买的商品的人数，经过计算会生成新的商品分类大类中商品购买量最多的结果。</p>

<p>如果某些大类中商品购买量突然增长，它需要更新Solution Set中的结果（原来购买量最多的商品，经过增量迭代计算，可能已经不是最多），最后会输出最终商品分类大类中购买量最多的商品结果集合。</p>

<p>更详细的例子，可以参考官网给出的“Propagate Minimum in Graph”，这里不再累述。</p>

<h3>Backpressure监控机制</h3>

<p>Backpressure在流式计算系统中会比较受到关注。</p>

<p>因为在一个Stream上进行处理的多个Operator之间，它们处理速度和方式可能非常不同，所以就存在上游Operator如果处理速度过快，下游Operator处可能机会堆积Stream记录，严重会造成处理延迟或下游Operator负载过重而崩溃（有些系统可能会丢失数据）。</p>

<p>因此，对下游Operator处理速度跟不上的情况，如果下游Operator能够将自己处理状态传播给上游Operator，使得上游Operator处理速度慢下来就会缓解上述问题，比如通过告警的方式通知现有流处理系统存在的问题。</p>

<p>Flink Web界面上提供了对运行Job的Backpressure行为的监控，它通过使用Sampling线程对正在运行的Task进行堆栈跟踪采样来实现，具体实现方式如下图所示：</p>

<p><img src="/images/blog/28-flink-back-pressure-sampling.png"></p>

<p>JobManager会反复调用一个Job的Task运行所在线程的Thread.getStackTrace()。</p>

<p>默认情况下，JobManager会每间隔50ms触发对一个Job的每个Task依次进行100次堆栈跟踪调用，根据调用调用结果来确定Backpressure，Flink是通过计算得到一个比值（Radio）来确定当前运行Job的Backpressure状态。</p>

<p>在Web界面上可以看到这个Radio值，它表示在一个内部方法调用中阻塞（Stuck）的堆栈跟踪次数，例如，radio=0.01，表示100次中仅有1次方法调用阻塞。</p>

<p>Flink目前定义了如下Backpressure状态：</p>

<ul>
<li>OK: 0 &lt;= Ratio &lt;= 0.10</li>
<li>LOW: 0.10 &lt; Ratio &lt;= 0.5</li>
<li>HIGH: 0.5 &lt; Ratio &lt;= 1</li>
</ul>


<p>另外，Flink还提供了3个参数来配置Backpressure监控行为：</p>

<table>
<thead>
<tr>
<th> 参数名称 </th>
<th style="text-align:left;"> 默认值 </th>
<th style="text-align:left;"> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td> jobmanager.web.backpressure.refresh-interval </td>
<td style="text-align:left;"> 60000 </td>
<td style="text-align:left;"> 默认1分钟，表示采样统计结果刷新时间间隔 </td>
</tr>
<tr>
<td> jobmanager.web.backpressure.num-samples </td>
<td style="text-align:left;"> 100 </td>
<td style="text-align:left;"> 评估Backpressure状态，所使用的堆栈跟踪调用次数 </td>
</tr>
<tr>
<td> jobmanager.web.backpressure.delay-between-samples </td>
<td style="text-align:left;"> 50 </td>
<td style="text-align:left;"> 默认50毫秒，表示对一个Job的每个Task依次调用的时间间隔 </td>
</tr>
</tbody>
</table>


<p>通过上面个定义的Backpressure状态，以及调整相应的参数，可以确定当前运行的Job的状态是否正常，并且保证不影响JobManager提供服务。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[搭建Ray集群步骤]]></title>
    <link href="http://lionheartwang.github.io/blog/2018/02/08/da-jian-rayji-qun-bu-zou/"/>
    <updated>2018-02-08T10:29:16+08:00</updated>
    <id>http://lionheartwang.github.io/blog/2018/02/08/da-jian-rayji-qun-bu-zou</id>
    <content type="html"><![CDATA[<p>本文介绍如何搭建Ray 0.3集群环境。</p>

<p>可参考官方文档：</p>

<ul>
<li><a href="https://ray.readthedocs.io/en/latest/using-ray-on-a-cluster.html">https://ray.readthedocs.io/en/latest/using-ray-on-a-cluster.html</a></li>
</ul>


<!-- More -->


<h2>安装Ray</h2>

<p>首先在每台机器上安装如下组件。</p>

<h3>安装Anaconda</h3>

<p>首先安装Anaconda，下载：</p>

<ul>
<li>Anaconda2-4.3.0-Linux-x86_64.sh</li>
</ul>


<p>按提示执行安装即可。</p>

<h3>安装Ray依赖</h3>

<p>ray依赖如下库：</p>

<ul>
<li>six (>=1.0.0)</li>
<li>redis</li>
<li>pytest</li>
<li>psutil</li>
<li>numpy</li>
<li>funcsigs</li>
<li>flatbuffers</li>
<li>colorama</li>
<li>cloudpickle (==0.5.2)</li>
<li>click</li>
</ul>


<p>注意：</p>

<ul>
<li>如果机器环境通pip源则直接pip install即可。</li>
<li>如果不通可以在 <a href="https://pypi.python.org/pypi/ray/0.3.0">https://pypi.python.org/pypi/ray/0.3.0</a> 下载.whl包后上传到机器pip本地安装。</li>
</ul>


<h3>安装Ray 0.3</h3>

<p>如果环境通pip源</p>

<pre><code class="bash">$ pip install ray
</code></pre>

<p>如果不通则在 <a href="https://pypi.python.org/pypi/ray/0.3.0">https://pypi.python.org/pypi/ray/0.3.0</a> 下载 ：</p>

<ul>
<li>ray-0.3.0-cp27-cp27mu-manylinux1_x86_64.whl</li>
</ul>


<p>然后执行：</p>

<pre><code class="bash">$ pip install ray-0.3.0-cp27-cp27mu-manylinux1_x86_64.whl
</code></pre>

<h2>搭建集群</h2>

<p>假设集群IP如下：</p>

<pre><code>192.168.0.1
192.168.0.2
192.168.0.3
192.168.0.4
192.168.0.5
192.168.0.6
192.168.0.7
192.168.0.8
192.168.0.9
192.168.0.10
</code></pre>

<p>搭建集群环境如下：</p>

<h3>启动Head节点</h3>

<p>选一个节点作为Head节点，例如IP为：</p>

<pre><code>192.168.0.1
</code></pre>

<p>在head节点执行：</p>

<pre><code class="bash">ray start --head --node-ip-address 192.168.0.1 --redis-port=6379
</code></pre>

<p>执行后会启动Head节点相关的服务。</p>

<h3>启动Worker节点</h3>

<p>Worker节点IP为：</p>

<pre><code class="bash">192.168.0.2
192.168.0.3
192.168.0.4
192.168.0.5
192.168.0.6
192.168.0.7
192.168.0.8
192.168.0.9
192.168.0.10
</code></pre>

<p>在每台Worker节点上执行：</p>

<pre><code class="bash">ray start --redis-address :6379 192.168.0.x --num-cpus 10
</code></pre>

<p>执行后会启动Worker节点相关服务，其中：</p>

<ul>
<li>192.168.0.x 为对应节点IP</li>
<li>num-cpu选项可以用于设置每台节点可用的cpu数，默认为机器总的cpu数。</li>
</ul>


<h3>停止集群</h3>

<p>Head节点与Worker节点服务的停止命令相同，执行：</p>

<pre><code>ray stop
</code></pre>

<h2>连接集群</h2>

<p>使用如下方法建立连接：</p>

<pre><code class="python">import ray

ray.init(redis_address="192.168.0.1:6379")
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Fuse挂载HDFS到本地目录方法]]></title>
    <link href="http://lionheartwang.github.io/blog/2017/11/14/gua-zai-hdfsdao-ben-di-mu-lu-fang-fa/"/>
    <updated>2017-11-14T00:10:27+08:00</updated>
    <id>http://lionheartwang.github.io/blog/2017/11/14/gua-zai-hdfsdao-ben-di-mu-lu-fang-fa</id>
    <content type="html"><![CDATA[<p>网上关于挂载HDFS到本地的介绍大多基于较早版本的Hadoop。
本文以Hadoop-2.8.0为例，介绍通过Fuse挂载HDFS到本地的方法。</p>

<!--more-->


<h2>安装Fuse</h2>

<p>对每台节点，执行如下命令一键安装</p>

<pre><code class="bash">sudo yum -y install fuse fuse-libs
</code></pre>

<h2>编译fuse-dfs工具</h2>

<p>下载hadoop-2.8.0源码，解压编译</p>

<pre><code class="bash">tar zxvf hadoop-2.8.0.tar.gz
cd hadoop-2.8.0
mvn package -Drequire.fuse=true -DskipTests -Dmaven.javadoc.skip=true -Dtar
</code></pre>

<p>编译后会生成fuse_dfs的可执行文件，位于</p>

<blockquote><p>./hadoop-hdfs-project/hadoop-hdfs-native-client/target/main/native/fuse-dfs/fuse_dfs</p></blockquote>

<p>另外会生成一个对该可执行程序的封装脚本，位于</p>

<blockquote><p>./hadoop-hdfs-project/hadoop-hdfs-native-client/src/main/native/fuse-dfs/fuse_dfs_wrapper.sh</p></blockquote>

<h2>配置环境变量</h2>

<p>可以为fuse_dfs_wrapper.sh建立软链接到当前目录方便后续使用。</p>

<pre><code class="bash">ln -s /&lt;Hadoop源码路径&gt;/hadoop-hdfs-project/hadoop-hdfs-native-client/src/main/native/fuse-dfs/fuse_dfs_wrapper.sh .
</code></pre>

<p>编辑fuse_dfs_wrapper.sh内容，有一些需要根据具体情况修改：</p>

<pre><code class="bash">HADOOP_HOME=/path/to/your/hadoop
HADOOP_PREFIX=/path/to/your/hadoop/src/

export FUSEDFS_PATH="$HADOOP_PREFIX/hadoop-hdfs-project/hadoop-hdfs-native-client/target/main/native/fuse-dfs"
export LIBHDFS_PATH="$HADOOP_PREFIX/hadoop-hdfs-project/hadoop-hdfs-native-client/target/native/target/usr/local/lib"
HADOOP_CONF_DIR=$HADOOP_HOME/etc/hadoop

if [ "$OS_ARCH" = "" ]; then
  export OS_ARCH=amd64
fi

# 这里需要替换为JDK的安装路径
JAVA_HOME=/home/yiguang.wyg/tools/jdk1.8.0_121

if [ "$LD_LIBRARY_PATH" = "" ]; then
  export LD_LIBRARY_PATH=$JAVA_HOME/jre/lib/$OS_ARCH/server:/usr/local/lib
fi

JARS=`find "$HADOOP_PREFIX/hadoop-hdfs-project" -name "*.jar" | xargs`
for jar in $JARS; do
  CLASSPATH=$jar:$CLASSPATH
done

JARS=`find "$HADOOP_PREFIX/hadoop-client" -name "*.jar" | xargs`
for jar in $JARS; do
  CLASSPATH=$jar:$CLASSPATH
done

export CLASSPATH=$HADOOP_CONF_DIR:$CLASSPATH
export PATH=$FUSEDFS_PATH:$PATH
export LD_LIBRARY_PATH=$LIBHDFS_PATH:$JAVA_HOME/jre/lib/$OS_ARCH/server:$LD_LIBRARY_PATH

fuse_dfs "$@"
</code></pre>

<p>重点需要配置好HADOOP_HOME和HADOOP_PREFIX，分别为hadoop安装路径和hadoop源码路径。</p>

<h2>挂载HDFS</h2>

<p>挂载HDFS之前需要确保HDFS已经启动。</p>

<p>创建挂载目录</p>

<pre><code class="bash">sudo mkdir /mnt/hdfs
</code></pre>

<p>执行：</p>

<pre><code class="bash">sudo sh fuse_dfs_wrapper.sh hdfs://&lt;hdfs路径&gt; /mnt/hdfs
</code></pre>

<p>输出：</p>

<blockquote><p>INFO /&hellip;/hadoop-2.8.0-src/hadoop-hdfs-project/hadoop-hdfs-native-client/src/main/native/fuse-dfs/fuse_options.c:164 Adding FUSE arg /mnt/hdfs</p></blockquote>

<p>进入挂载目录，如果能访问到HDFS中的内容，说明挂载成功。
<code>
cd /mnt/hdfs
ls
</code></p>

<p>挂载成功后，就可以将HDFS当做本地路径使用了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ZooKeeper安装使用指南]]></title>
    <link href="http://lionheartwang.github.io/blog/2017/01/20/zookeeperan-zhuang-shi-yong-zhi-nan/"/>
    <updated>2017-01-20T15:56:22+08:00</updated>
    <id>http://lionheartwang.github.io/blog/2017/01/20/zookeeperan-zhuang-shi-yong-zhi-nan</id>
    <content type="html"><![CDATA[<p>ZooKeeper是一个分布式的，开放源码的分布式应用程序协调服务。</p>

<p>作为分布式应用提供一致性服务的软件，ZooKeeper 封装了易错的关键服务，提供简单高效、功能稳定接口给用户</p>

<p>本文介绍 ZooKeeper 的配置方法和客户端使用方法。</p>

<!--more-->


<h2>ZooKeeper 安装</h2>

<p>以ZooKeeper 3.4.8为例，下载 <a href="http://mirrors.hust.edu.cn/apache/zookeeper/zookeeper-3.4.8/">ZooKeeper 3.4.8</a>
下载解压后配置conf/zoo.cfg，配置clientPort，dataDir等。
示例配置：</p>

<pre><code class="bash"># The number of milliseconds of each tick
tickTime=2000
# The number of ticks that the initial synchronization phase can take
initLimit=10
# The number of ticks that can pass between sending a request and getting an acknowledgement
syncLimit=5
# the directory where the snapshot is stored. do not use /tmp for storage, /tmp here is just example sakes.
dataDir=/tmp/zookeeper
# the port at which the clients will connect
clientPort=2181
</code></pre>

<h2>ZooKeeper 使用</h2>

<p>配置好Zk后需要先启动ZkServer，然后可以用Zk Client直接以命令行的方式操作Zk。</p>

<h3>Server端</h3>

<p>配置好后启动zk：</p>

<pre><code class="bash">$sh bin/zkServer.sh start &gt; zookeeper.out
</code></pre>

<h3>Client端</h3>

<p>ZooKeeper客户端的使用非常简单，启动：</p>

<pre><code class="bash"># ip和端口根据启动情况修改
$sh bin/zkCli.sh -server 127.0.0.1:2181
</code></pre>

<p>之后可以用ls、delete、get等命令查询或修改各ZK节点的值。命令帮助如下：</p>

<pre><code>ZooKeeper -server host:port cmd args
    connect host:port
    get path [watch]
    ls path [watch]
    set path data [version]
    rmr path
    delquota [-n|-b] path
    quit
    printwatches on|off
    create [-s] [-e] path data acl
    stat path [watch]
    close
    ls2 path [watch]
    history
    listquota path
    setAcl path acl
    getAcl path
    sync path
    redo cmdno
    addauth scheme auth
    delete path [version]
    setquota -n|-b val path
</code></pre>

<h2>ZooKeeper API</h2>

<p>除了通过客户端操作ZooKeeper，还可以调用ZooKeeper提供的API操作ZooKeeper的节点。</p>

<p>这里以ZooKeeper 3.4.5为例，介绍常用的几个Java API。</p>

<h3>建立连接</h3>

<p>在应用程序中使用Zk需要先创建ZooKeeper对象，后续的操作都是基于该对象进行的。</p>

<pre><code class="java">public ZooKeeper(String connectString, int sessionTimeout, Watcher watcher) throws IOException  
</code></pre>

<p>参数说明：</p>

<ul>
<li>connectString： zookeeper server列表, 以逗号隔开。ZooKeeper对象初始化后, 将从列表中选择一个server, 并尝试建立连接。如果失败,则会从剩余项中选择并再次尝试建立连接。</li>
<li>sessionTimeout：指定连接的超时时间.</li>
<li>watcher： 事件回调接口。</li>
</ul>


<h3>创建/删除znode</h3>

<p>ZooKeeper对象的create/delete方法用于创建/删除 znode。如果该node存在, 则返回该node的状态信息, 否则返回null。</p>

<pre><code class="java">public String create(String path, byte[] data, List acl, CreateMode createMode); 
public void delete(final String path, int version);  
</code></pre>

<p>参数说明：</p>

<ul>
<li>path： znode的路径。</li>
<li>data：与znode关联的数据。</li>
<li>acl：指定权限信息</li>
<li>createMode：指定znode类型，按持久化节点与临时节点，以及自动编号节点与非自动编号节点两个维度划分，共4类。</li>
<li>version：指定要更新的数据的版本, 如果version和真实的版本不同, 更新操作将失败.。指定version为-1则忽略版本检查。</li>
</ul>


<h3>获取子znode列表</h3>

<p>ZooKeeper对象的getChildren方法用于获取子node列表。</p>

<pre><code class="java">public List getChildren(String path, boolean watch); 
</code></pre>

<p>参数说明：</p>

<ul>
<li>path： znode的路径。</li>
<li>watch参数用于指定是否监听path node的创建, 删除事件, 以及数据更新事件。</li>
</ul>


<h3>判断znode是否存在</h3>

<p>ZooKeeper对象的exists方法用于判断指定znode是否存在。如果该node存在, 则返回该node的状态信息, 否则返回null。</p>

<pre><code class="java">public Stat exists(String path, boolean watch);  
</code></pre>

<p>参数说明：</p>

<ul>
<li>path： znode的路径。</li>
<li>watch：用于指定是否监听path node的创建, 删除事件, 以及数据更新事件。</li>
</ul>


<h3>获取/更新znode数据</h3>

<p>ZooKeeper对象的getData/setData方法用于获取/更新 znode关联的数据。</p>

<pre><code class="java">public byte[] getData(String path, boolean watch, Stat stat);  
public Stat setData(final String path, byte data[], int version); 
</code></pre>

<p>参数说明：</p>

<ul>
<li>path： znode的路径。</li>
<li>stat：传出参数, getData方法会将path node的状态信息设置到该参数中。</li>
<li>data：与znode关联的数据。</li>
<li>watch：用于指定是否监听path node的创建, 删除事件, 以及数据更新事件。</li>
<li>version：指定要更新的数据的版本, 如果version和真实的版本不同, 更新操作将失败.。指定version为-1则忽略版本检查。</li>
</ul>


<p>更全的API介绍参考 ZooKeeper 3.4.5 API</p>
]]></content>
  </entry>
  
</feed>

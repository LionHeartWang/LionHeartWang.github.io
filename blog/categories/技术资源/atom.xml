<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[技术资源 | Workspace of LionHeart]]></title>
  <link href="http://lionheartwang.github.io/blog/categories/技术资源/atom.xml" rel="self"/>
  <link href="http://lionheartwang.github.io/"/>
  <updated>2018-12-13T14:42:57+08:00</updated>
  <id>http://lionheartwang.github.io/</id>
  <author>
    <name><![CDATA[Wang Yiguang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Linux进程状态说明]]></title>
    <link href="http://lionheartwang.github.io/blog/2018/06/05/linuxjin-cheng-zhuang-tai-shuo-ming/"/>
    <updated>2018-06-05T12:13:12+08:00</updated>
    <id>http://lionheartwang.github.io/blog/2018/06/05/linuxjin-cheng-zhuang-tai-shuo-ming</id>
    <content type="html"><![CDATA[<p>Linux是一个多用户，多任务的系统，可以同时运行多个用户的多个进程，每个进程会有不同的状态。  本文对进程的R、S、D、T、Z、X 六种状态进行解释说明。</p>

<p>参考博客：<a href="https://blog.csdn.net/tianlesoftware/article/details/6457487">https://blog.csdn.net/tianlesoftware/article/details/6457487</a></p>

<p> <!-- More --></p>

<h2>进程状态定义</h2>

<p>PROCESS STATE CODE英文说明如下：</p>

<pre><code>       D    Uninterruptible sleep (usually IO)
       R    Running or runnable (on run queue)
       S    Interruptible sleep (waiting for an event to complete)
       T    Stopped, either by a job control signal or because it is being traced.
       W    paging (not valid since the 2.6.xx kernel)
       X    dead (should never be seen)
       Z    Defunct ("zombie") process, terminated but not
            reaped by its parent.
</code></pre>

<p>一些额外标记含义如下：</p>

<pre><code>       &lt;    high-priority (not nice to other users)
       N    low-priority (nice to other users)
       L    has pages locked into memory (for real-time and custom IO)
       s    is a session leader
       l    is multi-threaded (using CLONE_THREAD, like NPTL pthreads do)
       +    is in the foreground process group
</code></pre>

<p> 中文说明如下：</p>

<ul>
<li>O:  进程正在处理器运行,这个状态从来木见过.</li>
<li>S：休眠状态（sleeping）</li>
<li>R：等待运行（runable）R Running or runnable (on run queue) 进程处于运行或就绪状态</li>
<li>I：空闲状态（idle）</li>
<li>Z：僵尸状态（zombie）　　　</li>
<li>T：跟踪状态（Traced）</li>
<li>B：进程正在等待更多的内存页</li>
<li>D:  不可中断的深度睡眠，一般由IO引起，同步IO在做读或写操作时，cpu不能做其它事情，只能等待，这时进程处于这种状态，如果程序采用异步IO，这种状态应该就很少见到了</li>
</ul>


<h2>进程状态说明</h2>

<p>上面罗列的状态分别进行说明。</p>

<h3>R (task_running) : 可执行状态</h3>

<p>只有在该状态的进程才可能在CPU上运行，而同一时刻可能有多个进程处于可执行状态，这些进程的task_struct结构（进程控制块）被放入对应CPU的可执行队列中（一个进程最多只能出现在一个CPU的可执行队列中）。</p>

<p>进程调度器的任务就是从各个CPU的可执行队列中分别选择一个进程在该CPU上运行。</p>

<p>很多操作系统教科书将正在CPU上执行的进程定义为RUNNING状态、而将可执行但是尚未被调度执行的进程定义为READY状态，这两种状态在linux下统一为 TASK_RUNNING状态。</p>

<h3>S (task_interruptible): 可中断的睡眠状态</h3>

<p>处于这个状态的进程因为等待某某事件的发生（比如等待socket连接、等待信号量），而被挂起。</p>

<p>这些进程的task_struct结构被放入对应事件的等待队列中。当这些事件发生时（由外部中断触发、或由其他进程触发），对应的等待队列中的一个或多个进程将被唤醒。</p>

<p>通过ps命令我们会看到，一般情况下，进程列表中的绝大多数进程都处于task_interruptible状态（除非机器的负载很高）。</p>

<p>毕竟CPU就这么一两个，进程动辄几十上百个，如果不是绝大多数进程都在睡眠，CPU又怎么响应得过来。</p>

<h3>D (task_uninterruptible): 不可中断的睡眠状态</h3>

<p>与task_interruptible状态类似，进程处于睡眠状态，但是此刻进程是不可中断的。</p>

<p>不可中断，指的并不是CPU不响应外部硬件的中断，而是指进程不响应异步信号。</p>

<p>绝大多数情况下，进程处在睡眠状态时，总是应该能够响应异步信号的。</p>

<p>但是uninterruptible sleep 状态的进程不接受外来的任何信号，因此无法用kill杀掉这些处于D状态的进程，无论是”kill”, “kill -9″还是”kill -15″。</p>

<p>这种情况下，一个可选的方法是reboot。</p>

<p>处于uninterruptible sleep状态的进程通常是在等待IO，比如磁盘IO，网络IO，其他外设IO等。</p>

<p>如果进程正在等待的IO在较长的时间内都没有响应，那么就被ps看到了，同时也就意味着很有可能有IO出了问题，可能是外设本身出了故障，也可能是比如挂载的远程文件系统已经不可访问了。</p>

<p>而task_uninterruptible状态存在的意义就在于，内核的某些处理流程是不能被打断的。</p>

<p>如果响应异步信号，程序的执行流程中就会被插入一段用于处理异步信号的流程（这个插入的流程可能只存在于内核态，也可能延伸到用户态），于是原有的流程就被中断了。</p>

<p>在进程对某些硬件进行操作时（比如进程调用read系统调用对某个设备文件进行读操作，而read系统调用最终执行到对应设备驱动的代码，并与对应的物理设备进行交互）。</p>

<p>可能需要使用task_uninterruptible状态对进程进行保护，以避免进程与设备交互的过程被打断，造成设备陷入不可控的状态。</p>

<p>这种情况下的task_uninterruptible状态总是非常短暂的，通过ps命令基本上不可能捕捉到。</p>

<h3>T(task_stopped or task_traced)：暂停状态或跟踪状态</h3>

<p>向进程发送一个sigstop信号，它就会因响应该信号而进入task_stopped状态（除非该进程本身处于task_uninterruptible状态而不响应信号）。（sigstop与sigkill信号一样，是非常强制的。不允许用户进程通过signal系列的系统调用重新设置对应的信号处理函数。）</p>

<p>向进程发送一个sigcont信号，可以让其从task_stopped状态恢复到task_running状态。</p>

<p>当进程正在被跟踪时，它处于task_traced这个特殊的状态。</p>

<p>“正在被跟踪”指的是进程暂停下来，等待跟踪它的进程对它进行操作。比如在gdb中对被跟踪的进程下一个断点，进程在断点处停下来的时候就处于task_traced状态。</p>

<p>而在其他时候，被跟踪的进程还是处于前面提到的那些状态。</p>

<p>对于进程本身来说，task_stopped和task_traced状态很类似，都是表示进程暂停下来。</p>

<p>而task_traced状态相当于在task_stopped之上多了一层保护，处于task_traced状态的进程不能响应sigcont信号而被唤醒。</p>

<p>只能等到调试进程通过ptrace系统调用执行ptrace_cont、ptrace_detach等操作（通过ptrace系统调用的参数指定操作），或调试进程退出，被调试的进程才能恢复task_running状态。</p>

<h3>Z (task_dead - exit_zombie)：退出状态，进程成为僵尸进程</h3>

<p>在Linux进程的状态中，僵尸进程是非常特殊的一种，它是已经结束了的进程，但是没有从进程表中删除。太多了会导致进程表里面条目满了，进而导致系统崩溃，倒是不占用其他系统资源。</p>

<p>它已经放弃了几乎所有内存空间，没有任何可执行代码，也不能被调度，仅仅在进程列表中保留一个位置，记载该进程的退出状态等信息供其他进程收集，除此之外，僵尸进程不再占有任何内存空间。</p>

<p>进程在退出的过程中，处于TASK_DEAD状态。在这个退出过程中，进程占有的所有资源将被回收，除了task_struct结构（以及少数资源）以外。于是进程就只剩下task_struct这么个空壳，故称为僵尸。</p>

<p>之所以保留task_struct，是因为task_struct里面保存了进程的退出码、以及一些统计信息。而其父进程很可能会关心这些信息。</p>

<p>比如在shell中，#?变量就保存了最后一个退出的前台进程的退出码，而这个退出码往往被作为if语句的判断条件。</p>

<p>当然，内核也可以将这些信息保存在别的地方，而将task_struct结构释放掉，以节省一些空间。但是使用task_struct结构更为方便，因为在内核中已经建立了从pid到task_struct查找关系，还有进程间的父子关系。释放掉task_struct，则需要建立一些新的数据结构，以便让父进程找到它的子进程的退出信息。</p>

<p>子进程在退出的过程中，内核会给其父进程发送一个信号，通知父进程来“收尸”。 父进程可以通过wait系列的系统调用（如wait4、waitid）来等待某个或某些子进程的退出，并获取它的退出信息。然后wait系列的系统调用会顺便将子进程的尸体（task_struct）也释放掉。</p>

<p>这个信号默认是SIGCHLD，但是在通过clone系统调用创建子进程时，可以设置这个信号。</p>

<p>如果他的父进程没安装SIGCHLD信号处理函数调用wait或waitpid()等待子进程结束，又没有显式忽略该信号，那么它就一直保持僵尸状态，子进程的尸体（task_struct）也就无法释放掉。</p>

<p>如果这时父进程结束了，那么init进程自动会接手这个子进程，为它收尸，它还是能被清除的。但是如果如果父进程是一个循环，不会结束，那么子进程就会一直保持僵尸状态，这就是为什么系统中有时会有很多的僵尸进程。</p>

<p>当进程退出的时候，会将它的所有子进程都托管给别的进程（使之成为别的进程的子进程）。托管的进程可能是退出进程所在进程组的下一个进程（如果存在的话），或者是1号进程。</p>

<p>所以每个进程、每时每刻都有父进程存在。除非它是1号进程。1号进程，pid为1的进程，又称init进程。</p>

<p>linux系统启动后，第一个被创建的用户态进程就是init进程。它有两项使命：</p>

<ul>
<li>1、执行系统初始化脚本，创建一系列的进程（它们都是init进程的子孙）；</li>
<li>2、在一个死循环中等待其子进程的退出事件，并调用waitid系统调用来完成“收尸”工作；</li>
</ul>


<p>init进程不会被暂停、也不会被杀死（这是由内核来保证的）。</p>

<p>它在等待子进程退出的过程中处于task_interruptible状态，“收尸”过程中则处于task_running状态。</p>

<p>Unix/Linux 处理僵尸进程的方法：</p>

<ul>
<li>找出父进程号，然后kill 父进程，之后子进程（僵尸进程）会被托管到其他进程，如init进程，然后由init进程将子进程的尸体（task_struct）释放掉。</li>
</ul>


<p>僵尸进程解决办法：</p>

<ul>
<li><p>改写父进程，在子进程死后要为它收尸。</p>

<ul>
<li>具体做法是接管SIGCHLD信号。子进程死后，会发送SIGCHLD信号给父进程，父进程收到此信号后，执行 waitpid()函数为子进程收尸。</li>
<li>这是基于这样的原理：就算父进程没有调用wait，内核也会向它发送SIGCHLD消息，尽管对的默认处理是忽略，如果想响应这个消息，可以设置一个处理函数。</li>
</ul>
</li>
<li><p>把父进程杀掉。</p>

<ul>
<li>父进程死后，僵尸进程成为"孤儿进程"，过继给1号进程init，init始终会负责清理僵尸进程．它产生的所有僵尸进程也跟着消失。如：kill -9 <code>ps -ef | grep "Process Name" | awk '{ print $3 }'</code></li>
<li>其中，“Process Name”为处于zombie状态的进程名。</li>
</ul>
</li>
<li>杀父进程不行的话，就尝试用skill -t TTY关闭相应终端，TTY是进程相应的tty号(终端号)。但是，ps可能会查不到特定进程的tty号，这时就需要自己判断了。</li>
<li>重启系统，这也是最常用到方法之一。</li>
</ul>


<h3>X (task_dead - exit_dead)：退出状态，进程即将被销毁</h3>

<p>进程在退出过程中也可能不会保留它的task_struct。比如这个进程是多线程程序中被detach过的进程。</p>

<p>或者父进程通过设置sigchld信号的handler为sig_ign，显式的忽略了sigchld信号。（这是posix的规定，尽管子进程的退出信号可以被设置为sigchld以外的其他信号。）</p>

<p>此时，进程将被置于exit_dead退出状态，这意味着接下来的代码立即就会将该进程彻底释放。所以exit_dead状态是非常短暂的，几乎不可能通过ps命令捕捉到。</p>

<h2>进程状态变化说明</h2>

<h3>进程的初始状态</h3>

<p>进程是通过fork系列的系统调用（fork、clone、vfork）来创建的，内核（或内核模块）也可以通过kernel_thread函数创建内核进程。</p>

<p>这些创建子进程的函数本质上都完成了相同的功能——将调用进程复制一份，得到子进程。（可以通过选项参数来决定各种资源是共享、还是私有。）</p>

<p>那么既然调用进程处于task_running状态（否则，它若不是正在运行，又怎么进行调用？），则子进程默认也处于task_running状态。</p>

<p>另外，在系统调用调用clone和内核函数kernel_thread也接受clone_stopped选项，从而将子进程的初始状态置为 task_stopped。</p>

<h3>进程状态变迁</h3>

<p>进程自创建以后，状态可能发生一系列的变化，直到进程退出。</p>

<p>而尽管进程状态有好几种，但是进程状态的变迁却只有两个方向:</p>

<ul>
<li>从task_running状态变为非task_running状态</li>
<li>或者从非task_running状态变为task_running状态。</li>
</ul>


<p>也就是说，如果给一个task_interruptible状态的进程发送sigkill信号，这个进程将先被唤醒（进入task_running状态），然后再响应sigkill信号而退出（变为task_dead状态）。并不会从task_interruptible状态直接退出。</p>

<p>进程从非task_running状态变为task_running状态，是由别的进程（也可能是中断处理程序）执行唤醒操作来实现的。执行唤醒的进程设置被唤醒进程的状态为task_running，然后将其task_struct结构加入到某个cpu的可执行队列中。于是被唤醒的进程将有机会被调度执行。</p>

<p>而进程从task_running状态变为非task_running状态，则有两种途径：</p>

<ul>
<li>1、响应信号而进入task_stoped状态、或task_dead状态；</li>
<li>2、执行系统调用主动进入task_interruptible状态（如nanosleep系统调用）、或task_dead状态（如exit系统调用）；或由于执行系统调用需要的资源得不到满足，而进入task_interruptible状态或task_uninterruptible状态（如select系统调用）。</li>
</ul>


<p>显然，这两种情况都只能发生在进程正在cpu上执行的情况下。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tensorflow基础环境安装]]></title>
    <link href="http://lionheartwang.github.io/blog/2018/05/17/tensorflowji-chu-huan-jing-an-zhuang/"/>
    <updated>2018-05-17T16:24:53+08:00</updated>
    <id>http://lionheartwang.github.io/blog/2018/05/17/tensorflowji-chu-huan-jing-an-zhuang</id>
    <content type="html"><![CDATA[<p>本文介绍如何搭建tensorflow的基础运行环境，包括Cuda、Cudnn与tensorflow gpu版本的安装。</p>

<!-- More -->


<h2>安装Cuda</h2>

<p>在nvida官网寻找Cuda rpm安装包：</p>

<ul>
<li> <a href="https://developer.nvidia.com/cuda-downloads">https://developer.nvidia.com/cuda-downloads</a></li>
</ul>


<p>选择对应版本和系统后下载。</p>

<p>以Cuda 9.0为例，下载后的安装包为：</p>

<ul>
<li>cuda-repo-rhel7-9-0-local-9.0.176-1.x86_64.rpm</li>
</ul>


<p>执行如下命令安装：</p>

<pre><code class="bash">sudo rpm -i cuda-repo-rhel7-9-0-local-9.0.176-1.x86_64.rpm
sudo yum clean all
sudo yum install cuda
</code></pre>

<p>安装nvida-driver：</p>

<pre><code class="bash">sudo yum install -y nvidia-kmod cuda-drivers
</code></pre>

<p>重新加载nvidia相关模块：</p>

<pre><code class="bash">sudo rmmod nvidia-uvm
sudo rmmod nvidia
sudo nvidia-modprobe -u -c=0
</code></pre>

<p>检验新的驱动是否生效，运行</p>

<pre><code class="bash">nvidia-smi
</code></pre>

<p>应当输出本机GPU信息。</p>

<h2>安装Cudnn</h2>

<p>在nvidia官网寻找Cudnn安装包：</p>

<ul>
<li><a href="https://developer.nvidia.com/rdp/cudnn-download">https://developer.nvidia.com/rdp/cudnn-download</a></li>
</ul>


<p>根据Cuda版本与系统选择对应版本下载。</p>

<p>以Cudnn 7.0为例，下载后的安装包为：</p>

<ul>
<li>cudnn-9.0-linux-x64-v7.tgz</li>
</ul>


<p>解压安装操作如下：</p>

<pre><code class="bash">tar zxvf cudnn-9.0-linux-x64-v7.tgz
sudo cp cuda/include/cudnn.h /usr/local/cuda/include
sudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64
sudo chmod a+r /usr/local/cuda/include/cudnn.h /usr/local/cuda/lib64/libcudnn*
</code></pre>

<p>设置环境变量：</p>

<pre><code>export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH
</code></pre>

<h2>安装Tensorflow</h2>

<p>通过pip安装GPU版本的tensorflow。</p>

<pre><code>pip install tensorflow-gpu
</code></pre>

<p>在python中测试tensorflow是否能够正常加载。</p>

<pre><code class="python">import tensorflow as tf
print tf.__version__
</code></pre>

<p>目前最新版本为1.8.0</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Landslide基于MarkDown制作在线Slide]]></title>
    <link href="http://lionheartwang.github.io/blog/2017/11/26/shi-yong-landslideji-yu-markdownzhi-zuo-zai-xian-slide/"/>
    <updated>2017-11-26T19:05:19+08:00</updated>
    <id>http://lionheartwang.github.io/blog/2017/11/26/shi-yong-landslideji-yu-markdownzhi-zuo-zai-xian-slide</id>
    <content type="html"><![CDATA[<p>本文介绍使用Landslide工具基于Markdown语法制作在线Slide的方法。</p>

<!-- More -->


<h2>Landsilde工具使用</h2>

<p>Landslide是基于Google的<code>html5slides</code>的一个Slide生成工具，可将markdown、ReST 或者 textile文件转化成HTML5的slide。</p>

<p>该转化支持内联模式，即生成一个具有完整功能的HTML文件，将依赖的css等东西放入其中，很容易用来分享。</p>

<p>类似的还有工具还有 remark，相关gitlab项目主页：</p>

<ul>
<li><a href="https://github.com/adamzap/landslide">https://github.com/adamzap/landslide</a></li>
<li><a href="https://github.com/gnab/remark/">https://github.com/gnab/remark/</a></li>
</ul>


<h3>安装landslide</h3>

<p>  方案一 pip安装：</p>

<pre><code class="``bash"> $ pip install landslide
</code></pre>

<p> 方案二 源码安装：</p>

<pre><code class="`bash">$ git clone https://github.com/adamzap/landslide.git
$ cd landslide
$ python setup.py build
$ sudo python setup.py install
</code></pre>

<h3>Markdown书写Slide内容</h3>

<p>以markdown语法书写，可以参考landslide提供的示例：</p>

<ul>
<li><a href="https://github.com/adamzap/landslide/blob/master/examples/markdown/slides.md">https://github.com/adamzap/landslide/blob/master/examples/markdown/slides.md</a></li>
</ul>


<h3>生成PPT页面</h3>

<p>以官方提供的markdown文本为例，文件命名为test.md，完成后执行如下命令生成HTML内容：</p>

<pre><code class="bash">$ landslide file.md -i -o &gt; test.html
</code></pre>

<p>命令行参数说明详见下文介绍。</p>

<p>可以直接在浏览器中打开观察效果：</p>

<pre><code class="bash">open test.html
</code></pre>

<p>支持快捷键，可左右切换slide，详见下文快捷键介绍。</p>

<p><img src="/images/blog/06-landslide_demo.png"></p>

<h2>使用PrinceXML生成PDF</h2>

<p>PrinceXML是一款将html转换为pdf的工具，提供免费带水印版试用。</p>

<p>下载地址：</p>

<ul>
<li><a href="http://www.princexml.com/download/">http://www.princexml.com/download/</a></li>
</ul>


<p>选择对应版本解压后执行脚本安装：</p>

<pre><code class="bash">$ sh insatll.sh
</code></pre>

<p>指定路径安装完毕后即可使用prince命令。</p>

<pre><code class="bash">$ prince test.html -o test.pdf
</code></pre>

<p>即可生成需要的PDF PPT文件。</p>

<h2>Landslide快捷键及命令参数介绍</h2>

<h3>PPT页面快捷键</h3>

<p>快捷键如下：</p>

<blockquote><p>Press h to toggle display of help</p>

<p>Press left arrow and right arrow to navigate</p>

<p>Press t to toggle a table of contents for your presentation. Slide titles are links</p>

<p>Press ESC to display the presentation overview (Exposé)</p>

<p>Press n to toggle slide number visibility</p>

<p>Press b to toggle screen blanking</p>

<p>Press c to toggle current slide context (previous and next slides)</p>

<p>Press e to make slides filling the whole available space within the document body</p>

<p>Press S to toggle display of link to the source file for each slide</p>

<p>Press &lsquo;2&rsquo; to toggle notes in your slides (specify with the .notes macro)</p>

<p>Press &lsquo;3&rsquo; to toggle pseudo-3D display (experimental)</p>

<p>Browser zooming is supported</p></blockquote>

<h3>命令行参数介绍</h3>

<p>landslide命令行参数介绍如下：</p>

<pre><code>-h, --help            show this help message and exit
-c, --copy-theme      Copy theme directory into current presentation source directory
-b, --debug           Will display any exception trace to stdin
-d FILE, --destination=FILE
                      The path to the to the destination file: .html or .pdf
                      extensions allowed (default: presentation.html)
-e ENCODING, --encoding=ENCODING
                      The encoding of your files (defaults to utf8)
-i, --embed     Embed stylesheet and javascript contents,
                      base64-encoded images in presentation to make a
                      standalone document
-l LINENOS, --linenos=LINENOS
                      How to output linenos in source code. Three options
                      availables: no (no line numbers); inline inside pre tag
                      table (lines numbers in another cell, copy-paste friendly)
-o, --direct-output   Prints the generated HTML code to stdin; won't work with PDF export
-q, --quiet           Won't write anything to stdin (silent mode)
-r, --relative   Make your presentation asset links relative to current
                      pwd; This may be useful if you intend to publish your
                      html presentation online.
-t THEME, --theme=THEME
                      A theme name, or path to a landlside theme directory
-v, --verbose  Write informational messages to stdin (enabled by default)
-w, --watch    Watch the source directory for changes and auto-regenerate the presentation
-x EXTENSIONS, --extensions=EXTENSIONS
                      Comma-separated list of extensions for Markdown
-m, --math-output     Enable mathematical output using mathjax
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Fuse挂载HDFS到本地目录方法]]></title>
    <link href="http://lionheartwang.github.io/blog/2017/11/14/gua-zai-hdfsdao-ben-di-mu-lu-fang-fa/"/>
    <updated>2017-11-14T00:10:27+08:00</updated>
    <id>http://lionheartwang.github.io/blog/2017/11/14/gua-zai-hdfsdao-ben-di-mu-lu-fang-fa</id>
    <content type="html"><![CDATA[<p>网上关于挂载HDFS到本地的介绍大多基于较早版本的Hadoop。
本文以Hadoop-2.8.0为例，介绍通过Fuse挂载HDFS到本地的方法。</p>

<!--more-->


<h2>安装Fuse</h2>

<p>对每台节点，执行如下命令一键安装</p>

<pre><code class="bash">sudo yum -y install fuse fuse-libs
</code></pre>

<h2>编译fuse-dfs工具</h2>

<p>下载hadoop-2.8.0源码，解压编译</p>

<pre><code class="bash">tar zxvf hadoop-2.8.0.tar.gz
cd hadoop-2.8.0
mvn package -Drequire.fuse=true -DskipTests -Dmaven.javadoc.skip=true -Dtar
</code></pre>

<p>编译后会生成fuse_dfs的可执行文件，位于</p>

<blockquote><p>./hadoop-hdfs-project/hadoop-hdfs-native-client/target/main/native/fuse-dfs/fuse_dfs</p></blockquote>

<p>另外会生成一个对该可执行程序的封装脚本，位于</p>

<blockquote><p>./hadoop-hdfs-project/hadoop-hdfs-native-client/src/main/native/fuse-dfs/fuse_dfs_wrapper.sh</p></blockquote>

<h2>配置环境变量</h2>

<p>可以为fuse_dfs_wrapper.sh建立软链接到当前目录方便后续使用。</p>

<pre><code class="bash">ln -s /&lt;Hadoop源码路径&gt;/hadoop-hdfs-project/hadoop-hdfs-native-client/src/main/native/fuse-dfs/fuse_dfs_wrapper.sh .
</code></pre>

<p>编辑fuse_dfs_wrapper.sh内容，有一些需要根据具体情况修改：</p>

<pre><code class="bash">HADOOP_HOME=/path/to/your/hadoop
HADOOP_PREFIX=/path/to/your/hadoop/src/

export FUSEDFS_PATH="$HADOOP_PREFIX/hadoop-hdfs-project/hadoop-hdfs-native-client/target/main/native/fuse-dfs"
export LIBHDFS_PATH="$HADOOP_PREFIX/hadoop-hdfs-project/hadoop-hdfs-native-client/target/native/target/usr/local/lib"
HADOOP_CONF_DIR=$HADOOP_HOME/etc/hadoop

if [ "$OS_ARCH" = "" ]; then
  export OS_ARCH=amd64
fi

# 这里需要替换为JDK的安装路径
JAVA_HOME=/home/yiguang.wyg/tools/jdk1.8.0_121

if [ "$LD_LIBRARY_PATH" = "" ]; then
  export LD_LIBRARY_PATH=$JAVA_HOME/jre/lib/$OS_ARCH/server:/usr/local/lib
fi

JARS=`find "$HADOOP_PREFIX/hadoop-hdfs-project" -name "*.jar" | xargs`
for jar in $JARS; do
  CLASSPATH=$jar:$CLASSPATH
done

JARS=`find "$HADOOP_PREFIX/hadoop-client" -name "*.jar" | xargs`
for jar in $JARS; do
  CLASSPATH=$jar:$CLASSPATH
done

export CLASSPATH=$HADOOP_CONF_DIR:$CLASSPATH
export PATH=$FUSEDFS_PATH:$PATH
export LD_LIBRARY_PATH=$LIBHDFS_PATH:$JAVA_HOME/jre/lib/$OS_ARCH/server:$LD_LIBRARY_PATH

fuse_dfs "$@"
</code></pre>

<p>重点需要配置好HADOOP_HOME和HADOOP_PREFIX，分别为hadoop安装路径和hadoop源码路径。</p>

<h2>挂载HDFS</h2>

<p>挂载HDFS之前需要确保HDFS已经启动。</p>

<p>创建挂载目录</p>

<pre><code class="bash">sudo mkdir /mnt/hdfs
</code></pre>

<p>执行：</p>

<pre><code class="bash">sudo sh fuse_dfs_wrapper.sh hdfs://&lt;hdfs路径&gt; /mnt/hdfs
</code></pre>

<p>输出：</p>

<blockquote><p>INFO /&hellip;/hadoop-2.8.0-src/hadoop-hdfs-project/hadoop-hdfs-native-client/src/main/native/fuse-dfs/fuse_options.c:164 Adding FUSE arg /mnt/hdfs</p></blockquote>

<p>进入挂载目录，如果能访问到HDFS中的内容，说明挂载成功。
<code>
cd /mnt/hdfs
ls
</code></p>

<p>挂载成功后，就可以将HDFS当做本地路径使用了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux NFS配置及使用方法]]></title>
    <link href="http://lionheartwang.github.io/blog/2017/10/24/linux-nfs-configuration/"/>
    <updated>2017-10-24T00:27:55+08:00</updated>
    <id>http://lionheartwang.github.io/blog/2017/10/24/linux-nfs-configuration</id>
    <content type="html"><![CDATA[<p>NFS是Network  File System（网络文件系统）。主要功能是通过网络让不同的服务器之间可以共享文件或者目录。</p>

<p>本文以CentOS系统为例介绍Linux下NFS的配置和使用方法。</p>

<p>NFS在文件传送过程中依赖与RPC（远程过程调用）协议，配置步骤介绍如下。</p>

<!-- more -->


<h2>安装软件包</h2>

<p>安装nfs软件包，server和client机器都需要安装</p>

<pre><code class="bash">sudo yum -y install nfs-utils nfs-utils-lib
</code></pre>

<h2>配置NFS Server</h2>

<p>假设用来共享目录的NFS Server机器是192.168.0.1，需要登录该机器配置挂载目录。</p>

<p>登录后编辑/etc/exports文件内容，输入需要挂载的机器IP，以及服务端共享的路径。</p>

<p>假设需要访问NFS共享目录的机器为192.168.0.2 ~ 192.168.0.6，配置/etc/exports如下所示：</p>

<pre><code>/path/to/mount 192.168.0.2(rw,sync,no_root_squash)
/path/to/mount 192.168.0.3(rw,sync,no_root_squash)
/path/to/mount 192.168.0.4(rw,sync,no_root_squash)
/path/to/mount 192.168.0.5(rw,sync,no_root_squash)
/path/to/mount 192.168.0.6(rw,sync,no_root_squash)
...
</code></pre>

<p>其中/path/to/mount根据需要配置为欲挂载的路径即可。</p>

<h2>启动NFS Server</h2>

<p>在192.168.0.1上执行如下命令启动NFS Server</p>

<pre><code class="bash">sudo service rpcbind restart
sudo service nfs restart
</code></pre>

<p>执行如下命令，则会显示挂载的机器IP列表：</p>

<pre><code class="bash">showmount -e 192.168.0.1
</code></pre>

<h2>配置NFS Client</h2>

<p>分别登陆每台需要挂载的client机器，运行如下命令进行共享文件夹挂载。</p>

<pre><code>sudo mkdir /target/to/mount
sudo mount -t nfs 192.168.0.1:/path/to/mount /target/to/mount
</code></pre>

<p>其中：</p>

<ul>
<li>/path/to/mount为之前配置的NFS Server上挂载的路径。</li>
<li>/target/to/mount为本地机器欲挂载到的目标路径。</li>
</ul>


<p>挂载完成后，在192.168.0.2 ~ 192.168.0.6上就可以向访问本地路径一样访问192.168.0.1的/path/to/mount目录了。</p>
]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[搜索引擎 | Workspace of LionHeart]]></title>
  <link href="http://lionheartwang.github.io/blog/categories/sou-suo-yin-qing/atom.xml" rel="self"/>
  <link href="http://lionheartwang.github.io/"/>
  <updated>2016-04-07T21:41:15+08:00</updated>
  <id>http://lionheartwang.github.io/</id>
  <author>
    <name><![CDATA[Wang Yiguang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[检索模型与搜索排序]]></title>
    <link href="http://lionheartwang.github.io/blog/2016/03/12/jian-suo-mo-xing-yu-sou-suo-pai-xu/"/>
    <updated>2016-03-12T17:47:54+08:00</updated>
    <id>http://lionheartwang.github.io/blog/2016/03/12/jian-suo-mo-xing-yu-sou-suo-pai-xu</id>
    <content type="html"><![CDATA[<p>检索模型是搜索引擎排序的理论基础，用来计算网页和用户查询的相关性。</p>

<p>几种常用的检索模型包括：</p>

<ul>
<li>布尔模型</li>
<li>向量空间模型</li>
<li>概率模型</li>
<li>语言模型</li>
<li>机器学习排序算法</li>
</ul>


<!--more-->


<h2>向量空间模型</h2>

<p>该模型需要将文档表示转换为特征向量，根据特征向量计算相似性。</p>

<p>其中，特征向量的获取主要考虑如下计算因子：</p>

<ul>
<li>词频Tf</li>
<li>逆文档IDF</li>
</ul>


<p>特征权值一般是二者乘积 Weight = Tf * IDF</p>

<h2>概率检索模型</h2>

<p>目前大部分商业搜索引擎采用概率模型作为相关性排序模型。</p>

<p>基本思想：给定用户查询，按照文档和用户需求的相关性由高到低排序。</p>

<p>实现模型：</p>

<ul>
<li>BIM：二元独立模型</li>
<li>BM25模型：目前最成功的内容排序模型。</li>
<li>BM25F：基于BM25，对文档中不同的域赋予不同的权值。</li>
</ul>


<p>BM25模型计算公式融合了4个考虑因素：</p>

<ul>
<li>IDF因子</li>
<li>文档长度因子</li>
<li>文档词频</li>
<li>查询词频</li>
</ul>


<p>BM25模型利用3个自由调节因子(k1，k2，b)对各种因子的权值进行调整组合。</p>

<h2>机器学习排序</h2>

<p>机器学习排序系统由4个步骤组成：</p>

<ul>
<li>人工标注训练数据</li>
<li>文档特征抽取</li>
<li>学习分类函数</li>
<li>在实际搜索系统中采用机器学习模型</li>
</ul>


<p>文档进入机器学习系统前需要转化为特征向量，常用特征包括：</p>

<ul>
<li>查询词在文档中的词频信息</li>
<li>查询词的IDF信息</li>
<li>文档长度</li>
<li>网页的入链数量</li>
<li>网页的出链数量</li>
<li>网页的PageRank值</li>
<li>网页的URL长度</li>
</ul>


<p>确定特征向量X后，每个文档会人工标注出相关性得分Y，这样每个文档转化为一个&lt;X,Y>的形式。
就形成了一个具体的训练实例。</p>

<p>通过多个训练实例，就可采用机器学习技术对系统进行训练，结果往往是一个分类函数或回归函数。</p>

<p>后续用户搜索中就可以用这个分类函数对文档进行打分，形成搜索结果。</p>

<h2>检索质量评价标准</h2>

<p>精确率和召回率是评价检索系统的常用指标，而对于搜索引擎来说，精确率尤为重要。</p>

<ul>
<li>精确率：本次搜索结果中相关文档所占比例。</li>
<li>召回率：本次搜索结果中包含的相关文档占整个文档集合中所有相关文档中的比例。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[搜索引擎索引]]></title>
    <link href="http://lionheartwang.github.io/blog/2016/02/20/sou-suo-yin-qing-suo-yin/"/>
    <updated>2016-02-20T15:23:30+08:00</updated>
    <id>http://lionheartwang.github.io/blog/2016/02/20/sou-suo-yin-qing-suo-yin</id>
    <content type="html"><![CDATA[<p>本文介绍搜索引擎的索引建立，更新，查询和压缩技术。</p>

<!--more-->


<h2>索引基础</h2>

<p>倒排索引是搜索引擎用来快速查找包含某个单词的文档集合的数据结构
倒排索引由单词词典和所有单词对应的倒排列表组成</p>

<p>倒排列表由倒排列表项构成，一般包含：</p>

<ul>
<li>文档ID(一般采取文档编号差值方式编码)</li>
<li>单词出现次数</li>
<li>单词在文档出现位置的信息</li>
</ul>


<h2>索引建立与更新</h2>

<h3>倒排索引建立</h3>

<p>常见建立倒排索引方法：</p>

<ul>
<li>两遍文档遍历法</li>
<li>排序法</li>
<li>归并法</li>
</ul>


<h3>动态索引及更新</h3>

<p>动态索引的三个关键数据结构：</p>

<ul>
<li>倒排索引：对初始文档集合建立的索引结构</li>
<li>临时索引：新文档进入系统建立的索引结构</li>
<li>已删除文档列表：已删除的文档ID列表</li>
</ul>


<p>注意：对于动态索引文档更改可认为是文档先被删除然后向系统内增加一篇新的文档。</p>

<p>对于动态索引需要进行更新，常见索引更新策略：</p>

<ul>
<li>完全重建策略</li>
<li>再合并策略</li>
<li>原地更新策略</li>
<li>混合策略</li>
</ul>


<h2>查询处理</h2>

<h3>基本处理机制</h3>

<p>常见查询处理机制有如下两种：</p>

<ul>
<li>一次一文档方式(Doc At a Time)</li>
<li>一次一单词方式(Term At a Time)</li>
</ul>


<p>注意：</p>

<ul>
<li>一次一文档方式实际查询时不必保留所有文档得分，保留得分Top K的文档队列即可。</li>
<li>一次一单词方式适用于多词查询，找到包含所有查询词的文档等价于求查询词对应的倒排列表的交集。</li>
</ul>


<h3>多字段和短语查询</h3>

<p>实现多字段索引方式：</p>

<ul>
<li>多索引方式</li>
<li>倒排列表方式</li>
<li>扩展列表方式</li>
</ul>


<p>常见的支持短语查询技术的方法包括：</p>

<ul>
<li>位置信息索引</li>
<li>双词索引</li>
<li>短语索引</li>
</ul>


<p>可混合使用，查询索引优先级：短语索引 > 双词索引 > 常规索引</p>

<h3>分布式索引</h3>

<p>常见的分布式索引方案：</p>

<ul>
<li>按文档对索引划分</li>
<li>按单词对索引划分</li>
</ul>


<p>其中按文档对索引划分在以下方面有优势：</p>

<ul>
<li>可扩展性</li>
<li>负载均衡</li>
<li>容错性</li>
<li>对查询方式的支持</li>
</ul>


<h2>索引压缩</h2>

<p>索引压缩包括对词典的压缩和对倒排列表的压缩。</p>

<h3>倒排列表压缩</h3>

<p>倒排列表压缩：</p>

<ul>
<li>无损压缩：更常用</li>
<li>有损压缩：特殊场合使用</li>
</ul>


<p>倒排列表压缩算法的基本构件：</p>

<ul>
<li>一元编码</li>
<li>二元编码</li>
</ul>


<p>常用压缩算法：</p>

<ul>
<li>Elias Gamma算法</li>
<li>Elias Delta算法</li>
<li>Golomb算法</li>
<li>Rice算法</li>
<li>变长字节算法</li>
<li>SimpleX系列算法</li>
<li>PForDelta算法</li>
</ul>


<p>实际使用一般混合采用多种算法。</p>

<h3>重排序与裁剪</h3>

<p>文档ID重排序通过文档聚类并重排文档ID编号来获得较高的索引压缩率
静态索引裁剪是一种有损压缩算法，通过抛弃一部分不重要的索引项来获得较好的压缩效果。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[搜索引擎及其技术架构]]></title>
    <link href="http://lionheartwang.github.io/blog/2016/02/08/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E5%8F%8A%E5%85%B6%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84/"/>
    <updated>2016-02-08T18:15:43+08:00</updated>
    <id>http://lionheartwang.github.io/blog/2016/02/08/搜索引擎及其技术架构</id>
    <content type="html"><![CDATA[<p>本文介绍搜索引擎发展史，搜索引擎的目标与核心问题以及搜索引擎的技术架构。</p>

<!--more-->


<h2>搜索引擎技术发展史</h2>

<h3>史前时代：分类目录的一代</h3>

<ul>
<li>也成为"导航"时代，以Yahoo,hao123为代表。</li>
<li>纯人工将高质量网站分门别类。</li>
</ul>


<h3>第一代: 文本检索的一代</h3>

<ul>
<li>采用经典信息检索模型计算关键词和网页文本的相关程度：布尔模型、向量空间模型、概率模型等。</li>
<li>没有使用网页间链接关系，搜索质量较低。</li>
<li>早期搜索引擎如AltaVista、Excite等使用这种方式。</li>
</ul>


<h3>第二代: 链接分析的一代</h3>

<ul>
<li>利用网页链接关系衡量网页流行程度。</li>
<li>结合网页流行性和内容相似性来改善搜索质量。</li>
<li>Google率先提出并使用PageRank链接分析技术，有效改善搜索质量。</li>
<li>未考虑用户个性化要求</li>
</ul>


<h3>第三代: 用户中心的一代</h3>

<ul>
<li>以理解用户需求为核心：用户历史搜索信息、查询时间地理位置信息。</li>
<li>例如："苹果"关键词，果粉和果农的搜索目的会有很大差距。</li>
</ul>


<h2>搜索引擎的目标</h2>

<p>搜索引擎期望达到的目标：更全、更快、更准。</p>

<p>为达到目标涉及的3个核心问题：</p>

<ul>
<li>用户真正需求是什么。</li>
<li>哪些信息是和用户需求真正相关的。</li>
<li>哪些信息是用户可以信赖的。</li>
</ul>


<h2>搜索引擎的技术架构</h2>

<ul>
<li>信息来源于互联网网页，通过网络爬虫将互联网信息获取到本地。</li>
<li>网页去重模块会对网页做检测，除去重复内容。</li>
<li>搜索引擎对网页解析，抽出主体内容。</li>
<li>通过倒排索引保存网页内容和链接关系。</li>
<li>通过云存储与计算平台处理和存储中间结果。</li>
<li>搜索引擎对接收的用户查询词分析，推导用户搜索意图。</li>
<li>在缓存中查找，缓存系统存储了不同查询意图对应的搜索结果。</li>
<li>如果没有命中，调用网页排序模块功能。结合内容相似性、链接分析返回搜索结果。</li>
<li>反作弊模块用于自动发现通过"作弊"手段提升排名的网页并对其进行处罚。</li>
</ul>

]]></content>
  </entry>
  
</feed>

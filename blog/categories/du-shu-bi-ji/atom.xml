<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[读书笔记 | Workspace of LionHeart]]></title>
  <link href="http://lionheartwang.github.io/blog/categories/du-shu-bi-ji/atom.xml" rel="self"/>
  <link href="http://lionheartwang.github.io/"/>
  <updated>2016-02-05T20:29:34+08:00</updated>
  <id>http://lionheartwang.github.io/</id>
  <author>
    <name><![CDATA[Wang Yiguang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[设计模式概述]]></title>
    <link href="http://lionheartwang.github.io/blog/2016/02/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A6%82%E8%BF%B0/"/>
    <updated>2016-02-05T15:24:58+08:00</updated>
    <id>http://lionheartwang.github.io/blog/2016/02/05/设计模式概述</id>
    <content type="html"><![CDATA[<h2>什么是设计模式？</h2>

<p>一个模式有四个基本要素：</p>

<ul>
<li>模式名称：助记名</li>
<li>问题：描述在何时使用设计模式</li>
<li>解决方案：描述合计的组成成分，它们的相互关系、各自的职责和协作方式</li>
<li>效果：设计模式应用的效果及使用模式应权衡的问题</li>
</ul>


<h2>常见设计模式</h2>

<p>常见设计模式有如下23种：</p>

<h3>Abstract Factory</h3>

<p>提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类</p>

<h3>Adaptor</h3>

<p>将一个类的接口转换成客户希望的另外一个接口。
使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</p>

<h3>Bridge</h3>

<p>将抽象部分与它的实现部分分离。
使它们都可以独立地变化。</p>

<h3>Builder</h3>

<p>将一个复杂对象的构建与它的表示分离。
使得同样的构建过程可以创建不同的表示。</p>

<h3>Chain of Responsibility</h3>

<p>为解除请求的发送者和接受者之间的耦合，而多个对象都有机会处理这个请求。
将这些对象炼成一条链，并沿着这条链传递该请求，直到有一个对象处理它。</p>

<h3>Command</h3>

<p>将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化。
对请求排队或记录请求日志，以及支持可取消的操作。</p>

<h3>Composite</h3>

<p>将对象组合成树型结构以表示”部分-整体”的层次结构。
使得客户对单个对象和复合对象的使用具有一致性。</p>

<h3>Decorator</h3>

<p>动态地给一个对象增添一些额外的职责。
就扩展功能而言，比生成子类的方式更为灵活。</p>

<h3>Facade</h3>

<p>为子系统中的一组接口提供一个一致的界面。
Facade模式定义了一个高层接口，这个接口使这一子系统更加容易使用。</p>

<h3>Factory Method</h3>

<p>定义一个用于创建对象的接口，让子类决定将哪一个类实例化。
使一个类的实例化延迟到其子类。</p>

<h3>Flyweight</h3>

<p>运用共享技术有效地支持大量细粒度的对象。</p>

<h3>Interpreter</h3>

<p>给定一个语言，定义它的文法的一种表示，并定义一个解释器。
该解释器使用该表示来解释语言中的句子。</p>

<h3>Iterator</h3>

<p>提供一种方法顺序访问一个聚合对象中的各个元素，而又不暴露该对象的内部表示。</p>

<h3>Mediator</h3>

<p>用一个中介对象来封装一系列的对象交互。
中介者使各对象不需要显示地相互引用，从而使其耦合松散，
而且可以独立地改变它们之间的交互。</p>

<h3>Memento</h3>

<p>在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象外保存这个状态。
这样以后就可将该对象恢复到保存的状态。</p>

<h3>Observer</h3>

<p>定义对象间的一种一对多的依赖关系，以便当一个对象状态发生改变时，
所有依赖于它的对象都得到通知并自动刷新。</p>

<h3>Prototype</h3>

<p>用原型示例指定创建对象的种类，并且通过拷贝这个原型来创建新的对象。</p>

<h3>Proxy</h3>

<p>为其他对象提供一个代理以控制对这个对象的访问。</p>

<h3>Singleton</h3>

<p>保证一个类只有一个实例，并提供一个访问它的全局访问点。</p>

<h3>State</h3>

<p>允许一个对象在其内部状态改变时改变它的行为。
对象看起来似乎修改了它所属的类。</p>

<h3>Strategy</h3>

<p>定义一系列的算法，把它们一个个封装起来，并且使它们可以互相替换。
使得算法的变化独立于使用它的客户。</p>

<h3>Template Method</h3>

<p>定义一个操作中的算法的骨架，将一些步骤延迟到子类中。
使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</p>

<h3>Visitor</h3>

<p>表示一个作用于某对象结构中的各元素的操作。
使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。</p>

<h2>设计模式分类</h2>

<p>上述设计模式可以分为创建型，结构型和行为型三大类</p>

<h3>创建型</h3>

<p>类：</p>

<ul>
<li>Factory Method</li>
</ul>


<p>对象：</p>

<ul>
<li>Abstract Factory</li>
<li>Builder</li>
<li>Prototype</li>
<li>Singleton</li>
</ul>


<h3>结构型</h3>

<p>类：</p>

<ul>
<li>Adapter(类)</li>
</ul>


<p>对象：</p>

<ul>
<li>Adapter(对象)</li>
<li>Bridge</li>
<li>Composite</li>
<li>Facade</li>
<li>Flyweight</li>
<li>Proxy</li>
</ul>


<h3>行为型</h3>

<p>类：</p>

<ul>
<li>Interpreter</li>
<li>Template Method</li>
</ul>


<p>对象：</p>

<ul>
<li>Chain of Responsibility</li>
<li>Command</li>
<li>Iterator</li>
<li>Mediator</li>
<li>Memento</li>
<li>Observer</li>
<li>State</li>
<li>Strategy</li>
<li>Visitor</li>
</ul>


<h2>设计模式的作用</h2>

<h3>面向对象设计</h3>

<p>面向对象设计的准则：</p>

<ul>
<li>针对接口编程，而不是针对实现编程</li>
<li>优先使用对象组合，而不是类继承</li>
</ul>


<p>面向对象系统中功能复用的两种最常用技术：</p>

<ul>
<li>类继承：允许根据其他类的实现来定义一个类的实现，白箱复用</li>
<li>对象组合：要求被组合的对象具有良好定义的接口，黑箱复用</li>
</ul>


<h3>设计模式应用</h3>

<p>设计模式解决的问题：</p>

<ul>
<li>通过显示地指定一个类来创建对象：Abstract Factory，Factory Method，Prototype</li>
<li>对特殊操作的依赖：Chain of Responsibility，Command</li>
<li>对硬件和软件平台的依赖：Abstract Factory，Bridge</li>
<li>对对象表示或实现的依赖：Abstract Factory，Bridge，Memento，Proxy</li>
<li>算法依赖：Builder，Iterator，Strategy，Template Method，Visitor</li>
<li>紧耦合：Abstract Factory，Command，Facade，Mediator，Observer，Chain of Responsibility</li>
<li>通过生成子类来扩充功能：Bridge，Chain of Responsibility，Composite，Decorator，Observer，Strategy</li>
<li>不能方便地对类进行修改：Adapter，Decorator，Visitor</li>
</ul>


<p>设计模式的应用：</p>

<ul>
<li>应用程序：内部复用性，可维护性，可扩充性</li>
<li>工具箱：一组相关的，可复用的类的集合</li>
<li>框架：构成一类特定软件可复用设计的一组相互协作的类</li>
</ul>


<p>模式和框架的区别：</p>

<ul>
<li>设计模式比框架更抽象</li>
<li>设计模式是比框架更小的体系结构元素</li>
<li>框架比设计模式更加特例化</li>
<li>设计模式的可变性</li>
<li>使用设计模式的关键在于掌握设计模式中可变的部分。</li>
</ul>


<p>创建</p>

<ul>
<li>Abstract Factory：产品对象家族</li>
<li>Builder：如何创建一个组合对象</li>
<li>Prototype：被实例化的子类</li>
<li>Singleton：一个类的唯一示例</li>
</ul>


<p>结构</p>

<ul>
<li>Adapter：对象的接口</li>
<li>Bridge：对象的实现</li>
<li>Composite：一个对象的结构和组成</li>
<li>Decorator：对象的职责，不生成子类</li>
<li>Facade：一个子系统的接口</li>
<li>Flyweight：对象的存储开销</li>
<li>Proxy：如何访问一个对象；该对象的位置</li>
</ul>


<p>行为</p>

<ul>
<li>Chain of Responsibility：满足一个请求的对象</li>
<li>Command：何时、怎样满足一个对象</li>
<li>Interpreter：一个语言的文法及解释</li>
<li>Iterator：如何遍历、访问一个聚合的各元素</li>
<li>Mediator：对象间怎样交互，和谁交互</li>
<li>Memento：一个对象中哪些私有信息存放在该对象之外，以及在什么时候进行存储</li>
<li>Observer：多个对象依赖于另外一个对象，而这些对象又如何保持一致</li>
<li>State：对象的状态</li>
<li>Strategy：算法</li>
<li>Template Method：算法中的某些步骤</li>
<li>Visitor：某些可作用于一个(组)对象上的操作，但不修改这些对象的类</li>
</ul>

]]></content>
  </entry>
  
</feed>

---
layout: post
title: "设计模式概述"
date: 2016-02-05 15:24:58 +0800
comments: true
categories: 设计模式 读书笔记 
---
## 什么是设计模式？
一个模式有四个基本要素：

* 模式名称：助记名
* 问题：描述在何时使用设计模式
* 解决方案：描述合计的组成成分，它们的相互关系、各自的职责和协作方式
* 效果：设计模式应用的效果及使用模式应权衡的问题

## 常见设计模式

常见设计模式有如下23种：
### Abstract Factory
提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类

### Adaptor
将一个类的接口转换成客户希望的另外一个接口。
使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。

### Bridge
将抽象部分与它的实现部分分离。
使它们都可以独立地变化。

### Builder
将一个复杂对象的构建与它的表示分离。
使得同样的构建过程可以创建不同的表示。


### Chain of Responsibility
为解除请求的发送者和接受者之间的耦合，而多个对象都有机会处理这个请求。
将这些对象炼成一条链，并沿着这条链传递该请求，直到有一个对象处理它。

### Command
将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化。
对请求排队或记录请求日志，以及支持可取消的操作。

### Composite
将对象组合成树型结构以表示”部分-整体”的层次结构。
使得客户对单个对象和复合对象的使用具有一致性。

### Decorator
动态地给一个对象增添一些额外的职责。
就扩展功能而言，比生成子类的方式更为灵活。

### Facade
为子系统中的一组接口提供一个一致的界面。
Facade模式定义了一个高层接口，这个接口使这一子系统更加容易使用。

### Factory Method
定义一个用于创建对象的接口，让子类决定将哪一个类实例化。
使一个类的实例化延迟到其子类。

### Flyweight
运用共享技术有效地支持大量细粒度的对象。

### Interpreter
给定一个语言，定义它的文法的一种表示，并定义一个解释器。
该解释器使用该表示来解释语言中的句子。

### Iterator
提供一种方法顺序访问一个聚合对象中的各个元素，而又不暴露该对象的内部表示。

### Mediator
用一个中介对象来封装一系列的对象交互。
中介者使各对象不需要显示地相互引用，从而使其耦合松散，
而且可以独立地改变它们之间的交互。

### Memento
在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象外保存这个状态。
这样以后就可将该对象恢复到保存的状态。

### Observer
定义对象间的一种一对多的依赖关系，以便当一个对象状态发生改变时，
所有依赖于它的对象都得到通知并自动刷新。

### Prototype
用原型示例指定创建对象的种类，并且通过拷贝这个原型来创建新的对象。

### Proxy
为其他对象提供一个代理以控制对这个对象的访问。

### Singleton
保证一个类只有一个实例，并提供一个访问它的全局访问点。

### State
允许一个对象在其内部状态改变时改变它的行为。
对象看起来似乎修改了它所属的类。

### Strategy
定义一系列的算法，把它们一个个封装起来，并且使它们可以互相替换。
使得算法的变化独立于使用它的客户。

### Template Method
定义一个操作中的算法的骨架，将一些步骤延迟到子类中。
使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。

### Visitor
表示一个作用于某对象结构中的各元素的操作。
使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。

## 设计模式分类
上述设计模式可以分为创建型，结构型和行为型三大类

### 创建型

类：

* Factory Method

对象：

* Abstract Factory
* Builder
* Prototype
* Singleton

### 结构型

类：

* Adapter(类)

对象：

* Adapter(对象)
* Bridge
* Composite
* Facade
* Flyweight
* Proxy

### 行为型

类：

* Interpreter
* Template Method

对象：

* Chain of Responsibility
* Command
* Iterator
* Mediator
* Memento
* Observer
* State
* Strategy
* Visitor

## 设计模式的作用

### 面向对象设计

面向对象设计的准则：

* I.  针对接口编程，而不是针对实现编程
* II. 优先使用对象组合，而不是类继承

面向对象系统中功能复用的两种最常用技术：

* 类继承：允许根据其他类的实现来定义一个类的实现，白箱复用
* 对象组合：要求被组合的对象具有良好定义的接口，黑箱复用

### 设计模式应用

设计模式解决的问题：

* 通过显示地指定一个类来创建对象：Abstract Factory，Factory Method，Prototype
* 对特殊操作的依赖：Chain of Responsibility，Command
* 对硬件和软件平台的依赖：Abstract Factory，Bridge
* 对对象表示或实现的依赖：Abstract Factory，Bridge，Memento，Proxy
* 算法依赖：Builder，Iterator，Strategy，Template Method，Visitor
* 紧耦合：Abstract Factory，Command，Facade，Mediator，Observer，Chain of Responsibility
* 通过生成子类来扩充功能：Bridge，Chain of Responsibility，Composite，Decorator，Observer，Strategy
* 不能方便地对类进行修改：Adapter，Decorator，Visitor

设计模式的应用：
* 应用程序：内部复用性，可维护性，可扩充性
* 工具箱：一组相关的，可复用的类的集合
* 框架：构成一类特定软件可复用设计的一组相互协作的类

模式和框架的区别：

* 设计模式比框架更抽象
* 设计模式是比框架更小的体系结构元素
* 框架比设计模式更加特例化
* 设计模式的可变性
* 使用设计模式的关键在于掌握设计模式中可变的部分。

创建

* Abstract Factory：产品对象家族
* Builder：如何创建一个组合对象
* Prototype：被实例化的子类
* Singleton：一个类的唯一示例

结构

* Adapter：对象的接口
* Bridge：对象的实现
* Composite：一个对象的结构和组成
* Decorator：对象的职责，不生成子类
* Facade：一个子系统的接口
* Flyweight：对象的存储开销
* Proxy：如何访问一个对象；该对象的位置

行为

* Chain of Responsibility：满足一个请求的对象
* Command：何时、怎样满足一个对象
* Interpreter：一个语言的文法及解释
* Iterator：如何遍历、访问一个聚合的各元素
* Mediator：对象间怎样交互，和谁交互
* Memento：一个对象中哪些私有信息存放在该对象之外，以及在什么时候进行存储
* Observer：多个对象依赖于另外一个对象，而这些对象又如何保持一致
* State：对象的状态
* Strategy：算法
* Template Method：算法中的某些步骤
* Visitor：某些可作用于一个(组)对象上的操作，但不修改这些对象的类
